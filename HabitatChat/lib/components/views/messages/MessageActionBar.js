"use strict";

var _interopRequireWildcard3 = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime/helpers/interopRequireWildcard"));

var _react = _interopRequireWildcard3(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _languageHandler = require("../../../languageHandler");

var sdk = _interopRequireWildcard3(require("../../../index"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _ContextMenu = require("../../structures/ContextMenu");

var _EventUtils = require("../../../utils/EventUtils");

var _RoomContext = _interopRequireDefault(require("../../../contexts/RoomContext"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

/*
Copyright 2019 New Vector Ltd
Copyright 2019 Michael Telatynski <7t3chguy@gmail.com>
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const OptionsButton = ({
  mxEvent,
  getTile,
  getReplyThread,
  permalinkCreator,
  onFocusChange
}) => {
  const [menuDisplayed, button, openMenu, closeMenu] = (0, _ContextMenu.useContextMenu)();
  (0, _react.useEffect)(() => {
    onFocusChange(menuDisplayed);
  }, [onFocusChange, menuDisplayed]);
  let contextMenu;

  if (menuDisplayed) {
    const MessageContextMenu = sdk.getComponent('context_menus.MessageContextMenu');
    const tile = getTile && getTile();
    const replyThread = getReplyThread && getReplyThread();

    const onCryptoClick = () => {
      _Modal.default.createTrackedDialogAsync('Encrypted Event Dialog', '', Promise.resolve().then(() => (0, _interopRequireWildcard2.default)(require('../../../async-components/views/dialogs/EncryptedEventDialog'))), {
        event: mxEvent
      });
    };

    let e2eInfoCallback = null;

    if (mxEvent.isEncrypted() && !_SettingsStore.default.getValue("feature_cross_signing")) {
      e2eInfoCallback = onCryptoClick;
    }

    const buttonRect = button.current.getBoundingClientRect();
    contextMenu = /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenu, (0, _extends2.default)({}, (0, _ContextMenu.aboveLeftOf)(buttonRect), {
      onFinished: closeMenu
    }), /*#__PURE__*/_react.default.createElement(MessageContextMenu, {
      mxEvent: mxEvent,
      permalinkCreator: permalinkCreator,
      eventTileOps: tile && tile.getEventTileOps ? tile.getEventTileOps() : undefined,
      collapseReplyThread: replyThread && replyThread.canCollapse() ? replyThread.collapse : undefined,
      e2eInfoCallback: e2eInfoCallback,
      onFinished: closeMenu
    }));
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuButton, {
    className: "mx_MessageActionBar_maskButton mx_MessageActionBar_optionsButton",
    label: (0, _languageHandler._t)("Options"),
    onClick: openMenu,
    isExpanded: menuDisplayed,
    inputRef: button
  }), contextMenu);
};

const ReactButton = ({
  mxEvent,
  reactions,
  onFocusChange
}) => {
  const [menuDisplayed, button, openMenu, closeMenu] = (0, _ContextMenu.useContextMenu)();
  (0, _react.useEffect)(() => {
    onFocusChange(menuDisplayed);
  }, [onFocusChange, menuDisplayed]);
  let contextMenu;

  if (menuDisplayed) {
    const buttonRect = button.current.getBoundingClientRect();
    const ReactionPicker = sdk.getComponent('emojipicker.ReactionPicker');
    contextMenu = /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenu, (0, _extends2.default)({}, (0, _ContextMenu.aboveLeftOf)(buttonRect), {
      onFinished: closeMenu,
      managed: false
    }), /*#__PURE__*/_react.default.createElement(ReactionPicker, {
      mxEvent: mxEvent,
      reactions: reactions,
      onFinished: closeMenu
    }));
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuButton, {
    className: "mx_MessageActionBar_maskButton mx_MessageActionBar_reactButton",
    label: (0, _languageHandler._t)("React"),
    onClick: openMenu,
    isExpanded: menuDisplayed,
    inputRef: button
  }), contextMenu);
};

class MessageActionBar extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onDecrypted", () => {
      // When an event decrypts, it is likely to change the set of available
      // actions, so we force an update to check again.
      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onBeforeRedaction", () => {
      // When an event is redacted, we can't edit it so update the available actions.
      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onFocusChange", focused => {
      if (!this.props.onFocusChange) {
        return;
      }

      this.props.onFocusChange(focused);
    });
    (0, _defineProperty2.default)(this, "onReplyClick", ev => {
      _dispatcher.default.dispatch({
        action: 'reply_to_event',
        event: this.props.mxEvent
      });
    });
    (0, _defineProperty2.default)(this, "onEditClick", ev => {
      _dispatcher.default.dispatch({
        action: 'edit_event',
        event: this.props.mxEvent
      });
    });
  }

  componentDidMount() {
    this.props.mxEvent.on("Event.decrypted", this.onDecrypted);
    this.props.mxEvent.on("Event.beforeRedaction", this.onBeforeRedaction);
  }

  componentWillUnmount() {
    this.props.mxEvent.removeListener("Event.decrypted", this.onDecrypted);
    this.props.mxEvent.removeListener("Event.beforeRedaction", this.onBeforeRedaction);
  }

  render() {
    const AccessibleButton = sdk.getComponent('elements.AccessibleButton');
    let reactButton;
    let replyButton;
    let editButton;

    if ((0, _EventUtils.isContentActionable)(this.props.mxEvent)) {
      if (this.context.canReact) {
        reactButton = /*#__PURE__*/_react.default.createElement(ReactButton, {
          mxEvent: this.props.mxEvent,
          reactions: this.props.reactions,
          onFocusChange: this.onFocusChange
        });
      }

      if (this.context.canReply) {
        replyButton = /*#__PURE__*/_react.default.createElement(AccessibleButton, {
          className: "mx_MessageActionBar_maskButton mx_MessageActionBar_replyButton",
          title: (0, _languageHandler._t)("Reply"),
          onClick: this.onReplyClick
        });
      }
    }

    if ((0, _EventUtils.canEditContent)(this.props.mxEvent)) {
      editButton = /*#__PURE__*/_react.default.createElement(AccessibleButton, {
        className: "mx_MessageActionBar_maskButton mx_MessageActionBar_editButton",
        title: (0, _languageHandler._t)("Edit"),
        onClick: this.onEditClick
      });
    } // aria-live=off to not have this read out automatically as navigating around timeline, gets repetitive.


    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MessageActionBar",
      role: "toolbar",
      "aria-label": (0, _languageHandler._t)("Message Actions"),
      "aria-live": "off"
    }, reactButton, replyButton, editButton, /*#__PURE__*/_react.default.createElement(OptionsButton, {
      mxEvent: this.props.mxEvent,
      getReplyThread: this.props.getReplyThread,
      getTile: this.props.getTile,
      permalinkCreator: this.props.permalinkCreator,
      onFocusChange: this.onFocusChange
    }));
  }

}

exports.default = MessageActionBar;
(0, _defineProperty2.default)(MessageActionBar, "propTypes", {
  mxEvent: _propTypes.default.object.isRequired,
  // The Relations model from the JS SDK for reactions to `mxEvent`
  reactions: _propTypes.default.object,
  permalinkCreator: _propTypes.default.object,
  getTile: _propTypes.default.func,
  getReplyThread: _propTypes.default.func,
  onFocusChange: _propTypes.default.func
});
(0, _defineProperty2.default)(MessageActionBar, "contextType", _RoomContext.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,