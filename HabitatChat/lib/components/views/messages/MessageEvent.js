"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _Mjolnir = require("../../../mjolnir/Mjolnir");

var _RedactedBody = _interopRequireDefault(require("./RedactedBody"));

var _UnknownBody = _interopRequireDefault(require("./UnknownBody"));

/*
Copyright 2015, 2016 OpenMarket Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var _default = (0, _createReactClass.default)({
  displayName: 'MessageEvent',
  propTypes: {
    /* the MatrixEvent to show */
    mxEvent: _propTypes.default.object.isRequired,

    /* a list of words to highlight */
    highlights: _propTypes.default.array,

    /* link URL for the highlights */
    highlightLink: _propTypes.default.string,

    /* should show URL previews for this event */
    showUrlPreview: _propTypes.default.bool,

    /* callback called when dynamic content in events are loaded */
    onHeightChanged: _propTypes.default.func,

    /* the shape of the tile, used */
    tileShape: _propTypes.default.string,

    /* the maximum image height to use, if the event is an image */
    maxImageHeight: _propTypes.default.number
  },
  // TODO: [REACT-WARNING] Replace component with real class, use constructor for refs
  UNSAFE_componentWillMount: function () {
    this._body = (0, _react.createRef)();
  },
  getEventTileOps: function () {
    return this._body.current && this._body.current.getEventTileOps ? this._body.current.getEventTileOps() : null;
  },
  onTileUpdate: function () {
    this.forceUpdate();
  },
  render: function () {
    const bodyTypes = {
      'm.text': sdk.getComponent('messages.TextualBody'),
      'm.notice': sdk.getComponent('messages.TextualBody'),
      'm.emote': sdk.getComponent('messages.TextualBody'),
      'm.image': sdk.getComponent('messages.MImageBody'),
      'm.file': sdk.getComponent('messages.MFileBody'),
      'm.audio': sdk.getComponent('messages.MAudioBody'),
      'm.video': sdk.getComponent('messages.MVideoBody')
    };
    const evTypes = {
      'm.sticker': sdk.getComponent('messages.MStickerBody')
    };
    const content = this.props.mxEvent.getContent();
    const type = this.props.mxEvent.getType();
    const msgtype = content.msgtype;
    let BodyType = _RedactedBody.default;

    if (!this.props.mxEvent.isRedacted()) {
      // only resolve BodyType if event is not redacted
      if (type && evTypes[type]) {
        BodyType = evTypes[type];
      } else if (msgtype && bodyTypes[msgtype]) {
        BodyType = bodyTypes[msgtype];
      } else if (content.url) {
        // Fallback to MFileBody if there's a content URL
        BodyType = bodyTypes['m.file'];
      } else {
        // Fallback to UnknownBody otherwise if not redacted
        BodyType = _UnknownBody.default;
      }
    }

    if (_SettingsStore.default.isFeatureEnabled("feature_mjolnir")) {
      const key = "mx_mjolnir_render_".concat(this.props.mxEvent.getRoomId(), "__").concat(this.props.mxEvent.getId());
      const allowRender = localStorage.getItem(key) === "true";

      if (!allowRender) {
        const userDomain = this.props.mxEvent.getSender().split(':').slice(1).join(':');

        const userBanned = _Mjolnir.Mjolnir.sharedInstance().isUserBanned(this.props.mxEvent.getSender());

        const serverBanned = _Mjolnir.Mjolnir.sharedInstance().isServerBanned(userDomain);

        if (userBanned || serverBanned) {
          BodyType = sdk.getComponent('messages.MjolnirBody');
        }
      }
    }

    return /*#__PURE__*/_react.default.createElement(BodyType, {
      ref: this._body,
      mxEvent: this.props.mxEvent,
      highlights: this.props.highlights,
      highlightLink: this.props.highlightLink,
      showUrlPreview: this.props.showUrlPreview,
      tileShape: this.props.tileShape,
      maxImageHeight: this.props.maxImageHeight,
      replacingEventId: this.props.replacingEventId,
      editState: this.props.editState,
      onHeightChanged: this.props.onHeightChanged,
      onMessageAllowed: this.onTileUpdate
    });
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,