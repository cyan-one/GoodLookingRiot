"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

var _EventUtils = require("../../../utils/EventUtils");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

/*
Copyright 2019 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// The maximum number of reactions to initially show on a message.
const MAX_ITEMS_WHEN_LIMITED = 8;

class ReactionsRow extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onReactionsChange", () => {
      // TODO: Call `onHeightChanged` as needed
      this.setState({
        myReactions: this.getMyReactions()
      }); // Using `forceUpdate` for the moment, since we know the overall set of reactions
      // has changed (this is triggered by events for that purpose only) and
      // `PureComponent`s shallow state / props compare would otherwise filter this out.

      this.forceUpdate();
    });
    (0, _defineProperty2.default)(this, "onShowAllClick", () => {
      this.setState({
        showAll: true
      });
    });

    if (props.reactions) {
      props.reactions.on("Relations.add", this.onReactionsChange);
      props.reactions.on("Relations.remove", this.onReactionsChange);
      props.reactions.on("Relations.redaction", this.onReactionsChange);
    }

    this.state = {
      myReactions: this.getMyReactions(),
      showAll: false
    };
  }

  componentDidUpdate(prevProps) {
    if (prevProps.reactions !== this.props.reactions) {
      this.props.reactions.on("Relations.add", this.onReactionsChange);
      this.props.reactions.on("Relations.remove", this.onReactionsChange);
      this.props.reactions.on("Relations.redaction", this.onReactionsChange);
      this.onReactionsChange();
    }
  }

  componentWillUnmount() {
    if (this.props.reactions) {
      this.props.reactions.removeListener("Relations.add", this.onReactionsChange);
      this.props.reactions.removeListener("Relations.remove", this.onReactionsChange);
      this.props.reactions.removeListener("Relations.redaction", this.onReactionsChange);
    }
  }

  getMyReactions() {
    const reactions = this.props.reactions;

    if (!reactions) {
      return null;
    }

    const userId = _MatrixClientPeg.MatrixClientPeg.get().getUserId();

    const myReactions = reactions.getAnnotationsBySender()[userId];

    if (!myReactions) {
      return null;
    }

    return [...myReactions.values()];
  }

  render() {
    const {
      mxEvent,
      reactions
    } = this.props;
    const {
      myReactions,
      showAll
    } = this.state;

    if (!reactions || !(0, _EventUtils.isContentActionable)(mxEvent)) {
      return null;
    }

    const ReactionsRowButton = sdk.getComponent('messages.ReactionsRowButton');
    let items = reactions.getSortedAnnotationsByKey().map(([content, events]) => {
      const count = events.size;

      if (!count) {
        return null;
      }

      const myReactionEvent = myReactions && myReactions.find(mxEvent => {
        if (mxEvent.isRedacted()) {
          return false;
        }

        return mxEvent.getRelation().key === content;
      });
      return /*#__PURE__*/_react.default.createElement(ReactionsRowButton, {
        key: content,
        content: content,
        count: count,
        mxEvent: mxEvent,
        reactionEvents: events,
        myReactionEvent: myReactionEvent
      });
    }).filter(item => !!item); // Show the first MAX_ITEMS if there are MAX_ITEMS + 1 or more items.
    // The "+ 1" ensure that the "show all" reveals something that takes up
    // more space than the button itself.

    let showAllButton;

    if (items.length > MAX_ITEMS_WHEN_LIMITED + 1 && !showAll) {
      items = items.slice(0, MAX_ITEMS_WHEN_LIMITED);
      showAllButton = /*#__PURE__*/_react.default.createElement("a", {
        className: "mx_ReactionsRow_showAll",
        href: "#",
        onClick: this.onShowAllClick
      }, (0, _languageHandler._t)("Show all"));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ReactionsRow",
      role: "toolbar",
      "aria-label": (0, _languageHandler._t)("Reactions")
    }, items, showAllButton);
  }

}

exports.default = ReactionsRow;
(0, _defineProperty2.default)(ReactionsRow, "propTypes", {
  // The event we're displaying reactions for
  mxEvent: _propTypes.default.object.isRequired,
  // The Relations model from the JS SDK for reactions to `mxEvent`
  reactions: _propTypes.default.object
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,