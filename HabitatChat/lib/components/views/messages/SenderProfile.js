"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _Flair = _interopRequireDefault(require("../elements/Flair.js"));

var _FlairStore = _interopRequireDefault(require("../../../stores/FlairStore"));

var _languageHandler = require("../../../languageHandler");

var _FormattingUtils = require("../../../utils/FormattingUtils");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

/*
 Copyright 2015, 2016 OpenMarket Ltd

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
var _default = (0, _createReactClass.default)({
  displayName: 'SenderProfile',
  propTypes: {
    mxEvent: _propTypes.default.object.isRequired,
    // event whose sender we're showing
    text: _propTypes.default.string,
    // Text to show. Defaults to sender name
    onClick: _propTypes.default.func
  },
  statics: {
    contextType: _MatrixClientContext.default
  },

  getInitialState() {
    return {
      userGroups: null,
      relatedGroups: []
    };
  },

  componentDidMount() {
    this.unmounted = false;

    this._updateRelatedGroups();

    _FlairStore.default.getPublicisedGroupsCached(this.context, this.props.mxEvent.getSender()).then(userGroups => {
      if (this.unmounted) return;
      this.setState({
        userGroups
      });
    });

    this.context.on('RoomState.events', this.onRoomStateEvents);
  },

  componentWillUnmount() {
    this.unmounted = true;
    this.context.removeListener('RoomState.events', this.onRoomStateEvents);
  },

  onRoomStateEvents(event) {
    if (event.getType() === 'm.room.related_groups' && event.getRoomId() === this.props.mxEvent.getRoomId()) {
      this._updateRelatedGroups();
    }
  },

  _updateRelatedGroups() {
    if (this.unmounted) return;
    const room = this.context.getRoom(this.props.mxEvent.getRoomId());
    if (!room) return;
    const relatedGroupsEvent = room.currentState.getStateEvents('m.room.related_groups', '');
    this.setState({
      relatedGroups: relatedGroupsEvent ? relatedGroupsEvent.getContent().groups || [] : []
    });
  },

  _getDisplayedGroups(userGroups, relatedGroups) {
    let displayedGroups = userGroups || [];

    if (relatedGroups && relatedGroups.length > 0) {
      displayedGroups = relatedGroups.filter(groupId => {
        return displayedGroups.includes(groupId);
      });
    } else {
      displayedGroups = [];
    }

    return displayedGroups;
  },

  render() {
    const {
      mxEvent
    } = this.props;
    const colorClass = (0, _FormattingUtils.getUserNameColorClass)(mxEvent.getSender());
    const name = mxEvent.sender ? mxEvent.sender.name : mxEvent.getSender();
    const {
      msgtype
    } = mxEvent.getContent();

    if (msgtype === 'm.emote') {
      return /*#__PURE__*/_react.default.createElement("span", null); // emote message must include the name so don't duplicate it
    }

    let flair = /*#__PURE__*/_react.default.createElement("div", null);

    if (this.props.enableFlair) {
      const displayedGroups = this._getDisplayedGroups(this.state.userGroups, this.state.relatedGroups);

      flair = /*#__PURE__*/_react.default.createElement(_Flair.default, {
        key: "flair",
        userId: mxEvent.getSender(),
        groups: displayedGroups
      });
    }

    const nameElem = name || ''; // Name + flair

    const nameFlair = /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SenderProfile_name ".concat(colorClass)
    }, nameElem), flair);

    const content = this.props.text ? /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SenderProfile_aux"
    }, (0, _languageHandler._t)(this.props.text, {
      senderName: () => nameElem
    })) : nameFlair;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SenderProfile",
      dir: "auto",
      onClick: this.props.onClick
    }, content);
  }

});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,