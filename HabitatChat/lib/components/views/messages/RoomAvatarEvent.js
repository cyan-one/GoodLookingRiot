"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var sdk = _interopRequireWildcard(require("../../../index"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

/*
Copyright 2017 Vector Creations Ltd
Copyright 2019 Michael Telatynski <7t3chguy@gmail.com>
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var _default = (0, _createReactClass.default)({
  displayName: 'RoomAvatarEvent',
  propTypes: {
    /* the MatrixEvent to show */
    mxEvent: _propTypes.default.object.isRequired
  },
  onAvatarClick: function () {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const ev = this.props.mxEvent;
    const httpUrl = cli.mxcUrlToHttp(ev.getContent().url);
    const room = cli.getRoom(this.props.mxEvent.getRoomId());
    const text = (0, _languageHandler._t)('%(senderDisplayName)s changed the avatar for %(roomName)s', {
      senderDisplayName: ev.sender && ev.sender.name ? ev.sender.name : ev.getSender(),
      roomName: room ? room.name : ''
    });
    const ImageView = sdk.getComponent("elements.ImageView");
    const params = {
      src: httpUrl,
      name: text
    };

    _Modal.default.createDialog(ImageView, params, "mx_Dialog_lightbox");
  },
  render: function () {
    const ev = this.props.mxEvent;
    const senderDisplayName = ev.sender && ev.sender.name ? ev.sender.name : ev.getSender();
    const RoomAvatar = sdk.getComponent("avatars.RoomAvatar");

    if (!ev.getContent().url || ev.getContent().url.trim().length === 0) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_TextualEvent"
      }, (0, _languageHandler._t)('%(senderDisplayName)s removed the room avatar.', {
        senderDisplayName
      }));
    }

    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(ev.getRoomId()); // Provide all arguments to RoomAvatar via oobData because the avatar is historic


    const oobData = {
      avatarUrl: ev.getContent().url,
      name: room ? room.name : ""
    };
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomAvatarEvent"
    }, (0, _languageHandler._t)('%(senderDisplayName)s changed the room avatar to <img/>', {
      senderDisplayName: senderDisplayName
    }, {
      'img': () => /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        key: "avatar",
        className: "mx_RoomAvatarEvent_avatar",
        onClick: this.onAvatarClick
      }, /*#__PURE__*/_react.default.createElement(RoomAvatar, {
        width: 14,
        height: 14,
        oobData: oobData
      }))
    }));
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,