"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var HtmlUtils = _interopRequireWildcard(require("../../../HtmlUtils"));

var _MessageDiffUtils = require("../../../utils/MessageDiffUtils");

var _DateUtils = require("../../../DateUtils");

var _matrixJsSdk = require("matrix-js-sdk");

var _pillify = require("../../../utils/pillify");

var _languageHandler = require("../../../languageHandler");

var sdk = _interopRequireWildcard(require("../../../index"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _classnames = _interopRequireDefault(require("classnames"));

var _RedactedBody = _interopRequireDefault(require("./RedactedBody"));

/*
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function getReplacedContent(event) {
  const originalContent = event.getOriginalContent();
  return originalContent["m.new_content"] || originalContent;
}

class EditHistoryMessage extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "_onAssociatedStatusChanged", () => {
      this.setState({
        sendStatus: this.props.mxEvent.getAssociatedStatus()
      });
    });
    (0, _defineProperty2.default)(this, "_onRedactClick", async () => {
      const event = this.props.mxEvent;

      const cli = _MatrixClientPeg.MatrixClientPeg.get();

      const ConfirmAndWaitRedactDialog = sdk.getComponent("dialogs.ConfirmAndWaitRedactDialog");

      _Modal.default.createTrackedDialog('Confirm Redact Dialog', 'Edit history', ConfirmAndWaitRedactDialog, {
        redact: () => cli.redactEvent(event.getRoomId(), event.getId())
      }, 'mx_Dialog_confirmredact');
    });
    (0, _defineProperty2.default)(this, "_onViewSourceClick", () => {
      const ViewSource = sdk.getComponent('structures.ViewSource');

      _Modal.default.createTrackedDialog('View Event Source', 'Edit history', ViewSource, {
        roomId: this.props.mxEvent.getRoomId(),
        eventId: this.props.mxEvent.getId(),
        content: this.props.mxEvent.event
      }, 'mx_Dialog_viewsource');
    });

    const _cli = _MatrixClientPeg.MatrixClientPeg.get();

    const {
      userId
    } = _cli.credentials;
    const _event = this.props.mxEvent;

    const room = _cli.getRoom(_event.getRoomId());

    if (_event.localRedactionEvent()) {
      _event.localRedactionEvent().on("status", this._onAssociatedStatusChanged);
    }

    const canRedact = room.currentState.maySendRedactionForEvent(_event, userId);
    this.state = {
      canRedact,
      sendStatus: _event.getAssociatedStatus()
    };
    this._content = (0, _react.createRef)();
    this._pills = [];
  }

  pillifyLinks() {
    // not present for redacted events
    if (this._content.current) {
      (0, _pillify.pillifyLinks)(this._content.current.children, this.props.mxEvent, this._pills);
    }
  }

  componentDidMount() {
    this.pillifyLinks();
  }

  componentWillUnmount() {
    (0, _pillify.unmountPills)(this._pills);
    const event = this.props.mxEvent;

    if (event.localRedactionEvent()) {
      event.localRedactionEvent().off("status", this._onAssociatedStatusChanged);
    }
  }

  componentDidUpdate() {
    this.pillifyLinks();
  }

  _renderActionBar() {
    const AccessibleButton = sdk.getComponent('elements.AccessibleButton'); // hide the button when already redacted

    let redactButton;

    if (!this.props.mxEvent.isRedacted() && !this.props.isBaseEvent && this.state.canRedact) {
      redactButton = /*#__PURE__*/_react.default.createElement(AccessibleButton, {
        onClick: this._onRedactClick
      }, (0, _languageHandler._t)("Remove"));
    }

    const viewSourceButton = /*#__PURE__*/_react.default.createElement(AccessibleButton, {
      onClick: this._onViewSourceClick
    }, (0, _languageHandler._t)("View Source")); // disabled remove button when not allowed


    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MessageActionBar"
    }, redactButton, viewSourceButton);
  }

  render() {
    const {
      mxEvent
    } = this.props;
    const content = getReplacedContent(mxEvent);
    let contentContainer;

    if (mxEvent.isRedacted()) {
      contentContainer = /*#__PURE__*/_react.default.createElement(_RedactedBody.default, {
        mxEvent: this.props.mxEvent
      });
    } else {
      let contentElements;

      if (this.props.previousEdit) {
        contentElements = (0, _MessageDiffUtils.editBodyDiffToHtml)(getReplacedContent(this.props.previousEdit), content);
      } else {
        contentElements = HtmlUtils.bodyToHtml(content, null, {
          stripReplyFallback: true
        });
      }

      if (mxEvent.getContent().msgtype === "m.emote") {
        const name = mxEvent.sender ? mxEvent.sender.name : mxEvent.getSender();
        contentContainer = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_EventTile_content",
          ref: this._content
        }, "*\xA0", /*#__PURE__*/_react.default.createElement("span", {
          className: "mx_MEmoteBody_sender"
        }, name), "\xA0", contentElements);
      } else {
        contentContainer = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_EventTile_content",
          ref: this._content
        }, contentElements);
      }
    }

    const timestamp = (0, _DateUtils.formatTime)(new Date(mxEvent.getTs()), this.props.isTwelveHour);
    const isSending = ['sending', 'queued', 'encrypting'].indexOf(this.state.sendStatus) !== -1;
    const classes = (0, _classnames.default)({
      "mx_EventTile": true,
      "mx_EventTile_sending": isSending,
      "mx_EventTile_notSent": this.state.sendStatus === 'not_sent'
    });
    return /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement("div", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EventTile_line"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_MessageTimestamp"
    }, timestamp), contentContainer, this._renderActionBar())));
  }

}

exports.default = EditHistoryMessage;
(0, _defineProperty2.default)(EditHistoryMessage, "propTypes", {
  // the message event being edited
  mxEvent: _propTypes.default.instanceOf(_matrixJsSdk.MatrixEvent).isRequired,
  previousEdit: _propTypes.default.instanceOf(_matrixJsSdk.MatrixEvent),
  isBaseEvent: _propTypes.default.bool
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,