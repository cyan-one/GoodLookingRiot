"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _EmojiPicker = require("./EmojiPicker");

var sdk = _interopRequireWildcard(require("../../../index"));

/*
Copyright 2019 Tulir Asokan <tulir@maunium.net>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const OVERFLOW_ROWS = 3;

class Category extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "_renderEmojiRow", rowIndex => {
      const {
        onClick,
        onMouseEnter,
        onMouseLeave,
        selectedEmojis,
        emojis
      } = this.props;
      const emojisForRow = emojis.slice(rowIndex * 8, (rowIndex + 1) * 8);
      const Emoji = sdk.getComponent("emojipicker.Emoji");
      return /*#__PURE__*/_react.default.createElement("div", {
        key: rowIndex
      }, emojisForRow.map(emoji => /*#__PURE__*/_react.default.createElement(Emoji, {
        key: emoji.hexcode,
        emoji: emoji,
        selectedEmojis: selectedEmojis,
        onClick: onClick,
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave
      })));
    });
  }

  render() {
    const {
      emojis,
      name,
      heightBefore,
      viewportHeight,
      scrollTop
    } = this.props;

    if (!emojis || emojis.length === 0) {
      return null;
    }

    const rows = new Array(Math.ceil(emojis.length / _EmojiPicker.EMOJIS_PER_ROW));

    for (let counter = 0; counter < rows.length; ++counter) {
      rows[counter] = counter;
    }

    const LazyRenderList = sdk.getComponent('elements.LazyRenderList');
    const viewportTop = scrollTop;
    const viewportBottom = viewportTop + viewportHeight;
    const listTop = heightBefore + _EmojiPicker.CATEGORY_HEADER_HEIGHT;
    const listBottom = listTop + rows.length * _EmojiPicker.EMOJI_HEIGHT;
    const top = Math.max(viewportTop, listTop);
    const bottom = Math.min(viewportBottom, listBottom); // the viewport height and scrollTop passed to the LazyRenderList
    // is capped at the intersection with the real viewport, so lists
    // out of view are passed height 0, so they won't render any items.

    const localHeight = Math.max(0, bottom - top);
    const localScrollTop = Math.max(0, scrollTop - listTop);
    return /*#__PURE__*/_react.default.createElement("section", {
      className: "mx_EmojiPicker_category",
      "data-category-id": this.props.id
    }, /*#__PURE__*/_react.default.createElement("h2", {
      className: "mx_EmojiPicker_category_label"
    }, name), /*#__PURE__*/_react.default.createElement(LazyRenderList, {
      element: "ul",
      className: "mx_EmojiPicker_list",
      itemHeight: _EmojiPicker.EMOJI_HEIGHT,
      items: rows,
      scrollTop: localScrollTop,
      height: localHeight,
      overflowItems: OVERFLOW_ROWS,
      overflowMargin: 0,
      renderItem: this._renderEmojiRow
    }));
  }

}

(0, _defineProperty2.default)(Category, "propTypes", {
  emojis: _propTypes.default.arrayOf(_propTypes.default.object).isRequired,
  name: _propTypes.default.string.isRequired,
  id: _propTypes.default.string.isRequired,
  onMouseEnter: _propTypes.default.func.isRequired,
  onMouseLeave: _propTypes.default.func.isRequired,
  onClick: _propTypes.default.func.isRequired,
  selectedEmojis: _propTypes.default.instanceOf(Set)
});
var _default = Category;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,