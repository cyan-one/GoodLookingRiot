"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EMOJIS_PER_ROW = exports.EMOJI_HEIGHT = exports.CATEGORY_HEADER_HEIGHT = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

var recent = _interopRequireWildcard(require("../../../emojipicker/recent"));

var _emoji = require("../../../emoji");

var _AutoHideScrollbar = _interopRequireDefault(require("../../structures/AutoHideScrollbar"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const CATEGORY_HEADER_HEIGHT = 22;
exports.CATEGORY_HEADER_HEIGHT = CATEGORY_HEADER_HEIGHT;
const EMOJI_HEIGHT = 37;
exports.EMOJI_HEIGHT = EMOJI_HEIGHT;
const EMOJIS_PER_ROW = 8;
exports.EMOJIS_PER_ROW = EMOJIS_PER_ROW;

class EmojiPicker extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onScroll", () => {
      const body = this.bodyRef.current;
      this.setState({
        scrollTop: body.scrollTop,
        viewportHeight: body.clientHeight
      });
      this.updateVisibility();
    });
    this.state = {
      filter: "",
      previewEmoji: null,
      scrollTop: 0,
      // initial estimation of height, dialog is hardcoded to 450px height.
      // should be enough to never have blank rows of emojis as
      // 3 rows of overflow are also rendered. The actual value is updated on scroll.
      viewportHeight: 280
    }; // Convert recent emoji characters to emoji data, removing unknowns and duplicates

    this.recentlyUsed = Array.from(new Set(recent.get().map(_emoji.getEmojiFromUnicode).filter(Boolean)));
    this.memoizedDataByCategory = _objectSpread({
      recent: this.recentlyUsed
    }, _emoji.DATA_BY_CATEGORY);
    this.categories = [{
      id: "recent",
      name: (0, _languageHandler._t)("Frequently Used"),
      enabled: this.recentlyUsed.length > 0,
      visible: this.recentlyUsed.length > 0,
      ref: _react.default.createRef()
    }, {
      id: "people",
      name: (0, _languageHandler._t)("Smileys & People"),
      enabled: true,
      visible: true,
      ref: _react.default.createRef()
    }, {
      id: "nature",
      name: (0, _languageHandler._t)("Animals & Nature"),
      enabled: true,
      visible: false,
      ref: _react.default.createRef()
    }, {
      id: "foods",
      name: (0, _languageHandler._t)("Food & Drink"),
      enabled: true,
      visible: false,
      ref: _react.default.createRef()
    }, {
      id: "activity",
      name: (0, _languageHandler._t)("Activities"),
      enabled: true,
      visible: false,
      ref: _react.default.createRef()
    }, {
      id: "places",
      name: (0, _languageHandler._t)("Travel & Places"),
      enabled: true,
      visible: false,
      ref: _react.default.createRef()
    }, {
      id: "objects",
      name: (0, _languageHandler._t)("Objects"),
      enabled: true,
      visible: false,
      ref: _react.default.createRef()
    }, {
      id: "symbols",
      name: (0, _languageHandler._t)("Symbols"),
      enabled: true,
      visible: false,
      ref: _react.default.createRef()
    }, {
      id: "flags",
      name: (0, _languageHandler._t)("Flags"),
      enabled: true,
      visible: false,
      ref: _react.default.createRef()
    }];
    this.bodyRef = _react.default.createRef();
    this.onChangeFilter = this.onChangeFilter.bind(this);
    this.onHoverEmoji = this.onHoverEmoji.bind(this);
    this.onHoverEmojiEnd = this.onHoverEmojiEnd.bind(this);
    this.onClickEmoji = this.onClickEmoji.bind(this);
    this.scrollToCategory = this.scrollToCategory.bind(this);
    this.updateVisibility = this.updateVisibility.bind(this);
  }

  updateVisibility() {
    const body = this.bodyRef.current;
    const rect = body.getBoundingClientRect();

    for (const cat of this.categories) {
      const elem = body.querySelector("[data-category-id=\"".concat(cat.id, "\"]"));

      if (!elem) {
        cat.visible = false;
        cat.ref.current.classList.remove("mx_EmojiPicker_anchor_visible");
        continue;
      }

      const elemRect = elem.getBoundingClientRect();
      const y = elemRect.y - rect.y;
      const yEnd = elemRect.y + elemRect.height - rect.y;
      cat.visible = y < rect.height && yEnd > 0; // We update this here instead of through React to avoid re-render on scroll.

      if (cat.visible) {
        cat.ref.current.classList.add("mx_EmojiPicker_anchor_visible");
      } else {
        cat.ref.current.classList.remove("mx_EmojiPicker_anchor_visible");
      }
    }
  }

  scrollToCategory(category) {
    this.bodyRef.current.querySelector("[data-category-id=\"".concat(category, "\"]")).scrollIntoView();
  }

  onChangeFilter(filter) {
    filter = filter.toLowerCase(); // filter is case insensitive stored lower-case

    for (const cat of this.categories) {
      let emojis; // If the new filter string includes the old filter string, we don't have to re-filter the whole dataset.

      if (filter.includes(this.state.filter)) {
        emojis = this.memoizedDataByCategory[cat.id];
      } else {
        emojis = cat.id === "recent" ? this.recentlyUsed : _emoji.DATA_BY_CATEGORY[cat.id];
      }

      emojis = emojis.filter(emoji => emoji.filterString.includes(filter));
      this.memoizedDataByCategory[cat.id] = emojis;
      cat.enabled = emojis.length > 0; // The setState below doesn't re-render the header and we already have the refs for updateVisibility, so...

      cat.ref.current.disabled = !cat.enabled;
    }

    this.setState({
      filter
    }); // Header underlines need to be updated, but updating requires knowing
    // where the categories are, so we wait for a tick.

    setTimeout(this.updateVisibility, 0);
  }

  onHoverEmoji(emoji) {
    this.setState({
      previewEmoji: emoji
    });
  }

  onHoverEmojiEnd(emoji) {
    this.setState({
      previewEmoji: null
    });
  }

  onClickEmoji(emoji) {
    if (this.props.onChoose(emoji.unicode) !== false) {
      recent.add(emoji.unicode);
    }
  }

  _categoryHeightForEmojiCount(count) {
    if (count === 0) {
      return 0;
    }

    return CATEGORY_HEADER_HEIGHT + Math.ceil(count / EMOJIS_PER_ROW) * EMOJI_HEIGHT;
  }

  render() {
    const Header = sdk.getComponent("emojipicker.Header");
    const Search = sdk.getComponent("emojipicker.Search");
    const Category = sdk.getComponent("emojipicker.Category");
    const Preview = sdk.getComponent("emojipicker.Preview");
    const QuickReactions = sdk.getComponent("emojipicker.QuickReactions");
    let heightBefore = 0;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EmojiPicker"
    }, /*#__PURE__*/_react.default.createElement(Header, {
      categories: this.categories,
      defaultCategory: "recent",
      onAnchorClick: this.scrollToCategory
    }), /*#__PURE__*/_react.default.createElement(Search, {
      query: this.state.filter,
      onChange: this.onChangeFilter
    }), /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, {
      className: "mx_EmojiPicker_body",
      wrappedRef: e => this.bodyRef.current = e,
      onScroll: this.onScroll
    }, this.categories.map(category => {
      const emojis = this.memoizedDataByCategory[category.id];

      const categoryElement = /*#__PURE__*/_react.default.createElement(Category, {
        key: category.id,
        id: category.id,
        name: category.name,
        heightBefore: heightBefore,
        viewportHeight: this.state.viewportHeight,
        scrollTop: this.state.scrollTop,
        emojis: emojis,
        onClick: this.onClickEmoji,
        onMouseEnter: this.onHoverEmoji,
        onMouseLeave: this.onHoverEmojiEnd,
        selectedEmojis: this.props.selectedEmojis
      });

      const height = this._categoryHeightForEmojiCount(emojis.length);

      heightBefore += height;
      return categoryElement;
    })), this.state.previewEmoji || !this.props.showQuickReactions ? /*#__PURE__*/_react.default.createElement(Preview, {
      emoji: this.state.previewEmoji
    }) : /*#__PURE__*/_react.default.createElement(QuickReactions, {
      onClick: this.onClickEmoji,
      selectedEmojis: this.props.selectedEmojis
    }));
  }

}

(0, _defineProperty2.default)(EmojiPicker, "propTypes", {
  onChoose: _propTypes.default.func.isRequired,
  selectedEmojis: _propTypes.default.instanceOf(Set),
  showQuickReactions: _propTypes.default.bool
});
var _default = EmojiPicker;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,