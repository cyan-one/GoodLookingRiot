"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _languageHandler = require("../../../languageHandler");

var _SettingsStore = _interopRequireWildcard(require("../../../settings/SettingsStore"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _LabelledToggleSwitch = _interopRequireDefault(require("../elements/LabelledToggleSwitch"));

var _WidgetUtils = _interopRequireDefault(require("../../../utils/WidgetUtils"));

/*
Copyright 2019 Travis Ralston

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class WidgetOpenIDPermissionsDialog extends _react.default.Component {
  constructor() {
    super();
    (0, _defineProperty2.default)(this, "_onAllow", () => {
      this._onPermissionSelection(true);
    });
    (0, _defineProperty2.default)(this, "_onDeny", () => {
      this._onPermissionSelection(false);
    });
    (0, _defineProperty2.default)(this, "_onRememberSelectionChange", newVal => {
      this.setState({
        rememberSelection: newVal
      });
    });
    this.state = {
      rememberSelection: false
    };
  }

  _onPermissionSelection(allowed) {
    if (this.state.rememberSelection) {
      console.log("Remembering ".concat(this.props.widgetId, " as allowed=").concat(allowed, " for OpenID"));

      const currentValues = _SettingsStore.default.getValue("widgetOpenIDPermissions");

      if (!currentValues.allow) currentValues.allow = [];
      if (!currentValues.deny) currentValues.deny = [];

      const securityKey = _WidgetUtils.default.getWidgetSecurityKey(this.props.widgetId, this.props.widgetUrl, this.props.isUserWidget);

      (allowed ? currentValues.allow : currentValues.deny).push(securityKey);

      _SettingsStore.default.setValue("widgetOpenIDPermissions", null, _SettingsStore.SettingLevel.DEVICE, currentValues);
    }

    this.props.onFinished(allowed);
  }

  render() {
    const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');
    const DialogButtons = sdk.getComponent('views.elements.DialogButtons');
    return /*#__PURE__*/_react.default.createElement(BaseDialog, {
      className: "mx_WidgetOpenIDPermissionsDialog",
      hasCancel: true,
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("A widget would like to verify your identity")
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_WidgetOpenIDPermissionsDialog_content"
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("A widget located at %(widgetUrl)s would like to verify your identity. " + "By allowing this, the widget will be able to verify your user ID, but not " + "perform actions as you.", {
      widgetUrl: this.props.widgetUrl
    })), /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
      value: this.state.rememberSelection,
      toggleInFront: true,
      onChange: this._onRememberSelectionChange,
      label: (0, _languageHandler._t)("Remember my selection for this widget")
    })), /*#__PURE__*/_react.default.createElement(DialogButtons, {
      primaryButton: (0, _languageHandler._t)("Allow"),
      onPrimaryButtonClick: this._onAllow,
      cancelButton: (0, _languageHandler._t)("Deny"),
      onCancel: this._onDeny
    }));
  }

}

exports.default = WidgetOpenIDPermissionsDialog;
(0, _defineProperty2.default)(WidgetOpenIDPermissionsDialog, "propTypes", {
  onFinished: _propTypes.default.func.isRequired,
  widgetUrl: _propTypes.default.string.isRequired,
  widgetId: _propTypes.default.string.isRequired,
  isUserWidget: _propTypes.default.bool.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,