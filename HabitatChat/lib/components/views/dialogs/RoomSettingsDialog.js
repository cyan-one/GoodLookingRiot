"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _TabbedView = _interopRequireWildcard(require("../../structures/TabbedView"));

var _languageHandler = require("../../../languageHandler");

var _AdvancedRoomSettingsTab = _interopRequireDefault(require("../settings/tabs/room/AdvancedRoomSettingsTab"));

var _RolesRoomSettingsTab = _interopRequireDefault(require("../settings/tabs/room/RolesRoomSettingsTab"));

var _GeneralRoomSettingsTab = _interopRequireDefault(require("../settings/tabs/room/GeneralRoomSettingsTab"));

var _SecurityRoomSettingsTab = _interopRequireDefault(require("../settings/tabs/room/SecurityRoomSettingsTab"));

var _NotificationSettingsTab = _interopRequireDefault(require("../settings/tabs/room/NotificationSettingsTab"));

var _BridgeSettingsTab = _interopRequireDefault(require("../settings/tabs/room/BridgeSettingsTab"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

/*
Copyright 2019 New Vector Ltd
Copyright 2019 Michael Telatynski <7t3chguy@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class RoomSettingsDialog extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "_onAction", payload => {
      // When room changes below us, close the room settings
      // whilst the modal is open this can only be triggered when someone hits Leave Room
      if (payload.action === 'view_next_room') {
        this.props.onFinished();
      }
    });
  }

  componentDidMount() {
    this._dispatcherRef = _dispatcher.default.register(this._onAction);
  }

  componentWillUnmount() {
    if (this._dispatcherRef) _dispatcher.default.unregister(this._dispatcherRef);
  }

  _getTabs() {
    const tabs = [];
    tabs.push(new _TabbedView.Tab((0, _languageHandler._td)("General"), "mx_RoomSettingsDialog_settingsIcon", /*#__PURE__*/_react.default.createElement(_GeneralRoomSettingsTab.default, {
      roomId: this.props.roomId
    })));
    tabs.push(new _TabbedView.Tab((0, _languageHandler._td)("Security & Privacy"), "mx_RoomSettingsDialog_securityIcon", /*#__PURE__*/_react.default.createElement(_SecurityRoomSettingsTab.default, {
      roomId: this.props.roomId
    })));
    tabs.push(new _TabbedView.Tab((0, _languageHandler._td)("Roles & Permissions"), "mx_RoomSettingsDialog_rolesIcon", /*#__PURE__*/_react.default.createElement(_RolesRoomSettingsTab.default, {
      roomId: this.props.roomId
    })));
    tabs.push(new _TabbedView.Tab((0, _languageHandler._td)("Notifications"), "mx_RoomSettingsDialog_notificationsIcon", /*#__PURE__*/_react.default.createElement(_NotificationSettingsTab.default, {
      roomId: this.props.roomId
    })));

    if (_SettingsStore.default.isFeatureEnabled("feature_bridge_state")) {
      tabs.push(new _TabbedView.Tab((0, _languageHandler._td)("Bridges"), "mx_RoomSettingsDialog_bridgesIcon", /*#__PURE__*/_react.default.createElement(_BridgeSettingsTab.default, {
        roomId: this.props.roomId
      })));
    }

    tabs.push(new _TabbedView.Tab((0, _languageHandler._td)("Advanced"), "mx_RoomSettingsDialog_warningIcon", /*#__PURE__*/_react.default.createElement(_AdvancedRoomSettingsTab.default, {
      roomId: this.props.roomId,
      closeSettingsFn: this.props.onFinished
    })));
    return tabs;
  }

  render() {
    const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');

    const roomName = _MatrixClientPeg.MatrixClientPeg.get().getRoom(this.props.roomId).name;

    return /*#__PURE__*/_react.default.createElement(BaseDialog, {
      className: "mx_RoomSettingsDialog",
      hasCancel: true,
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("Room Settings - %(roomName)s", {
        roomName
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "ms_SettingsDialog_content"
    }, /*#__PURE__*/_react.default.createElement(_TabbedView.default, {
      tabs: this._getTabs()
    })));
  }

}

exports.default = RoomSettingsDialog;
(0, _defineProperty2.default)(RoomSettingsDialog, "propTypes", {
  roomId: _propTypes.default.string.isRequired,
  onFinished: _propTypes.default.func.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,