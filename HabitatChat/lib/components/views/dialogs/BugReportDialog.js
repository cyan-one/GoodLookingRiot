"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _languageHandler = require("../../../languageHandler");

var _submitRageshake = _interopRequireDefault(require("../../../rageshake/submit-rageshake"));

/*
Copyright 2017 OpenMarket Ltd
Copyright 2018 New Vector Ltd
Copyright 2019 Michael Telatynski <7t3chguy@gmail.com>
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class BugReportDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      sendLogs: true,
      busy: false,
      err: null,
      issueUrl: "",
      text: "",
      progress: null
    };
    this._unmounted = false;
    this._onSubmit = this._onSubmit.bind(this);
    this._onCancel = this._onCancel.bind(this);
    this._onTextChange = this._onTextChange.bind(this);
    this._onIssueUrlChange = this._onIssueUrlChange.bind(this);
    this._onSendLogsChange = this._onSendLogsChange.bind(this);
    this._sendProgressCallback = this._sendProgressCallback.bind(this);
  }

  componentWillUnmount() {
    this._unmounted = true;
  }

  _onCancel(ev) {
    this.props.onFinished(false);
  }

  _onSubmit(ev) {
    if ((!this.state.text || !this.state.text.trim()) && (!this.state.issueUrl || !this.state.issueUrl.trim())) {
      this.setState({
        err: (0, _languageHandler._t)("Please tell us what went wrong or, better, create a GitHub issue that describes the problem.")
      });
      return;
    }

    const userText = (this.state.text.length > 0 ? this.state.text + '\n\n' : '') + 'Issue: ' + (this.state.issueUrl.length > 0 ? this.state.issueUrl : 'No issue link given');
    this.setState({
      busy: true,
      progress: null,
      err: null
    });

    this._sendProgressCallback((0, _languageHandler._t)("Preparing to send logs"));

    (0, _submitRageshake.default)(_SdkConfig.default.get().bug_report_endpoint_url, {
      userText,
      sendLogs: true,
      progressCallback: this._sendProgressCallback,
      label: this.props.label
    }).then(() => {
      if (!this._unmounted) {
        this.props.onFinished(false);
        const QuestionDialog = sdk.getComponent("dialogs.QuestionDialog"); // N.B. first param is passed to piwik and so doesn't want i18n

        _Modal.default.createTrackedDialog('Bug report sent', '', QuestionDialog, {
          title: (0, _languageHandler._t)('Logs sent'),
          description: (0, _languageHandler._t)('Thank you!'),
          hasCancelButton: false
        });
      }
    }, err => {
      if (!this._unmounted) {
        this.setState({
          busy: false,
          progress: null,
          err: (0, _languageHandler._t)("Failed to send logs: ") + "".concat(err.message)
        });
      }
    });
  }

  _onTextChange(ev) {
    this.setState({
      text: ev.target.value
    });
  }

  _onIssueUrlChange(ev) {
    this.setState({
      issueUrl: ev.target.value
    });
  }

  _onSendLogsChange(ev) {
    this.setState({
      sendLogs: ev.target.checked
    });
  }

  _sendProgressCallback(progress) {
    if (this._unmounted) {
      return;
    }

    this.setState({
      progress: progress
    });
  }

  render() {
    const Loader = sdk.getComponent("elements.Spinner");
    const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');
    const DialogButtons = sdk.getComponent('views.elements.DialogButtons');
    const Field = sdk.getComponent('elements.Field');
    let error = null;

    if (this.state.err) {
      error = /*#__PURE__*/_react.default.createElement("div", {
        className: "error"
      }, this.state.err);
    }

    let progress = null;

    if (this.state.busy) {
      progress = /*#__PURE__*/_react.default.createElement("div", {
        className: "progress"
      }, /*#__PURE__*/_react.default.createElement(Loader, null), this.state.progress, " ...");
    }

    let warning;

    if (window.Modernizr && Object.values(window.Modernizr).some(support => support === false)) {
      warning = /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement("b", null, (0, _languageHandler._t)("Reminder: Your browser is unsupported, so your experience may be unpredictable.")));
    }

    return /*#__PURE__*/_react.default.createElement(BaseDialog, {
      className: "mx_BugReportDialog",
      onFinished: this._onCancel,
      title: (0, _languageHandler._t)('Submit debug logs'),
      contentId: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content",
      id: "mx_Dialog_content"
    }, warning, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Debug logs contain application usage data including your " + "username, the IDs or aliases of the rooms or groups you " + "have visited and the usernames of other users. They do " + "not contain messages.")), /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement("b", null, (0, _languageHandler._t)("Before submitting logs, you must <a>create a GitHub issue</a> to describe your problem.", {}, {
      a: sub => /*#__PURE__*/_react.default.createElement("a", {
        target: "_blank",
        href: "https://github.com/vector-im/riot-web/issues/new"
      }, sub)
    }))), /*#__PURE__*/_react.default.createElement(Field, {
      type: "text",
      className: "mx_BugReportDialog_field_input",
      label: (0, _languageHandler._t)("GitHub issue"),
      onChange: this._onIssueUrlChange,
      value: this.state.issueUrl,
      placeholder: "https://github.com/vector-im/riot-web/issues/..."
    }), /*#__PURE__*/_react.default.createElement(Field, {
      className: "mx_BugReportDialog_field_input",
      element: "textarea",
      label: (0, _languageHandler._t)("Notes"),
      rows: 5,
      onChange: this._onTextChange,
      value: this.state.text,
      placeholder: (0, _languageHandler._t)("If there is additional context that would help in " + "analysing the issue, such as what you were doing at " + "the time, room IDs, user IDs, etc., " + "please include those things here.")
    }), progress, error), /*#__PURE__*/_react.default.createElement(DialogButtons, {
      primaryButton: (0, _languageHandler._t)("Send logs"),
      onPrimaryButtonClick: this._onSubmit,
      focus: true,
      onCancel: this._onCancel,
      disabled: this.state.busy
    }));
  }

}

exports.default = BugReportDialog;
BugReportDialog.propTypes = {
  onFinished: _propTypes.default.func.isRequired
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,