"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _languageHandler = require("../../../languageHandler");

var sdk = _interopRequireWildcard(require("../../../index"));

var _LabelledToggleSwitch = _interopRequireDefault(require("../elements/LabelledToggleSwitch"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _Modal = _interopRequireDefault(require("../../../Modal"));

/*
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class RoomUpgradeWarningDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "_onContinue", () => {
      this.props.onFinished({
        continue: true,
        invite: this.state.isPrivate && this.state.inviteUsersToNewRoom
      });
    });
    (0, _defineProperty2.default)(this, "_onCancel", () => {
      this.props.onFinished({
        continue: false,
        invite: false
      });
    });
    (0, _defineProperty2.default)(this, "_onInviteUsersToggle", newVal => {
      this.setState({
        inviteUsersToNewRoom: newVal
      });
    });
    (0, _defineProperty2.default)(this, "_openBugReportDialog", e => {
      e.preventDefault();
      e.stopPropagation();
      const BugReportDialog = sdk.getComponent("dialogs.BugReportDialog");

      _Modal.default.createTrackedDialog('Bug Report Dialog', '', BugReportDialog, {});
    });

    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(this.props.roomId);

    const joinRules = room ? room.currentState.getStateEvents("m.room.join_rules", "") : null;
    const isPrivate = joinRules ? joinRules.getContent()['join_rule'] !== 'public' : true;
    this.state = {
      currentVersion: room ? room.getVersion() : "1",
      isPrivate,
      inviteUsersToNewRoom: true
    };
  }

  render() {
    const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');
    const DialogButtons = sdk.getComponent('views.elements.DialogButtons');
    let inviteToggle = null;

    if (this.state.isPrivate) {
      inviteToggle = /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
        value: this.state.inviteUsersToNewRoom,
        onChange: this._onInviteUsersToggle,
        label: (0, _languageHandler._t)("Automatically invite users")
      });
    }

    const title = this.state.isPrivate ? (0, _languageHandler._t)("Upgrade private room") : (0, _languageHandler._t)("Upgrade public room");
    return /*#__PURE__*/_react.default.createElement(BaseDialog, {
      className: "mx_RoomUpgradeWarningDialog",
      hasCancel: true,
      fixedWidth: false,
      onFinished: this.props.onFinished,
      title: title
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Upgrading a room is an advanced action and is usually recommended when a room " + "is unstable due to bugs, missing features or security vulnerabilities.")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("This usually only affects how the room is processed on the server. If you're " + "having problems with your Riot, please <a>report a bug</a>.", {}, {
      "a": sub => {
        return /*#__PURE__*/_react.default.createElement("a", {
          href: "#",
          onClick: this._openBugReportDialog
        }, sub);
      }
    })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("You'll upgrade this room from <oldVersion /> to <newVersion />.", {}, {
      oldVersion: () => /*#__PURE__*/_react.default.createElement("code", null, this.state.currentVersion),
      newVersion: () => /*#__PURE__*/_react.default.createElement("code", null, this.props.targetVersion)
    })), inviteToggle), /*#__PURE__*/_react.default.createElement(DialogButtons, {
      primaryButton: (0, _languageHandler._t)("Upgrade"),
      onPrimaryButtonClick: this._onContinue,
      cancelButton: (0, _languageHandler._t)("Cancel"),
      onCancel: this._onCancel
    }));
  }

}

exports.default = RoomUpgradeWarningDialog;
(0, _defineProperty2.default)(RoomUpgradeWarningDialog, "propTypes", {
  onFinished: _propTypes.default.func.isRequired,
  roomId: _propTypes.default.string.isRequired,
  targetVersion: _propTypes.default.string.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,