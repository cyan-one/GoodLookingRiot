"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = KeySignatureUploadFailedDialog;

var _react = _interopRequireWildcard(require("react"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function KeySignatureUploadFailedDialog({
  failures,
  source,
  continuation,
  onFinished
}) {
  const RETRIES = 2;
  const BaseDialog = sdk.getComponent('dialogs.BaseDialog');
  const DialogButtons = sdk.getComponent('views.elements.DialogButtons');
  const Spinner = sdk.getComponent('elements.Spinner');
  const [retry, setRetry] = (0, _react.useState)(RETRIES);
  const [cancelled, setCancelled] = (0, _react.useState)(false);
  const [retrying, setRetrying] = (0, _react.useState)(false);
  const [success, setSuccess] = (0, _react.useState)(false);
  const onCancel = (0, _react.useRef)(onFinished);
  const causes = new Map([["_afterCrossSigningLocalKeyChange", (0, _languageHandler._t)("a new master key signature")], ["checkOwnCrossSigningTrust", (0, _languageHandler._t)("a new cross-signing key signature")], ["setDeviceVerification", (0, _languageHandler._t)("a device cross-signing signature")]]);
  const defaultCause = (0, _languageHandler._t)("a key signature");
  const onRetry = (0, _react.useCallback)(async () => {
    try {
      setRetrying(true);
      const cancel = new Promise((resolve, reject) => {
        onCancel.current = reject;
      }).finally(() => {
        setCancelled(true);
      });
      await Promise.race([continuation(), cancel]);
      setSuccess(true);
    } catch (e) {
      setRetry(r => r - 1);
    } finally {
      onCancel.current = onFinished;
      setRetrying(false);
    }
  }, [continuation, onFinished]);
  let body;

  if (!success && !cancelled && continuation && retry > 0) {
    const reason = causes.get(source) || defaultCause;
    body = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Riot encountered an error during upload of:")), /*#__PURE__*/_react.default.createElement("p", null, reason), retrying && /*#__PURE__*/_react.default.createElement(Spinner, null), /*#__PURE__*/_react.default.createElement("pre", null, JSON.stringify(failures, null, 2)), /*#__PURE__*/_react.default.createElement(DialogButtons, {
      primaryButton: "Retry",
      hasCancel: true,
      onPrimaryButtonClick: onRetry,
      onCancel: onCancel.current,
      primaryDisabled: retrying
    }));
  } else {
    body = /*#__PURE__*/_react.default.createElement("div", null, success ? /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Upload completed")) : cancelled ? /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Cancelled signature upload")) : /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Unable to upload")), /*#__PURE__*/_react.default.createElement(DialogButtons, {
      primaryButton: (0, _languageHandler._t)("OK"),
      hasCancel: false,
      onPrimaryButtonClick: onFinished
    }));
  }

  return /*#__PURE__*/_react.default.createElement(BaseDialog, {
    title: success ? (0, _languageHandler._t)("Signature upload success") : (0, _languageHandler._t)("Signature upload failed"),
    fixedWidth: false,
    onFinished: () => {}
  }, body);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,