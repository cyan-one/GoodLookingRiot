"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

var _Modal = _interopRequireDefault(require("../../../Modal"));

/*
Copyright 2017 Vector Creations Ltd
Copyright 2018 New Vector Ltd
Copyright 2019 Michael Telatynski <7t3chguy@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const WarmFuzzy = function (props) {
  const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');
  let title = (0, _languageHandler._t)('You have successfully set a password!');

  if (props.didSetEmail) {
    title = (0, _languageHandler._t)('You have successfully set a password and an email address!');
  }

  const advice = (0, _languageHandler._t)('You can now return to your account after signing out, and sign in on other devices.');
  let extraAdvice = null;

  if (!props.didSetEmail) {
    extraAdvice = (0, _languageHandler._t)('Remember, you can always set an email address in user settings if you change your mind.');
  }

  return /*#__PURE__*/_react.default.createElement(BaseDialog, {
    className: "mx_SetPasswordDialog",
    onFinished: props.onFinished,
    title: title
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_Dialog_content"
  }, /*#__PURE__*/_react.default.createElement("p", null, advice), /*#__PURE__*/_react.default.createElement("p", null, extraAdvice)), /*#__PURE__*/_react.default.createElement("div", {
    className: "mx_Dialog_buttons"
  }, /*#__PURE__*/_react.default.createElement("button", {
    className: "mx_Dialog_primary",
    autoFocus: true,
    onClick: props.onFinished
  }, (0, _languageHandler._t)('Continue'))));
};
/**
 * Prompt the user to set a password
 *
 * On success, `onFinished()` when finished
 */


var _default = (0, _createReactClass.default)({
  displayName: 'SetPasswordDialog',
  propTypes: {
    onFinished: _propTypes.default.func.isRequired
  },
  getInitialState: function () {
    return {
      error: null
    };
  },
  componentDidMount: function () {
    console.info('SetPasswordDialog component did mount');
  },
  _onPasswordChanged: function (res) {
    _Modal.default.createDialog(WarmFuzzy, {
      didSetEmail: res.didSetEmail,
      onFinished: () => {
        this.props.onFinished();
      }
    });
  },
  _onPasswordChangeError: function (err) {
    let errMsg = err.error || "";

    if (err.httpStatus === 403) {
      errMsg = (0, _languageHandler._t)('Failed to change password. Is your password correct?');
    } else if (err.httpStatus) {
      errMsg += ' ' + (0, _languageHandler._t)('(HTTP status %(httpStatus)s)', {
        httpStatus: err.httpStatus
      });
    }

    this.setState({
      error: errMsg
    });
  },
  render: function () {
    const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');
    const ChangePassword = sdk.getComponent('views.settings.ChangePassword');
    return /*#__PURE__*/_react.default.createElement(BaseDialog, {
      className: "mx_SetPasswordDialog",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)('Please set a password!')
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)('This will allow you to return to your account after signing out, and sign in on other sessions.')), /*#__PURE__*/_react.default.createElement(ChangePassword, {
      className: "mx_SetPasswordDialog_change_password",
      rowClassName: "",
      buttonClassNames: "mx_Dialog_primary mx_SetPasswordDialog_change_password_button",
      buttonKind: "primary",
      confirm: false,
      autoFocusNewPasswordInput: true,
      shouldAskForEmail: true,
      onError: this._onPasswordChangeError,
      onFinished: this._onPasswordChanged
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "error"
    }, this.state.error)));
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,