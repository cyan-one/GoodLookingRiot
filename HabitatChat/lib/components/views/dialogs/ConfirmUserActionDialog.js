"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _matrixJsSdk = require("matrix-js-sdk");

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

var _groups = require("../../../groups");

/*
Copyright 2017 Vector Creations Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/*
 * A dialog for confirming an operation on another user.
 * Takes a user ID and a verb, displays the target user prominently
 * such that it should be easy to confirm that the operation is being
 * performed on the right person, and displays the operation prominently
 * to make it obvious what is going to happen.
 * Also tweaks the style for 'dangerous' actions (albeit only with colour)
 */
var _default = (0, _createReactClass.default)({
  displayName: 'ConfirmUserActionDialog',
  propTypes: {
    // matrix-js-sdk (room) member object. Supply either this or 'groupMember'
    member: _propTypes.default.object,
    // group member object. Supply either this or 'member'
    groupMember: _groups.GroupMemberType,
    // needed if a group member is specified
    matrixClient: _propTypes.default.instanceOf(_matrixJsSdk.MatrixClient),
    action: _propTypes.default.string.isRequired,
    // eg. 'Ban'
    title: _propTypes.default.string.isRequired,
    // eg. 'Ban this user?'
    // Whether to display a text field for a reason
    // If true, the second argument to onFinished will
    // be the string entered.
    askReason: _propTypes.default.bool,
    danger: _propTypes.default.bool,
    onFinished: _propTypes.default.func.isRequired
  },
  getDefaultProps: () => ({
    danger: false,
    askReason: false
  }),
  // TODO: [REACT-WARNING] Move this to constructor
  UNSAFE_componentWillMount: function () {
    this._reasonField = null;
  },
  onOk: function () {
    let reason;

    if (this._reasonField) {
      reason = this._reasonField.value;
    }

    this.props.onFinished(true, reason);
  },
  onCancel: function () {
    this.props.onFinished(false);
  },
  _collectReasonField: function (e) {
    this._reasonField = e;
  },
  render: function () {
    const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');
    const DialogButtons = sdk.getComponent('views.elements.DialogButtons');
    const MemberAvatar = sdk.getComponent("views.avatars.MemberAvatar");
    const BaseAvatar = sdk.getComponent("views.avatars.BaseAvatar");
    const confirmButtonClass = this.props.danger ? 'danger' : '';
    let reasonBox;

    if (this.props.askReason) {
      reasonBox = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("form", {
        onSubmit: this.onOk
      }, /*#__PURE__*/_react.default.createElement("input", {
        className: "mx_ConfirmUserActionDialog_reasonField",
        ref: this._collectReasonField,
        placeholder: (0, _languageHandler._t)("Reason"),
        autoFocus: true
      })));
    }

    let avatar;
    let name;
    let userId;

    if (this.props.member) {
      avatar = /*#__PURE__*/_react.default.createElement(MemberAvatar, {
        member: this.props.member,
        width: 48,
        height: 48
      });
      name = this.props.member.name;
      userId = this.props.member.userId;
    } else {
      const httpAvatarUrl = this.props.groupMember.avatarUrl ? this.props.matrixClient.mxcUrlToHttp(this.props.groupMember.avatarUrl, 48, 48) : null;
      name = this.props.groupMember.displayname || this.props.groupMember.userId;
      userId = this.props.groupMember.userId;
      avatar = /*#__PURE__*/_react.default.createElement(BaseAvatar, {
        name: name,
        url: httpAvatarUrl,
        width: 48,
        height: 48
      });
    }

    return /*#__PURE__*/_react.default.createElement(BaseDialog, {
      className: "mx_ConfirmUserActionDialog",
      onFinished: this.props.onFinished,
      title: this.props.title,
      contentId: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      id: "mx_Dialog_content",
      className: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ConfirmUserActionDialog_avatar"
    }, avatar), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ConfirmUserActionDialog_name"
    }, name), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ConfirmUserActionDialog_userId"
    }, userId)), reasonBox, /*#__PURE__*/_react.default.createElement(DialogButtons, {
      primaryButton: this.props.action,
      onPrimaryButtonClick: this.onOk,
      primaryButtonClass: confirmButtonClass,
      focus: !this.props.askReason,
      onCancel: this.onCancel
    }));
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,