"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _classnames = _interopRequireDefault(require("classnames"));

var _Keyboard = require("../../../Keyboard");

var _languageHandler = require("../../../languageHandler");

var _Registration = require("../../../Registration");

/*
Copyright 2016 OpenMarket Ltd
Copyright 2017 Vector Creations Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// The amount of time to wait for further changes to the input username before
// sending a request to the server
const USERNAME_CHECK_DEBOUNCE_MS = 250;
/**
 * Prompt the user to set a display name.
 *
 * On success, `onFinished(true, newDisplayName)` is called.
 */

var _default = (0, _createReactClass.default)({
  displayName: 'SetMxIdDialog',
  propTypes: {
    onFinished: _propTypes.default.func.isRequired,
    // Called when the user requests to register with a different homeserver
    onDifferentServerClicked: _propTypes.default.func.isRequired,
    // Called if the user wants to switch to login instead
    onLoginClick: _propTypes.default.func.isRequired
  },
  getInitialState: function () {
    return {
      // The entered username
      username: '',
      // Indicate ongoing work on the username
      usernameBusy: false,
      // Indicate error with username
      usernameError: '',
      // Assume the homeserver supports username checking until "M_UNRECOGNIZED"
      usernameCheckSupport: true,
      // Whether the auth UI is currently being used
      doingUIAuth: false,
      // Indicate error with auth
      authError: ''
    };
  },
  // TODO: [REACT-WARNING] Replace component with real class, use constructor for refs
  UNSAFE_componentWillMount: function () {
    this._input_value = (0, _react.createRef)();
    this._uiAuth = (0, _react.createRef)();
  },
  componentDidMount: function () {
    this._input_value.current.select();

    this._matrixClient = _MatrixClientPeg.MatrixClientPeg.get();
  },
  onValueChange: function (ev) {
    this.setState({
      username: ev.target.value,
      usernameBusy: true,
      usernameError: ''
    }, () => {
      if (!this.state.username || !this.state.usernameCheckSupport) {
        this.setState({
          usernameBusy: false
        });
        return;
      } // Debounce the username check to limit number of requests sent


      if (this._usernameCheckTimeout) {
        clearTimeout(this._usernameCheckTimeout);
      }

      this._usernameCheckTimeout = setTimeout(() => {
        this._doUsernameCheck().finally(() => {
          this.setState({
            usernameBusy: false
          });
        });
      }, USERNAME_CHECK_DEBOUNCE_MS);
    });
  },
  onKeyUp: function (ev) {
    if (ev.key === _Keyboard.Key.ENTER) {
      this.onSubmit();
    }
  },
  onSubmit: function (ev) {
    if (this._uiAuth.current) {
      this._uiAuth.current.tryContinue();
    }

    this.setState({
      doingUIAuth: true
    });
  },
  _doUsernameCheck: function () {
    // We do a quick check ahead of the username availability API to ensure the
    // user ID roughly looks okay from a Matrix perspective.
    if (!_Registration.SAFE_LOCALPART_REGEX.test(this.state.username)) {
      this.setState({
        usernameError: (0, _languageHandler._t)("A username can only contain lower case letters, numbers and '=_-./'")
      });
      return Promise.reject();
    } // Check if username is available


    return this._matrixClient.isUsernameAvailable(this.state.username).then(isAvailable => {
      if (isAvailable) {
        this.setState({
          usernameError: ''
        });
      }
    }, err => {
      // Indicate whether the homeserver supports username checking
      const newState = {
        usernameCheckSupport: err.errcode !== "M_UNRECOGNIZED"
      };
      console.error('Error whilst checking username availability: ', err);

      switch (err.errcode) {
        case "M_USER_IN_USE":
          newState.usernameError = (0, _languageHandler._t)('Username not available');
          break;

        case "M_INVALID_USERNAME":
          newState.usernameError = (0, _languageHandler._t)('Username invalid: %(errMessage)s', {
            errMessage: err.message
          });
          break;

        case "M_UNRECOGNIZED":
          // This homeserver doesn't support username checking, assume it's
          // fine and rely on the error appearing in registration step.
          newState.usernameError = '';
          break;

        case undefined:
          newState.usernameError = (0, _languageHandler._t)('Something went wrong!');
          break;

        default:
          newState.usernameError = (0, _languageHandler._t)('An error occurred: %(error_string)s', {
            error_string: err.message
          });
          break;
      }

      this.setState(newState);
    });
  },
  _generatePassword: function () {
    return Math.random().toString(36).slice(2);
  },
  _makeRegisterRequest: function (auth) {
    // Not upgrading - changing mxids
    const guestAccessToken = null;

    if (!this._generatedPassword) {
      this._generatedPassword = this._generatePassword();
    }

    return this._matrixClient.register(this.state.username, this._generatedPassword, undefined, // session id: included in the auth dict already
    auth, {}, guestAccessToken);
  },
  _onUIAuthFinished: function (success, response) {
    this.setState({
      doingUIAuth: false
    });

    if (!success) {
      this.setState({
        authError: response.message
      });
      return;
    }

    this.props.onFinished(true, {
      userId: response.user_id,
      deviceId: response.device_id,
      homeserverUrl: this._matrixClient.getHomeserverUrl(),
      identityServerUrl: this._matrixClient.getIdentityServerUrl(),
      accessToken: response.access_token,
      password: this._generatedPassword
    });
  },
  render: function () {
    const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');
    const InteractiveAuth = sdk.getComponent('structures.InteractiveAuth');
    let auth;

    if (this.state.doingUIAuth) {
      auth = /*#__PURE__*/_react.default.createElement(InteractiveAuth, {
        matrixClient: this._matrixClient,
        makeRequest: this._makeRegisterRequest,
        onAuthFinished: this._onUIAuthFinished,
        inputs: {},
        poll: true,
        ref: this._uiAuth,
        continueIsManaged: true
      });
    }

    const inputClasses = (0, _classnames.default)({
      "mx_SetMxIdDialog_input": true,
      "error": Boolean(this.state.usernameError)
    });
    let usernameIndicator = null;

    if (this.state.usernameBusy) {
      usernameIndicator = /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Checking..."));
    } else {
      const usernameAvailable = this.state.username && this.state.usernameCheckSupport && !this.state.usernameError;
      const usernameIndicatorClasses = (0, _classnames.default)({
        "error": Boolean(this.state.usernameError),
        "success": usernameAvailable
      });
      usernameIndicator = /*#__PURE__*/_react.default.createElement("div", {
        className: usernameIndicatorClasses,
        role: "alert"
      }, usernameAvailable ? (0, _languageHandler._t)('Username available') : this.state.usernameError);
    }

    let authErrorIndicator = null;

    if (this.state.authError) {
      authErrorIndicator = /*#__PURE__*/_react.default.createElement("div", {
        className: "error",
        role: "alert"
      }, this.state.authError);
    }

    const canContinue = this.state.username && !this.state.usernameError && !this.state.usernameBusy;
    return /*#__PURE__*/_react.default.createElement(BaseDialog, {
      className: "mx_SetMxIdDialog",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)('To get started, please pick a username!'),
      contentId: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content",
      id: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SetMxIdDialog_input_group"
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "text",
      ref: this._input_value,
      value: this.state.username,
      autoFocus: true,
      onChange: this.onValueChange,
      onKeyUp: this.onKeyUp,
      size: "30",
      className: inputClasses
    })), usernameIndicator, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)('This will be your account name on the <span></span> ' + 'homeserver, or you can pick a <a>different server</a>.', {}, {
      'span': /*#__PURE__*/_react.default.createElement("span", null, this.props.homeserverUrl),
      'a': sub => /*#__PURE__*/_react.default.createElement("a", {
        href: "#",
        onClick: this.props.onDifferentServerClicked
      }, sub)
    })), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)('If you already have a Matrix account you can <a>log in</a> instead.', {}, {
      'a': sub => /*#__PURE__*/_react.default.createElement("a", {
        href: "#",
        onClick: this.props.onLoginClick
      }, sub)
    })), auth, authErrorIndicator), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_buttons"
    }, /*#__PURE__*/_react.default.createElement("input", {
      className: "mx_Dialog_primary",
      type: "submit",
      value: (0, _languageHandler._t)("Continue"),
      onClick: this.onSubmit,
      disabled: !canContinue
    })));
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,