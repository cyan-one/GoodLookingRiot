"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _cryptodevices = require("../../../cryptodevices");

/*
Copyright 2017 Vector Creations Ltd
Copyright 2017 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function UserUnknownDeviceList(props) {
  const MemberDeviceInfo = sdk.getComponent('rooms.MemberDeviceInfo');
  const {
    userId,
    userDevices
  } = props;
  const deviceListEntries = Object.keys(userDevices).map(deviceId => /*#__PURE__*/_react.default.createElement("li", {
    key: deviceId
  }, /*#__PURE__*/_react.default.createElement(MemberDeviceInfo, {
    device: userDevices[deviceId],
    userId: userId,
    showDeviceId: true
  })));
  return /*#__PURE__*/_react.default.createElement("ul", {
    className: "mx_UnknownDeviceDialog_deviceList"
  }, deviceListEntries);
}

UserUnknownDeviceList.propTypes = {
  userId: _propTypes.default.string.isRequired,
  // map from deviceid -> deviceinfo
  userDevices: _propTypes.default.object.isRequired
};

function UnknownDeviceList(props) {
  const {
    devices
  } = props;
  const userListEntries = Object.keys(devices).map(userId => /*#__PURE__*/_react.default.createElement("li", {
    key: userId
  }, /*#__PURE__*/_react.default.createElement("p", null, userId, ":"), /*#__PURE__*/_react.default.createElement(UserUnknownDeviceList, {
    userId: userId,
    userDevices: devices[userId]
  })));
  return /*#__PURE__*/_react.default.createElement("ul", null, userListEntries);
}

UnknownDeviceList.propTypes = {
  // map from userid -> deviceid -> deviceinfo
  devices: _propTypes.default.object.isRequired
};

var _default = (0, _createReactClass.default)({
  displayName: 'UnknownDeviceDialog',
  propTypes: {
    room: _propTypes.default.object.isRequired,
    // map from userid -> deviceid -> deviceinfo or null if devices are not yet loaded
    devices: _propTypes.default.object,
    onFinished: _propTypes.default.func.isRequired,
    // Label for the button that marks all devices known and tries the send again
    sendAnywayLabel: _propTypes.default.string.isRequired,
    // Label for the button that to send the event if you've verified all devices
    sendLabel: _propTypes.default.string.isRequired,
    // function to retry the request once all devices are verified / known
    onSend: _propTypes.default.func.isRequired
  },
  componentDidMount: function () {
    _MatrixClientPeg.MatrixClientPeg.get().on("deviceVerificationChanged", this._onDeviceVerificationChanged);
  },
  componentWillUnmount: function () {
    if (_MatrixClientPeg.MatrixClientPeg.get()) {
      _MatrixClientPeg.MatrixClientPeg.get().removeListener("deviceVerificationChanged", this._onDeviceVerificationChanged);
    }
  },
  _onDeviceVerificationChanged: function (userId, deviceId, deviceInfo) {
    if (this.props.devices[userId] && this.props.devices[userId][deviceId]) {
      // XXX: Mutating props :/
      this.props.devices[userId][deviceId] = deviceInfo;
      this.forceUpdate();
    }
  },
  _onDismissClicked: function () {
    this.props.onFinished();
  },
  _onSendAnywayClicked: function () {
    (0, _cryptodevices.markAllDevicesKnown)(_MatrixClientPeg.MatrixClientPeg.get(), this.props.devices);
    this.props.onFinished();
    this.props.onSend();
  },
  _onSendClicked: function () {
    this.props.onFinished();
    this.props.onSend();
  },
  render: function () {
    if (this.props.devices === null) {
      const Spinner = sdk.getComponent("elements.Spinner");
      return /*#__PURE__*/_react.default.createElement(Spinner, null);
    }

    let warning;

    if (_SettingsStore.default.getValue("blacklistUnverifiedDevices", this.props.room.roomId)) {
      warning = /*#__PURE__*/_react.default.createElement("h4", null, (0, _languageHandler._t)("You are currently blacklisting unverified sessions; to send " + "messages to these sessions you must verify them."));
    } else {
      warning = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("We recommend you go through the verification process " + "for each session to confirm they belong to their legitimate owner, " + "but you can resend the message without verifying if you prefer.")));
    }

    let haveUnknownDevices = false;
    Object.keys(this.props.devices).forEach(userId => {
      Object.keys(this.props.devices[userId]).map(deviceId => {
        const device = this.props.devices[userId][deviceId];

        if (device.isUnverified() && !device.isKnown()) {
          haveUnknownDevices = true;
        }
      });
    });
    const sendButtonOnClick = haveUnknownDevices ? this._onSendAnywayClicked : this._onSendClicked;
    const sendButtonLabel = haveUnknownDevices ? this.props.sendAnywayLabel : this.props.sendAnywayLabel;
    const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');
    const DialogButtons = sdk.getComponent('views.elements.DialogButtons');
    return /*#__PURE__*/_react.default.createElement(BaseDialog, {
      className: "mx_UnknownDeviceDialog",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)('Room contains unknown sessions'),
      contentId: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content",
      id: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("h4", null, (0, _languageHandler._t)('"%(RoomName)s" contains sessions that you haven\'t seen before.', {
      RoomName: this.props.room.name
    })), warning, (0, _languageHandler._t)("Unknown sessions"), ":", /*#__PURE__*/_react.default.createElement(UnknownDeviceList, {
      devices: this.props.devices
    })), /*#__PURE__*/_react.default.createElement(DialogButtons, {
      primaryButton: sendButtonLabel,
      onPrimaryButtonClick: sendButtonOnClick,
      onCancel: this._onDismissClicked
    })); // XXX: do we want to give the user the option to enable blacklistUnverifiedDevices for this room (or globally) at this point?
    // It feels like confused users will likely turn it on and then disappear in a cloud of UISIs...
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,