"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _languageHandler = require("../../../languageHandler");

/*
Copyright 2018 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var _default = (0, _createReactClass.default)({
  displayName: 'RoomUpgradeDialog',
  propTypes: {
    room: _propTypes.default.object.isRequired,
    onFinished: _propTypes.default.func.isRequired
  },
  componentDidMount: async function () {
    const recommended = await this.props.room.getRecommendedVersion();
    this._targetVersion = recommended.version;
    this.setState({
      busy: false
    });
  },
  getInitialState: function () {
    return {
      busy: true
    };
  },
  _onCancelClick: function () {
    this.props.onFinished(false);
  },
  _onUpgradeClick: function () {
    this.setState({
      busy: true
    });

    _MatrixClientPeg.MatrixClientPeg.get().upgradeRoom(this.props.room.roomId, this._targetVersion).then(() => {
      this.props.onFinished(true);
    }).catch(err => {
      const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

      _Modal.default.createTrackedDialog('Failed to upgrade room', '', ErrorDialog, {
        title: (0, _languageHandler._t)("Failed to upgrade room"),
        description: err && err.message ? err.message : (0, _languageHandler._t)("The room upgrade could not be completed")
      });
    }).finally(() => {
      this.setState({
        busy: false
      });
    });
  },
  render: function () {
    const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');
    const DialogButtons = sdk.getComponent('views.elements.DialogButtons');
    const Spinner = sdk.getComponent('views.elements.Spinner');
    let buttons;

    if (this.state.busy) {
      buttons = /*#__PURE__*/_react.default.createElement(Spinner, null);
    } else {
      buttons = /*#__PURE__*/_react.default.createElement(DialogButtons, {
        primaryButton: (0, _languageHandler._t)('Upgrade this room to version %(version)s', {
          version: this._targetVersion
        }),
        primaryButtonClass: "danger",
        hasCancel: true,
        onPrimaryButtonClick: this._onUpgradeClick,
        focus: this.props.focus,
        onCancel: this._onCancelClick
      });
    }

    return /*#__PURE__*/_react.default.createElement(BaseDialog, {
      className: "mx_RoomUpgradeDialog",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("Upgrade Room Version"),
      contentId: "mx_Dialog_content",
      hasCancel: true
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Upgrading this room requires closing down the current " + "instance of the room and creating a new room in its place. " + "To give room members the best possible experience, we will:")), /*#__PURE__*/_react.default.createElement("ol", null, /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Create a new room with the same name, description and avatar")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Update any local room aliases to point to the new room")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Stop users from speaking in the old version of the room, and post a message advising users to move to the new room")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Put a link back to the old room at the start of the new room so people can see old messages"))), buttons);
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,