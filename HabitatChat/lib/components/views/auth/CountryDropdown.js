"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _phonenumber = require("../../../phonenumber");

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _languageHandler = require("../../../languageHandler");

/*
Copyright 2017 Vector Creations Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const COUNTRIES_BY_ISO2 = {};

for (const c of _phonenumber.COUNTRIES) {
  COUNTRIES_BY_ISO2[c.iso2] = c;
}

function countryMatchesSearchQuery(query, country) {
  // Remove '+' if present (when searching for a prefix)
  if (query[0] === '+') {
    query = query.slice(1);
  }

  if (country.name.toUpperCase().indexOf(query.toUpperCase()) == 0) return true;
  if (country.iso2 == query.toUpperCase()) return true;
  if (country.prefix.indexOf(query) !== -1) return true;
  return false;
}

class CountryDropdown extends _react.default.Component {
  constructor(props) {
    super(props);
    this._onSearchChange = this._onSearchChange.bind(this);
    this._onOptionChange = this._onOptionChange.bind(this);
    this._getShortOption = this._getShortOption.bind(this);
    let defaultCountry = _phonenumber.COUNTRIES[0];

    const defaultCountryCode = _SdkConfig.default.get()["defaultCountryCode"];

    if (defaultCountryCode) {
      const country = _phonenumber.COUNTRIES.find(c => c.iso2 === defaultCountryCode.toUpperCase());

      if (country) defaultCountry = country;
    }

    this.state = {
      searchQuery: '',
      defaultCountry
    };
  }

  componentDidMount() {
    if (!this.props.value) {
      // If no value is given, we start with the default
      // country selected, but our parent component
      // doesn't know this, therefore we do this.
      this.props.onOptionChange(this.state.defaultCountry);
    }
  }

  _onSearchChange(search) {
    this.setState({
      searchQuery: search
    });
  }

  _onOptionChange(iso2) {
    this.props.onOptionChange(COUNTRIES_BY_ISO2[iso2]);
  }

  _flagImgForIso2(iso2) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dropdown_option_emoji"
    }, (0, _phonenumber.getEmojiFlag)(iso2));
  }

  _getShortOption(iso2) {
    if (!this.props.isSmall) {
      return undefined;
    }

    let countryPrefix;

    if (this.props.showPrefix) {
      countryPrefix = '+' + COUNTRIES_BY_ISO2[iso2].prefix;
    }

    return /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_CountryDropdown_shortOption"
    }, this._flagImgForIso2(iso2), countryPrefix);
  }

  render() {
    const Dropdown = sdk.getComponent('elements.Dropdown');
    let displayedCountries;

    if (this.state.searchQuery) {
      displayedCountries = _phonenumber.COUNTRIES.filter(countryMatchesSearchQuery.bind(this, this.state.searchQuery));

      if (this.state.searchQuery.length == 2 && COUNTRIES_BY_ISO2[this.state.searchQuery.toUpperCase()]) {
        // exact ISO2 country name match: make the first result the matches ISO2
        const matched = COUNTRIES_BY_ISO2[this.state.searchQuery.toUpperCase()];
        displayedCountries = displayedCountries.filter(c => {
          return c.iso2 != matched.iso2;
        });
        displayedCountries.unshift(matched);
      }
    } else {
      displayedCountries = _phonenumber.COUNTRIES;
    }

    const options = displayedCountries.map(country => {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CountryDropdown_option",
        key: country.iso2
      }, this._flagImgForIso2(country.iso2), country.name, " (+", country.prefix, ")");
    }); // default value here too, otherwise we need to handle null / undefined
    // values between mounting and the initial value propgating

    const value = this.props.value || this.state.defaultCountry.iso2;
    return /*#__PURE__*/_react.default.createElement(Dropdown, {
      id: "mx_CountryDropdown",
      className: this.props.className + " mx_CountryDropdown",
      onOptionChange: this._onOptionChange,
      onSearchChange: this._onSearchChange,
      menuWidth: 298,
      getShortOption: this._getShortOption,
      value: value,
      searchEnabled: true,
      disabled: this.props.disabled,
      label: (0, _languageHandler._t)("Country Dropdown")
    }, options);
  }

}

exports.default = CountryDropdown;
CountryDropdown.propTypes = {
  className: _propTypes.default.string,
  isSmall: _propTypes.default.bool,
  // if isSmall, show +44 in the selected value
  showPrefix: _propTypes.default.bool,
  onOptionChange: _propTypes.default.func.isRequired,
  value: _propTypes.default.string,
  disabled: _propTypes.default.bool
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,