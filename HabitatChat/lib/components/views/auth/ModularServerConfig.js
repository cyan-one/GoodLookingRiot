"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

var _AutoDiscoveryUtils = _interopRequireWildcard(require("../../../utils/AutoDiscoveryUtils"));

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var ServerType = _interopRequireWildcard(require("../../views/auth/ServerTypeSelector"));

var _ServerConfig = _interopRequireDefault(require("./ServerConfig"));

/*
Copyright 2019 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const MODULAR_URL = 'https://modular.im/?utm_source=riot-web&utm_medium=web&utm_campaign=riot-web-authentication'; // TODO: TravisR - Can this extend ServerConfig for most things?

/*
 * Configure the Modular server name.
 *
 * This is a variant of ServerConfig with only the HS field and different body
 * text that is specific to the Modular case.
 */

class ModularServerConfig extends _ServerConfig.default {
  async validateAndApplyServer(hsUrl, isUrl) {
    // Always try and use the defaults first
    const defaultConfig
    /*: ValidatedServerConfig*/
    = _SdkConfig.default.get()["validated_server_config"];

    if (defaultConfig.hsUrl === hsUrl && defaultConfig.isUrl === isUrl) {
      this.setState({
        busy: false,
        errorText: ""
      });
      this.props.onServerConfigChange(defaultConfig);
      return defaultConfig;
    }

    this.setState({
      hsUrl,
      isUrl,
      busy: true,
      errorText: ""
    });

    try {
      const result = await _AutoDiscoveryUtils.default.validateServerConfigWithStaticUrls(hsUrl, isUrl);
      this.setState({
        busy: false,
        errorText: ""
      });
      this.props.onServerConfigChange(result);
      return result;
    } catch (e) {
      console.error(e);
      let message = (0, _languageHandler._t)("Unable to validate homeserver/identity server");

      if (e.translatedMessage) {
        message = e.translatedMessage;
      }

      this.setState({
        busy: false,
        errorText: message
      });
      return null;
    }
  }

  async validateServer() {
    // TODO: Do we want to support .well-known lookups here?
    // If for some reason someone enters "matrix.org" for a URL, we could do a lookup to
    // find their homeserver without demanding they use "https://matrix.org"
    return this.validateAndApplyServer(this.state.hsUrl, ServerType.TYPES.PREMIUM.identityServerUrl);
  }

  render() {
    const Field = sdk.getComponent('elements.Field');
    const AccessibleButton = sdk.getComponent('elements.AccessibleButton');
    const submitButton = this.props.submitText ? /*#__PURE__*/_react.default.createElement(AccessibleButton, {
      element: "button",
      type: "submit",
      className: this.props.submitClass,
      onClick: this.onSubmit,
      disabled: this.state.busy
    }, this.props.submitText) : null;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ServerConfig"
    }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Your Modular server")), (0, _languageHandler._t)("Enter the location of your Modular homeserver. It may use your own " + "domain name or be a subdomain of <a>modular.im</a>.", {}, {
      a: sub => /*#__PURE__*/_react.default.createElement("a", {
        href: MODULAR_URL,
        target: "_blank",
        rel: "noreferrer noopener"
      }, sub)
    }), /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.onSubmit,
      autoComplete: "off",
      action: null
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ServerConfig_fields"
    }, /*#__PURE__*/_react.default.createElement(Field, {
      id: "mx_ServerConfig_hsUrl",
      label: (0, _languageHandler._t)("Server Name"),
      placeholder: this.props.serverConfig.hsUrl,
      value: this.state.hsUrl,
      onBlur: this.onHomeserverBlur,
      onChange: this.onHomeserverChange
    })), submitButton));
  }

}

exports.default = ModularServerConfig;
(0, _defineProperty2.default)(ModularServerConfig, "propTypes", _ServerConfig.default.propTypes);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,