"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _languageHandler = require("../../../languageHandler");

/*
Copyright 2015, 2016 OpenMarket Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const DIV_ID = 'mx_recaptcha';
/**
 * A pure UI component which displays a captcha form.
 */

var _default = (0, _createReactClass.default)({
  displayName: 'CaptchaForm',
  propTypes: {
    sitePublicKey: _propTypes.default.string,
    // called with the captcha response
    onCaptchaResponse: _propTypes.default.func
  },
  getDefaultProps: function () {
    return {
      onCaptchaResponse: () => {}
    };
  },
  getInitialState: function () {
    return {
      errorText: null
    };
  },
  // TODO: [REACT-WARNING] Replace component with real class, use constructor for refs
  UNSAFE_componentWillMount: function () {
    this._captchaWidgetId = null;
    this._recaptchaContainer = (0, _react.createRef)();
  },
  componentDidMount: function () {
    // Just putting a script tag into the returned jsx doesn't work, annoyingly,
    // so we do this instead.
    if (global.grecaptcha) {
      // already loaded
      this._onCaptchaLoaded();
    } else {
      console.log("Loading recaptcha script...");

      window.mx_on_recaptcha_loaded = () => {
        this._onCaptchaLoaded();
      };

      const scriptTag = document.createElement('script');
      scriptTag.setAttribute('src', "https://www.recaptcha.net/recaptcha/api.js?onload=mx_on_recaptcha_loaded&render=explicit");

      this._recaptchaContainer.current.appendChild(scriptTag);
    }
  },
  componentWillUnmount: function () {
    this._resetRecaptcha();
  },
  _renderRecaptcha: function (divId) {
    if (!global.grecaptcha) {
      console.error("grecaptcha not loaded!");
      throw new Error("Recaptcha did not load successfully");
    }

    const publicKey = this.props.sitePublicKey;

    if (!publicKey) {
      console.error("No public key for recaptcha!");
      throw new Error("This server has not supplied enough information for Recaptcha " + "authentication");
    }

    console.info("Rendering to %s", divId);
    this._captchaWidgetId = global.grecaptcha.render(divId, {
      sitekey: publicKey,
      callback: this.props.onCaptchaResponse
    });
  },
  _resetRecaptcha: function () {
    if (this._captchaWidgetId !== null) {
      global.grecaptcha.reset(this._captchaWidgetId);
    }
  },
  _onCaptchaLoaded: function () {
    console.log("Loaded recaptcha script.");

    try {
      this._renderRecaptcha(DIV_ID);
    } catch (e) {
      this.setState({
        errorText: e.toString()
      });
    }
  },
  render: function () {
    let error = null;

    if (this.state.errorText) {
      error = /*#__PURE__*/_react.default.createElement("div", {
        className: "error"
      }, this.state.errorText);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this._recaptchaContainer
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("This homeserver would like to make sure you are not a robot.")), /*#__PURE__*/_react.default.createElement("div", {
      id: DIV_ID
    }), error);
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,