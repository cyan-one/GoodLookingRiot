"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

var _AutoDiscoveryUtils = _interopRequireWildcard(require("../../../utils/AutoDiscoveryUtils"));

var _SdkConfig = _interopRequireDefault(require("../../../SdkConfig"));

var _matrix = require("matrix-js-sdk/src/matrix");

var _classnames = _interopRequireDefault(require("classnames"));

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2019 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/*
 * A pure UI component which displays the HS and IS to use.
 */
class ServerConfig extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onHomeserverBlur", ev => {
      this._hsTimeoutId = this._waitThenInvoke(this._hsTimeoutId, () => {
        this.validateServer();
      });
    });
    (0, _defineProperty2.default)(this, "onHomeserverChange", ev => {
      const hsUrl = ev.target.value;
      this.setState({
        hsUrl
      });
    });
    (0, _defineProperty2.default)(this, "onIdentityServerBlur", ev => {
      this._isTimeoutId = this._waitThenInvoke(this._isTimeoutId, () => {
        this.validateServer();
      });
    });
    (0, _defineProperty2.default)(this, "onIdentityServerChange", ev => {
      const isUrl = ev.target.value;
      this.setState({
        isUrl
      });
    });
    (0, _defineProperty2.default)(this, "onSubmit", async ev => {
      ev.preventDefault();
      ev.stopPropagation();
      const result = await this.validateServer();
      if (!result) return; // Do not continue.

      if (this.props.onAfterSubmit) {
        this.props.onAfterSubmit();
      }
    });
    (0, _defineProperty2.default)(this, "showHelpPopup", () => {
      const CustomServerDialog = sdk.getComponent('auth.CustomServerDialog');

      _Modal.default.createTrackedDialog('Custom Server Dialog', '', CustomServerDialog);
    });
    this.state = {
      busy: false,
      errorText: "",
      hsUrl: props.serverConfig.hsUrl,
      isUrl: props.serverConfig.isUrl,
      showIdentityServer: false
    };
  } // TODO: [REACT-WARNING] Replace with appropriate lifecycle event


  UNSAFE_componentWillReceiveProps(newProps) {
    // eslint-disable-line camelcase
    if (newProps.serverConfig.hsUrl === this.state.hsUrl && newProps.serverConfig.isUrl === this.state.isUrl) return;
    this.validateAndApplyServer(newProps.serverConfig.hsUrl, newProps.serverConfig.isUrl);
  }

  async validateServer() {
    // TODO: Do we want to support .well-known lookups here?
    // If for some reason someone enters "matrix.org" for a URL, we could do a lookup to
    // find their homeserver without demanding they use "https://matrix.org"
    const result = this.validateAndApplyServer(this.state.hsUrl, this.state.isUrl);

    if (!result) {
      return result;
    } // If the UI flow this component is embedded in requires an identity
    // server when the homeserver says it will need one, check first and
    // reveal this field if not already shown.
    // XXX: This a backward compatibility path for homeservers that require
    // an identity server to be passed during certain flows.
    // See also https://github.com/matrix-org/synapse/pull/5868.


    if (this.props.showIdentityServerIfRequiredByHomeserver && !this.state.showIdentityServer && (await this.isIdentityServerRequiredByHomeserver())) {
      this.setState({
        showIdentityServer: true
      });
      return null;
    }

    return result;
  }

  async validateAndApplyServer(hsUrl, isUrl) {
    // Always try and use the defaults first
    const defaultConfig
    /*: ValidatedServerConfig*/
    = _SdkConfig.default.get()["validated_server_config"];

    if (defaultConfig.hsUrl === hsUrl && defaultConfig.isUrl === isUrl) {
      this.setState({
        hsUrl: defaultConfig.hsUrl,
        isUrl: defaultConfig.isUrl,
        busy: false,
        errorText: ""
      });
      this.props.onServerConfigChange(defaultConfig);
      return defaultConfig;
    }

    this.setState({
      hsUrl,
      isUrl,
      busy: true,
      errorText: ""
    });

    try {
      const result = await _AutoDiscoveryUtils.default.validateServerConfigWithStaticUrls(hsUrl, isUrl);
      this.setState({
        busy: false,
        errorText: ""
      });
      this.props.onServerConfigChange(result);
      return result;
    } catch (e) {
      console.error(e);

      const stateForError = _AutoDiscoveryUtils.default.authComponentStateForError(e);

      if (!stateForError.isFatalError) {
        this.setState({
          busy: false
        }); // carry on anyway

        const result = await _AutoDiscoveryUtils.default.validateServerConfigWithStaticUrls(hsUrl, isUrl, true);
        this.props.onServerConfigChange(result);
        return result;
      } else {
        let message = (0, _languageHandler._t)("Unable to validate homeserver/identity server");

        if (e.translatedMessage) {
          message = e.translatedMessage;
        }

        this.setState({
          busy: false,
          errorText: message
        });
        return null;
      }
    }
  }

  async isIdentityServerRequiredByHomeserver() {
    // XXX: We shouldn't have to create a whole new MatrixClient just to
    // check if the homeserver requires an identity server... Should it be
    // extracted to a static utils function...?
    return (0, _matrix.createClient)({
      baseUrl: this.state.hsUrl
    }).doesServerRequireIdServerParam();
  }

  _waitThenInvoke(existingTimeoutId, fn) {
    if (existingTimeoutId) {
      clearTimeout(existingTimeoutId);
    }

    return setTimeout(fn.bind(this), this.props.delayTimeMs);
  }

  _renderHomeserverSection() {
    const Field = sdk.getComponent('elements.Field');
    return /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Enter your custom homeserver URL <a>What does this mean?</a>", {}, {
      a: sub => /*#__PURE__*/_react.default.createElement("a", {
        className: "mx_ServerConfig_help",
        href: "#",
        onClick: this.showHelpPopup
      }, sub)
    }), /*#__PURE__*/_react.default.createElement(Field, {
      id: "mx_ServerConfig_hsUrl",
      label: (0, _languageHandler._t)("Homeserver URL"),
      placeholder: this.props.serverConfig.hsUrl,
      value: this.state.hsUrl,
      onBlur: this.onHomeserverBlur,
      onChange: this.onHomeserverChange,
      disabled: this.state.busy
    }));
  }

  _renderIdentityServerSection() {
    const Field = sdk.getComponent('elements.Field');
    const classes = (0, _classnames.default)({
      "mx_ServerConfig_identityServer": true,
      "mx_ServerConfig_identityServer_shown": this.state.showIdentityServer
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes
    }, (0, _languageHandler._t)("Enter your custom identity server URL <a>What does this mean?</a>", {}, {
      a: sub => /*#__PURE__*/_react.default.createElement("a", {
        className: "mx_ServerConfig_help",
        href: "#",
        onClick: this.showHelpPopup
      }, sub)
    }), /*#__PURE__*/_react.default.createElement(Field, {
      label: (0, _languageHandler._t)("Identity Server URL"),
      placeholder: this.props.serverConfig.isUrl,
      value: this.state.isUrl || '',
      onBlur: this.onIdentityServerBlur,
      onChange: this.onIdentityServerChange,
      disabled: this.state.busy
    }));
  }

  render() {
    const AccessibleButton = sdk.getComponent('elements.AccessibleButton');
    const errorText = this.state.errorText ? /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_ServerConfig_error"
    }, this.state.errorText) : null;
    const submitButton = this.props.submitText ? /*#__PURE__*/_react.default.createElement(AccessibleButton, {
      element: "button",
      type: "submit",
      className: this.props.submitClass,
      onClick: this.onSubmit,
      disabled: this.state.busy
    }, this.props.submitText) : null;
    return /*#__PURE__*/_react.default.createElement("form", {
      className: "mx_ServerConfig",
      onSubmit: this.onSubmit,
      autoComplete: "off"
    }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Other servers")), errorText, this._renderHomeserverSection(), this._renderIdentityServerSection(), submitButton);
  }

}

exports.default = ServerConfig;
(0, _defineProperty2.default)(ServerConfig, "propTypes", {
  onServerConfigChange: _propTypes.default.func.isRequired,
  // The current configuration that the user is expecting to change.
  serverConfig: _propTypes.default.instanceOf(_AutoDiscoveryUtils.ValidatedServerConfig).isRequired,
  delayTimeMs: _propTypes.default.number,
  // time to wait before invoking onChanged
  // Called after the component calls onServerConfigChange
  onAfterSubmit: _propTypes.default.func,
  // Optional text for the submit button. If falsey, no button will be shown.
  submitText: _propTypes.default.string,
  // Optional class for the submit button. Only applies if the submit button
  // is to be rendered.
  submitClass: _propTypes.default.string,
  // Whether the flow this component is embedded in requires an identity
  // server when the homeserver says it will need one. Default false.
  showIdentityServerIfRequiredByHomeserver: _propTypes.default.bool
});
(0, _defineProperty2.default)(ServerConfig, "defaultProps", {
  onServerConfigChange: function () {},
  delayTimeMs: 0
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,