"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _matrixJsSdk = require("matrix-js-sdk");

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _ErrorDialog = _interopRequireDefault(require("../dialogs/ErrorDialog"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

/*
Copyright 2017, 2019 New Vector Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const GROUP_ID_REGEX = /\+\S+:\S+/;

class RelatedGroupSettings extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onNewGroupChanged", newGroupId => {
      this.setState({
        newGroupId
      });
    });
    (0, _defineProperty2.default)(this, "onGroupAdded", groupId => {
      if (groupId.length === 0 || !this.validateGroupId(groupId)) {
        return;
      }

      const newGroupsList = [...this.state.newGroupsList, groupId];
      this.setState({
        newGroupsList: newGroupsList,
        newGroupId: ''
      });
      this.updateGroups(newGroupsList);
    });
    (0, _defineProperty2.default)(this, "onGroupDeleted", index => {
      const group = this.state.newGroupsList[index];
      const newGroupsList = this.state.newGroupsList.filter(g => g !== group);
      this.setState({
        newGroupsList
      });
      this.updateGroups(newGroupsList);
    });
    this.state = {
      newGroupId: "",
      newGroupsList: props.relatedGroupsEvent ? props.relatedGroupsEvent.getContent().groups || [] : []
    };
  }

  updateGroups(newGroupsList) {
    this.context.sendStateEvent(this.props.roomId, 'm.room.related_groups', {
      groups: newGroupsList
    }, '').catch(err => {
      console.error(err);

      _Modal.default.createTrackedDialog('Error updating flair', '', _ErrorDialog.default, {
        title: (0, _languageHandler._t)("Error updating flair"),
        description: (0, _languageHandler._t)("There was an error updating the flair for this room. The server may not allow it or " + "a temporary error occurred.")
      });
    });
  }

  validateGroupId(groupId) {
    if (!GROUP_ID_REGEX.test(groupId)) {
      const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

      _Modal.default.createTrackedDialog('Invalid related community ID', '', ErrorDialog, {
        title: (0, _languageHandler._t)('Invalid community ID'),
        description: (0, _languageHandler._t)('\'%(groupId)s\' is not a valid community ID', {
          groupId
        })
      });

      return false;
    }

    return true;
  }

  render() {
    const localDomain = this.context.getDomain();
    const EditableItemList = sdk.getComponent('elements.EditableItemList');
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(EditableItemList, {
      id: "relatedGroups",
      items: this.state.newGroupsList,
      className: "mx_RelatedGroupSettings",
      newItem: this.state.newGroupId,
      canRemove: this.props.canSetRelatedGroups,
      canEdit: this.props.canSetRelatedGroups,
      onNewItemChanged: this.onNewGroupChanged,
      onItemAdded: this.onGroupAdded,
      onItemRemoved: this.onGroupDeleted,
      itemsLabel: (0, _languageHandler._t)('Showing flair for these communities:'),
      noItemsLabel: (0, _languageHandler._t)('This room is not showing flair for any communities'),
      placeholder: (0, _languageHandler._t)('New community ID (e.g. +foo:%(localDomain)s)', {
        localDomain
      })
    }));
  }

}

exports.default = RelatedGroupSettings;
(0, _defineProperty2.default)(RelatedGroupSettings, "propTypes", {
  roomId: _propTypes.default.string.isRequired,
  canSetRelatedGroups: _propTypes.default.bool.isRequired,
  relatedGroupsEvent: _propTypes.default.instanceOf(_matrixJsSdk.MatrixEvent)
});
(0, _defineProperty2.default)(RelatedGroupSettings, "contextType", _MatrixClientContext.default);
(0, _defineProperty2.default)(RelatedGroupSettings, "defaultProps", {
  canSetRelatedGroups: false
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,