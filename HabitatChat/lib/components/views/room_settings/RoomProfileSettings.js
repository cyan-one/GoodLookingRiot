"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _Field = _interopRequireDefault(require("../elements/Field"));

var sdk = _interopRequireWildcard(require("../../../index"));

/*
Copyright 2019 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// TODO: Merge with ProfileSettings?
class RoomProfileSettings extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "_uploadAvatar", () => {
      this._avatarUpload.current.click();
    });
    (0, _defineProperty2.default)(this, "_removeAvatar", () => {
      // clear file upload field so same file can be selected
      this._avatarUpload.current.value = "";
      this.setState({
        avatarUrl: undefined,
        avatarFile: undefined,
        enableProfileSave: true
      });
    });
    (0, _defineProperty2.default)(this, "_saveProfile", async e => {
      e.stopPropagation();
      e.preventDefault();
      if (!this.state.enableProfileSave) return;
      this.setState({
        enableProfileSave: false
      });

      const client = _MatrixClientPeg.MatrixClientPeg.get();

      const newState = {}; // TODO: What do we do about errors?

      if (this.state.originalDisplayName !== this.state.displayName) {
        await client.setRoomName(this.props.roomId, this.state.displayName);
        newState.originalDisplayName = this.state.displayName;
      }

      if (this.state.avatarFile) {
        const uri = await client.uploadContent(this.state.avatarFile);
        await client.sendStateEvent(this.props.roomId, 'm.room.avatar', {
          url: uri
        }, '');
        newState.avatarUrl = client.mxcUrlToHttp(uri, 96, 96, 'crop', false);
        newState.originalAvatarUrl = newState.avatarUrl;
        newState.avatarFile = null;
      } else if (this.state.originalAvatarUrl !== this.state.avatarUrl) {
        await client.sendStateEvent(this.props.roomId, 'm.room.avatar', {
          url: undefined
        }, '');
      }

      if (this.state.originalTopic !== this.state.topic) {
        await client.setRoomTopic(this.props.roomId, this.state.topic);
        newState.originalTopic = this.state.topic;
      }

      this.setState(newState);
    });
    (0, _defineProperty2.default)(this, "_onDisplayNameChanged", e => {
      this.setState({
        displayName: e.target.value,
        enableProfileSave: true
      });
    });
    (0, _defineProperty2.default)(this, "_onTopicChanged", e => {
      this.setState({
        topic: e.target.value,
        enableProfileSave: true
      });
    });
    (0, _defineProperty2.default)(this, "_onAvatarChanged", e => {
      if (!e.target.files || !e.target.files.length) {
        this.setState({
          avatarUrl: this.state.originalAvatarUrl,
          avatarFile: null,
          enableProfileSave: false
        });
        return;
      }

      const file = e.target.files[0];
      const reader = new FileReader();

      reader.onload = ev => {
        this.setState({
          avatarUrl: ev.target.result,
          avatarFile: file,
          enableProfileSave: true
        });
      };

      reader.readAsDataURL(file);
    });

    const _client = _MatrixClientPeg.MatrixClientPeg.get();

    const room = _client.getRoom(props.roomId);

    if (!room) throw new Error("Expected a room for ID: ", props.roomId);
    const avatarEvent = room.currentState.getStateEvents("m.room.avatar", "");
    let avatarUrl = avatarEvent && avatarEvent.getContent() ? avatarEvent.getContent()["url"] : null;
    if (avatarUrl) avatarUrl = _client.mxcUrlToHttp(avatarUrl, 96, 96, 'crop', false);
    const topicEvent = room.currentState.getStateEvents("m.room.topic", "");
    const topic = topicEvent && topicEvent.getContent() ? topicEvent.getContent()['topic'] : '';
    const nameEvent = room.currentState.getStateEvents('m.room.name', '');
    const name = nameEvent && nameEvent.getContent() ? nameEvent.getContent()['name'] : '';
    this.state = {
      originalDisplayName: name,
      displayName: name,
      originalAvatarUrl: avatarUrl,
      avatarUrl: avatarUrl,
      avatarFile: null,
      originalTopic: topic,
      topic: topic,
      enableProfileSave: false,
      canSetName: room.currentState.maySendStateEvent('m.room.name', _client.getUserId()),
      canSetTopic: room.currentState.maySendStateEvent('m.room.topic', _client.getUserId()),
      canSetAvatar: room.currentState.maySendStateEvent('m.room.avatar', _client.getUserId())
    };
    this._avatarUpload = (0, _react.createRef)();
  }

  render() {
    const AccessibleButton = sdk.getComponent('elements.AccessibleButton');
    const AvatarSetting = sdk.getComponent('settings.AvatarSetting');
    return /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this._saveProfile,
      autoComplete: "off",
      noValidate: true
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "file",
      ref: this._avatarUpload,
      className: "mx_ProfileSettings_avatarUpload",
      onChange: this._onAvatarChanged,
      accept: "image/*"
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ProfileSettings_profile"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_ProfileSettings_controls"
    }, /*#__PURE__*/_react.default.createElement(_Field.default, {
      label: (0, _languageHandler._t)("Room Name"),
      type: "text",
      value: this.state.displayName,
      autoComplete: "off",
      onChange: this._onDisplayNameChanged,
      disabled: !this.state.canSetName
    }), /*#__PURE__*/_react.default.createElement(_Field.default, {
      id: "profileTopic",
      label: (0, _languageHandler._t)("Room Topic"),
      disabled: !this.state.canSetTopic,
      type: "text",
      value: this.state.topic,
      autoComplete: "off",
      onChange: this._onTopicChanged,
      element: "textarea"
    })), /*#__PURE__*/_react.default.createElement(AvatarSetting, {
      avatarUrl: this.state.avatarUrl,
      avatarName: this.state.displayName || this.props.roomId,
      avatarAltText: (0, _languageHandler._t)("Room avatar"),
      uploadAvatar: this.state.canSetAvatar ? this._uploadAvatar : undefined,
      removeAvatar: this.state.canSetAvatar ? this._removeAvatar : undefined
    })), /*#__PURE__*/_react.default.createElement(AccessibleButton, {
      onClick: this._saveProfile,
      kind: "primary",
      disabled: !this.state.enableProfileSave
    }, (0, _languageHandler._t)("Save")));
  }

}

exports.default = RoomProfileSettings;
(0, _defineProperty2.default)(RoomProfileSettings, "propTypes", {
  roomId: _propTypes.default.string.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,