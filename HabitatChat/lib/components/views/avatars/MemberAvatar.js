"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var Avatar = _interopRequireWildcard(require("../../../Avatar"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _actions = require("../../../dispatcher/actions");

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var _default = (0, _createReactClass.default)({
  displayName: 'MemberAvatar',
  propTypes: {
    member: _propTypes.default.object,
    fallbackUserId: _propTypes.default.string,
    width: _propTypes.default.number,
    height: _propTypes.default.number,
    resizeMethod: _propTypes.default.string,
    // The onClick to give the avatar
    onClick: _propTypes.default.func,
    // Whether the onClick of the avatar should be overriden to dispatch `Action.ViewUser`
    viewUserOnClick: _propTypes.default.bool,
    title: _propTypes.default.string
  },
  getDefaultProps: function () {
    return {
      width: 40,
      height: 40,
      resizeMethod: 'crop',
      viewUserOnClick: false
    };
  },
  getInitialState: function () {
    return this._getState(this.props);
  },
  // TODO: [REACT-WARNING] Replace with appropriate lifecycle event
  UNSAFE_componentWillReceiveProps: function (nextProps) {
    this.setState(this._getState(nextProps));
  },
  _getState: function (props) {
    if (props.member && props.member.name) {
      return {
        name: props.member.name,
        title: props.title || props.member.userId,
        imageUrl: Avatar.avatarUrlForMember(props.member, props.width, props.height, props.resizeMethod)
      };
    } else if (props.fallbackUserId) {
      return {
        name: props.fallbackUserId,
        title: props.fallbackUserId
      };
    } else {
      console.error("MemberAvatar called somehow with null member or fallbackUserId");
    }
  },
  render: function () {
    const BaseAvatar = sdk.getComponent("avatars.BaseAvatar");
    let _this$props = this.props,
        {
      member,
      fallbackUserId,
      onClick,
      viewUserOnClick
    } = _this$props,
        otherProps = (0, _objectWithoutProperties2.default)(_this$props, ["member", "fallbackUserId", "onClick", "viewUserOnClick"]);
    const userId = member ? member.userId : fallbackUserId;

    if (viewUserOnClick) {
      onClick = () => {
        _dispatcher.default.dispatch({
          action: _actions.Action.ViewUser,
          member: this.props.member
        });
      };
    }

    return /*#__PURE__*/_react.default.createElement(BaseAvatar, (0, _extends2.default)({}, otherProps, {
      name: this.state.name,
      title: this.state.title,
      idName: userId,
      url: this.state.imageUrl,
      onClick: onClick
    }));
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,