"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _HeaderButton = _interopRequireDefault(require("./HeaderButton"));

var _HeaderButtons = _interopRequireWildcard(require("./HeaderButtons"));

var _RightPanelStorePhases = require("../../../stores/RightPanelStorePhases");

var _actions = require("../../../dispatcher/actions");

var _payloads = require("../../../dispatcher/payloads");

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2017 Vector Creations Ltd
Copyright 2017 New Vector Ltd
Copyright 2018 New Vector Ltd
Copyright 2019, 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const MEMBER_PHASES = [_RightPanelStorePhases.RIGHT_PANEL_PHASES.RoomMemberList, _RightPanelStorePhases.RIGHT_PANEL_PHASES.RoomMemberInfo, _RightPanelStorePhases.RIGHT_PANEL_PHASES.EncryptionPanel, _RightPanelStorePhases.RIGHT_PANEL_PHASES.Room3pidMemberInfo];

class RoomHeaderButtons extends _HeaderButtons.default {
  constructor(props) {
    super(props, _HeaderButtons.HEADER_KIND_ROOM);
    this._onMembersClicked = this._onMembersClicked.bind(this);
    this._onFilesClicked = this._onFilesClicked.bind(this);
    this._onNotificationsClicked = this._onNotificationsClicked.bind(this);
  }

  onAction(payload
  /*: ActionPayload*/
  ) {
    super.onAction(payload);

    if (payload.action === _actions.Action.ViewUser) {
      if (payload.member) {
        this.setPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.RoomMemberInfo, {
          member: payload.member
        });
      } else {
        this.setPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.RoomMemberList);
      }
    } else if (payload.action === "view_3pid_invite") {
      if (payload.event) {
        this.setPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.Room3pidMemberInfo, {
          event: payload.event
        });
      } else {
        this.setPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.RoomMemberList);
      }
    }
  }

  _onMembersClicked() {
    if (this.state.phase === _RightPanelStorePhases.RIGHT_PANEL_PHASES.RoomMemberInfo) {
      // send the active phase to trigger a toggle
      // XXX: we should pass refireParams here but then it won't collapse as we desire it to
      this.setPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.RoomMemberInfo);
    } else {
      // This toggles for us, if needed
      this.setPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.RoomMemberList);
    }
  }

  _onFilesClicked() {
    // This toggles for us, if needed
    this.setPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.FilePanel);
  }

  _onNotificationsClicked() {
    // This toggles for us, if needed
    this.setPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.NotificationPanel);
  }

  renderButtons() {
    return [/*#__PURE__*/_react.default.createElement(_HeaderButton.default, {
      key: "membersButton",
      name: "membersButton",
      title: (0, _languageHandler._t)('Members'),
      isHighlighted: this.isPhase(MEMBER_PHASES),
      onClick: this._onMembersClicked,
      analytics: ['Right Panel', 'Member List Button', 'click']
    }), /*#__PURE__*/_react.default.createElement(_HeaderButton.default, {
      key: "filesButton",
      name: "filesButton",
      title: (0, _languageHandler._t)('Files'),
      isHighlighted: this.isPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.FilePanel),
      onClick: this._onFilesClicked,
      analytics: ['Right Panel', 'File List Button', 'click']
    }), /*#__PURE__*/_react.default.createElement(_HeaderButton.default, {
      key: "notifsButton",
      name: "notifsButton",
      title: (0, _languageHandler._t)('Notifications'),
      isHighlighted: this.isPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.NotificationPanel),
      onClick: this._onNotificationsClicked,
      analytics: ['Right Panel', 'Notification List Button', 'click']
    })];
  }

}

exports.default = RoomHeaderButtons;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,