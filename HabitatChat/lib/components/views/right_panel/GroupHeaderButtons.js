"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../languageHandler");

var _HeaderButton = _interopRequireDefault(require("./HeaderButton"));

var _HeaderButtons = _interopRequireWildcard(require("./HeaderButtons"));

var _RightPanelStorePhases = require("../../../stores/RightPanelStorePhases");

var _actions = require("../../../dispatcher/actions");

var _payloads = require("../../../dispatcher/payloads");

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2017 Vector Creations Ltd
Copyright 2017 New Vector Ltd
Copyright 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const GROUP_PHASES = [_RightPanelStorePhases.RIGHT_PANEL_PHASES.GroupMemberInfo, _RightPanelStorePhases.RIGHT_PANEL_PHASES.GroupMemberList];
const ROOM_PHASES = [_RightPanelStorePhases.RIGHT_PANEL_PHASES.GroupRoomList, _RightPanelStorePhases.RIGHT_PANEL_PHASES.GroupRoomInfo];

class GroupHeaderButtons extends _HeaderButtons.default {
  constructor(props) {
    super(props, _HeaderButtons.HEADER_KIND_GROUP);
    this._onMembersClicked = this._onMembersClicked.bind(this);
    this._onRoomsClicked = this._onRoomsClicked.bind(this);
  }

  onAction(payload
  /*: ActionPayload*/
  ) {
    super.onAction(payload);

    if (payload.action === _actions.Action.ViewUser) {
      if (payload.member) {
        this.setPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.RoomMemberInfo, {
          member: payload.member
        });
      } else {
        this.setPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.GroupMemberList);
      }
    } else if (payload.action === "view_group") {
      this.setPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.GroupMemberList);
    } else if (payload.action === "view_group_room") {
      this.setPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.GroupRoomInfo, {
        groupRoomId: payload.groupRoomId,
        groupId: payload.groupId
      });
    } else if (payload.action === "view_group_room_list") {
      this.setPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.GroupRoomList);
    } else if (payload.action === "view_group_member_list") {
      this.setPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.GroupMemberList);
    } else if (payload.action === "view_group_user") {
      this.setPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.GroupMemberInfo, {
        member: payload.member
      });
    }
  }

  _onMembersClicked() {
    if (this.state.phase === _RightPanelStorePhases.RIGHT_PANEL_PHASES.GroupMemberInfo) {
      // send the active phase to trigger a toggle
      this.setPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.GroupMemberInfo);
    } else {
      // This toggles for us, if needed
      this.setPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.GroupMemberList);
    }
  }

  _onRoomsClicked() {
    // This toggles for us, if needed
    this.setPhase(_RightPanelStorePhases.RIGHT_PANEL_PHASES.GroupRoomList);
  }

  renderButtons() {
    return [/*#__PURE__*/_react.default.createElement(_HeaderButton.default, {
      key: "groupMembersButton",
      name: "groupMembersButton",
      title: (0, _languageHandler._t)('Members'),
      isHighlighted: this.isPhase(GROUP_PHASES),
      onClick: this._onMembersClicked,
      analytics: ['Right Panel', 'Group Member List Button', 'click']
    }), /*#__PURE__*/_react.default.createElement(_HeaderButton.default, {
      key: "roomsButton",
      name: "roomsButton",
      title: (0, _languageHandler._t)('Rooms'),
      isHighlighted: this.isPhase(ROOM_PHASES),
      onClick: this._onRoomsClicked,
      analytics: ['Right Panel', 'Group Room List Button', 'click']
    })];
  }

}

exports.default = GroupHeaderButtons;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3JpZ2h0X3BhbmVsL0dyb3VwSGVhZGVyQnV0dG9ucy5qcyJdLCJuYW1lcyI6WyJHUk9VUF9QSEFTRVMiLCJSSUdIVF9QQU5FTF9QSEFTRVMiLCJHcm91cE1lbWJlckluZm8iLCJHcm91cE1lbWJlckxpc3QiLCJST09NX1BIQVNFUyIsIkdyb3VwUm9vbUxpc3QiLCJHcm91cFJvb21JbmZvIiwiR3JvdXBIZWFkZXJCdXR0b25zIiwiSGVhZGVyQnV0dG9ucyIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJIRUFERVJfS0lORF9HUk9VUCIsIl9vbk1lbWJlcnNDbGlja2VkIiwiYmluZCIsIl9vblJvb21zQ2xpY2tlZCIsIm9uQWN0aW9uIiwicGF5bG9hZCIsImFjdGlvbiIsIkFjdGlvbiIsIlZpZXdVc2VyIiwibWVtYmVyIiwic2V0UGhhc2UiLCJSb29tTWVtYmVySW5mbyIsImdyb3VwUm9vbUlkIiwiZ3JvdXBJZCIsInN0YXRlIiwicGhhc2UiLCJyZW5kZXJCdXR0b25zIiwiaXNQaGFzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBMUJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEJBLE1BQU1BLFlBQVksR0FBRyxDQUNqQkMsMENBQW1CQyxlQURGLEVBRWpCRCwwQ0FBbUJFLGVBRkYsQ0FBckI7QUFJQSxNQUFNQyxXQUFXLEdBQUcsQ0FDaEJILDBDQUFtQkksYUFESCxFQUVoQkosMENBQW1CSyxhQUZILENBQXBCOztBQUtlLE1BQU1DLGtCQUFOLFNBQWlDQyxzQkFBakMsQ0FBK0M7QUFDMURDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0FBQ2YsVUFBTUEsS0FBTixFQUFhQyxnQ0FBYjtBQUNBLFNBQUtDLGlCQUFMLEdBQXlCLEtBQUtBLGlCQUFMLENBQXVCQyxJQUF2QixDQUE0QixJQUE1QixDQUF6QjtBQUNBLFNBQUtD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UDtBQWNIOztBQTlEeUQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTUsIDIwMTYgT3Blbk1hcmtldCBMdGRcbkNvcHlyaWdodCAyMDE3IFZlY3RvciBDcmVhdGlvbnMgTHRkXG5Db3B5cmlnaHQgMjAxNyBOZXcgVmVjdG9yIEx0ZFxuQ29weXJpZ2h0IDIwMTggTmV3IFZlY3RvciBMdGRcbkNvcHlyaWdodCAyMDE5IFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IF90IH0gZnJvbSAnLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyJztcbmltcG9ydCBIZWFkZXJCdXR0b24gZnJvbSAnLi9IZWFkZXJCdXR0b24nO1xuaW1wb3J0IEhlYWRlckJ1dHRvbnMsIHtIRUFERVJfS0lORF9HUk9VUH0gZnJvbSAnLi9IZWFkZXJCdXR0b25zJztcbmltcG9ydCB7UklHSFRfUEFORUxfUEhBU0VTfSBmcm9tIFwiLi4vLi4vLi4vc3RvcmVzL1JpZ2h0UGFuZWxTdG9yZVBoYXNlc1wiO1xuaW1wb3J0IHtBY3Rpb259IGZyb20gXCIuLi8uLi8uLi9kaXNwYXRjaGVyL2FjdGlvbnNcIjtcbmltcG9ydCB7QWN0aW9uUGF5bG9hZH0gZnJvbSBcIi4uLy4uLy4uL2Rpc3BhdGNoZXIvcGF5bG9hZHNcIjtcblxuY29uc3QgR1JPVVBfUEhBU0VTID0gW1xuICAgIFJJR0hUX1BBTkVMX1BIQVNFUy5Hcm91cE1lbWJlckluZm8sXG4gICAgUklHSFRfUEFORUxfUEhBU0VTLkdyb3VwTWVtYmVyTGlzdCxcbl07XG5jb25zdCBST09NX1BIQVNFUyA9IFtcbiAgICBSSUdIVF9QQU5FTF9QSEFTRVMuR3JvdXBSb29tTGlzdCxcbiAgICBSSUdIVF9QQU5FTF9QSEFTRVMuR3JvdXBSb29tSW5mbyxcbl07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyb3VwSGVhZGVyQnV0dG9ucyBleHRlbmRzIEhlYWRlckJ1dHRvbnMge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzLCBIRUFERVJfS0lORF9HUk9VUCk7XG4gICAgICAgIHRoaXMuX29uTWVtYmVyc0NsaWNrZWQgPSB0aGlzLl9vbk1lbWJlcnNDbGlja2VkLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX29uUm9vbXNDbGlja2VkID0gdGhpcy5fb25Sb29tc0NsaWNrZWQuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBvbkFjdGlvbihwYXlsb2FkOiBBY3Rpb25QYXlsb2FkKSB7XG4gICAgICAgIHN1cGVyLm9uQWN0aW9uKHBheWxvYWQpO1xuXG4gICAgICAgIGlmIChwYXlsb2FkLmFjdGlvbiA9PT0gQWN0aW9uLlZpZXdVc2VyKSB7XG4gICAgICAgICAgICBpZiAocGF5bG9hZC5tZW1iZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFBoYXNlKFJJR0hUX1BBTkVMX1BIQVNFUy5Sb29tTWVtYmVySW5mbywge21lbWJlcjogcGF5bG9hZC5tZW1iZXJ9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRQaGFzZShSSUdIVF9QQU5FTF9QSEFTRVMuR3JvdXBNZW1iZXJMaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwYXlsb2FkLmFjdGlvbiA9PT0gXCJ2aWV3X2dyb3VwXCIpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0UGhhc2UoUklHSFRfUEFORUxfUEhBU0VTLkdyb3VwTWVtYmVyTGlzdCk7XG4gICAgICAgIH0gZWxzZSBpZiAocGF5bG9hZC5hY3Rpb24gPT09IFwidmlld19ncm91cF9yb29tXCIpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0UGhhc2UoXG4gICAgICAgICAgICAgICAgUklHSFRfUEFORUxfUEhBU0VTLkdyb3VwUm9vbUluZm8sXG4gICAgICAgICAgICAgICAge2dyb3VwUm9vbUlkOiBwYXlsb2FkLmdyb3VwUm9vbUlkLCBncm91cElkOiBwYXlsb2FkLmdyb3VwSWR9LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXlsb2FkLmFjdGlvbiA9PT0gXCJ2aWV3X2dyb3VwX3Jvb21fbGlzdFwiKSB7XG4gICAgICAgICAgICB0aGlzLnNldFBoYXNlKFJJR0hUX1BBTkVMX1BIQVNFUy5Hcm91cFJvb21MaXN0KTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXlsb2FkLmFjdGlvbiA9PT0gXCJ2aWV3X2dyb3VwX21lbWJlcl9saXN0XCIpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0UGhhc2UoUklHSFRfUEFORUxfUEhBU0VTLkdyb3VwTWVtYmVyTGlzdCk7XG4gICAgICAgIH0gZWxzZSBpZiAocGF5bG9hZC5hY3Rpb24gPT09IFwidmlld19ncm91cF91c2VyXCIpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0UGhhc2UoUklHSFRfUEFORUxfUEhBU0VTLkdyb3VwTWVtYmVySW5mbywge21lbWJlcjogcGF5bG9hZC5tZW1iZXJ9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vbk1lbWJlcnNDbGlja2VkKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5waGFzZSA9PT0gUklHSFRfUEFORUxfUEhBU0VTLkdyb3VwTWVtYmVySW5mbykge1xuICAgICAgICAgICAgLy8gc2VuZCB0aGUgYWN0aXZlIHBoYXNlIHRvIHRyaWdnZXIgYSB0b2dnbGVcbiAgICAgICAgICAgIHRoaXMuc2V0UGhhc2UoUklHSFRfUEFORUxfUEhBU0VTLkdyb3VwTWVtYmVySW5mbyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGlzIHRvZ2dsZXMgZm9yIHVzLCBpZiBuZWVkZWRcbiAgICAgICAgICAgIHRoaXMuc2V0UGhhc2UoUklHSFRfUEFORUxfUEhBU0VTLkdyb3VwTWVtYmVyTGlzdCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfb25Sb29tc0NsaWNrZWQoKSB7XG4gICAgICAgIC8vIFRoaXMgdG9nZ2xlcyBmb3IgdXMsIGlmIG5lZWRlZFxuICAgICAgICB0aGlzLnNldFBoYXNlKFJJR0hUX1BBTkVMX1BIQVNFUy5Hcm91cFJvb21MaXN0KTtcbiAgICB9XG5cbiAgICByZW5kZXJCdXR0b25zKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgPEhlYWRlckJ1dHRvbiBrZXk9XCJncm91cE1lbWJlcnNCdXR0b25cIiBuYW1lPVwiZ3JvdXBNZW1iZXJzQnV0dG9uXCJcbiAgICAgICAgICAgICAgICB0aXRsZT17X3QoJ01lbWJlcnMnKX1cbiAgICAgICAgICAgICAgICBpc0hpZ2hsaWdodGVkPXt0aGlzLmlzUGhhc2UoR1JPVVBfUEhBU0VTKX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLl9vbk1lbWJlcnNDbGlja2VkfVxuICAgICAgICAgICAgICAgIGFuYWx5dGljcz17WydSaWdodCBQYW5lbCcsICdHcm91cCBNZW1iZXIgTGlzdCBCdXR0b24nLCAnY2xpY2snXX1cbiAgICAgICAgICAgIC8+LFxuICAgICAgICAgICAgPEhlYWRlckJ1dHRvbiBrZXk9XCJyb29tc0J1dHRvblwiIG5hbWU9XCJyb29tc0J1dHRvblwiXG4gICAgICAgICAgICAgICAgdGl0bGU9e190KCdSb29tcycpfVxuICAgICAgICAgICAgICAgIGlzSGlnaGxpZ2h0ZWQ9e3RoaXMuaXNQaGFzZShST09NX1BIQVNFUyl9XG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5fb25Sb29tc0NsaWNrZWR9XG4gICAgICAgICAgICAgICAgYW5hbHl0aWNzPXtbJ1JpZ2h0IFBhbmVsJywgJ0dyb3VwIFJvb20gTGlzdCBCdXR0b24nLCAnY2xpY2snXX1cbiAgICAgICAgICAgIC8+LFxuICAgICAgICBdO1xuICAgIH1cbn1cbiJdfQ==