"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.HEADER_KIND_GROUP = exports.HEADER_KIND_ROOM = void 0;

var _react = _interopRequireDefault(require("react"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _RightPanelStore = _interopRequireDefault(require("../../../stores/RightPanelStore"));

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2017 Vector Creations Ltd
Copyright 2017 New Vector Ltd
Copyright 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const HEADER_KIND_ROOM = "room";
exports.HEADER_KIND_ROOM = HEADER_KIND_ROOM;
const HEADER_KIND_GROUP = "group";
exports.HEADER_KIND_GROUP = HEADER_KIND_GROUP;
const HEADER_KINDS = [HEADER_KIND_GROUP, HEADER_KIND_ROOM];

class HeaderButtons extends _react.default.Component {
  constructor(props, kind) {
    super(props);
    if (!HEADER_KINDS.includes(kind)) throw new Error("Invalid header kind: ".concat(kind));

    const rps = _RightPanelStore.default.getSharedInstance();

    this.state = {
      headerKind: kind,
      phase: kind === HEADER_KIND_ROOM ? rps.visibleRoomPanelPhase : rps.visibleGroupPanelPhase
    };
  }

  componentDidMount() {
    this._storeToken = _RightPanelStore.default.getSharedInstance().addListener(this.onRightPanelUpdate.bind(this));
    this._dispatcherRef = _dispatcher.default.register(this.onAction.bind(this)); // used by subclasses
  }

  componentWillUnmount() {
    if (this._storeToken) this._storeToken.remove();
    if (this._dispatcherRef) _dispatcher.default.unregister(this._dispatcherRef);
  }

  onAction(payload) {// Ignore - intended to be overridden by subclasses
  }

  setPhase(phase, extras) {
    _dispatcher.default.dispatch({
      action: 'set_right_panel_phase',
      phase: phase,
      refireParams: extras
    });
  }

  isPhase(phases
  /*: string | string[]*/
  ) {
    if (Array.isArray(phases)) {
      return phases.includes(this.state.phase);
    } else {
      return phases === this.state.phase;
    }
  }

  onRightPanelUpdate() {
    const rps = _RightPanelStore.default.getSharedInstance();

    if (this.state.headerKind === HEADER_KIND_ROOM) {
      this.setState({
        phase: rps.visibleRoomPanelPhase
      });
    } else if (this.state.headerKind === HEADER_KIND_GROUP) {
      this.setState({
        phase: rps.visibleGroupPanelPhase
      });
    }
  }

  render() {
    // inline style as this will be swapped around in future commits
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_HeaderButtons",
      role: "tablist"
    }, this.renderButtons());
  }

}

exports.default = HeaderButtons;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL3JpZ2h0X3BhbmVsL0hlYWRlckJ1dHRvbnMuanMiXSwibmFtZXMiOlsiSEVBREVSX0tJTkRfUk9PTSIsIkhFQURFUl9LSU5EX0dST1VQIiwiSEVBREVSX0tJTkRTIiwiSGVhZGVyQnV0dG9ucyIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsImtpbmQiLCJpbmNsdWRlcyIsIkVycm9yIiwicnBzIiwiUmlnaHRQYW5lbFN0b3JlIiwiZ2V0U2hhcmVkSW5zdGFuY2UiLCJzdGF0ZSIsImhlYWRlcktpbmQiLCJwaGFzZSIsInZpc2libGVSb29tUGFuZWxQaGFzZSIsInZpc2libGVHcm91cFBhbmVsUGhhc2UiLCJjb21wb25lbnREaWRNb3VudCIsIl9zdG9yZVRva2VuIiwiYWRkTGlzdGVuZXIiLCJvblJpZ2h0UGFuZWxVcGRhdGUiLCJiaW5kIiwiX2Rpc3BhdGNoZXJSZWYiLCJkaXMiLCJyZWdpc3RlciIsIm9uQWN0aW9uIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW1vdmUiLCJ1bnJlZ2lzdGVyIiwicGF5bG9hZCIsInNldFBoYXNlIiwiZXh0cmFzIiwiZGlzcGF0Y2giLCJhY3Rpb24iLCJyZWZpcmVQYXJhbXMiLCJpc1BoYXNlIiwicGhhc2VzIiwiQXJyYXkiLCJpc0FycmF5Iiwic2V0U3RhdGUiLCJyZW5kZXIiLCJyZW5kZXJCdXR0b25zIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7O0FBdEJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JPLE1BQU1BLGdCQUFnQixHQUFHLE1BQXpCOztBQUNBLE1BQU1DLGlCQUFpQixHQUFHLE9BQTFCOztBQUVQLE1BQU1DLFlBQVksR0FBRyxDQUFDRCxpQkFBRCxFQUFvQkQsZ0JBQXBCLENBQXJCOztBQUVlLE1BQU1HLGFBQU4sU0FBNEJDLGVBQU1DLFNBQWxDLENBQTRDO0FBQ3ZEQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBUUMsSUFBUixFQUFjO0FBQ3JCLFVBQU1ELEtBQU47QUFFQSxRQUFJLENBQUNMLFlBQVksQ0FBQ08sUUFBYixDQUFzQkQsSUFBdEIsQ0FBTCxFQUFrQyxNQUFNLElBQUlFLEtBQUosZ0NBQWtDRixJQUFsQyxFQUFOOztBQUVsQyxVQUFNRyxHQUFHLEdBQUdDLHlCQUFnQkMsaUJBQWhCLEVBQVo7O0FBQ0EsU0FBS0MsS0FBTCxHQUFhO0FBQ1RDLE1BQUFBLFVBQVUsRUFBRVAsSUFESDtBQUVUUSxNQUFBQSxLQUFLLEVBQUVSLElBQUksS0FBS1IsZ0JBQVQsR0FBNEJXLEdBQUcsQ0FBQ00scUJBQWhDLEdBQXdETixHQUFHLENBQUNPO0FBRjFELEtBQWI7QUFJSDs7QUFFREMsRUFBQUEsaUJBQWlCLEdBQUc7QUFDaEIsU0FBS0MsV0FBTCxHQUFtQlIseUJBQWdCQyxpQkFBaEIsR0FBb0NRLFdBQXBDLENBQWdELEtBQUtDLGtCQUFMLENBQXdCQyxJQUF4QixDQUE2QixJQUE3QixDQUFoRCxDQUFuQjtBQUNBLFNBQUtDLGNBQUwsR0FBc0JDLG9CQUFJQyxRQUFKLENBQWEsS0FBS0MsUUFBTCxDQUFjSixJQUFkLENBQW1CLElBQW5CLENBQWIsQ0FBdEIsQ0FGZ0IsQ0FFOEM7QUFDakU7O0FBRURLLEVBQUFBLG9CQUFvQixHQUFHO0FBQ25CLFFBQUksS0FBS1IsV0FBVCxFQUFzQixLQUFLQSxXQUFMLENBQWlCUyxNQUFqQjtBQUN0QixRQUFJLEtBQUtMLGNBQVQsRUFBeUJDLG9CQUFJSyxVQUFKLENBQWUsS0FBS04sY0FBcEI7QUFDNUI7O0FBRURHLEVBQUFBLFFBQVEsQ0FBQ0ksT0FBRCxFQUFVLENBQ2Q7QUFDSDs7QUFFREMsRUFBQUEsUUFBUSxDQUFDaEIsS0FBRCxFQUFRaUIsTUFBUixFQUFnQjtBQUNwQlIsd0JBQUlTLFFBQUosQ0FBYTtBQUNUQyxNQUFBQSxNQUFNLEVBQUUsdUJBREM7QUFFVG5CLE1BQUFBLEtBQUssRUFBRUEsS0FGRTtBQUdUb0IsTUFBQUEsWUFBWSxFQUFFSDtBQUhMLEtBQWI7QUFLSDs7QUFFREksRUFBQUEsT0FBTyxDQUFDQztBQUFEO0FBQUEsSUFBNEI7QUFDL0IsUUFBSUMsS0FBSyxDQUFDQyxPQUFOLENBQWNGLE1BQWQsQ0FBSixFQUEyQjtBQUN2QixhQUFPQSxNQUFNLENBQUM3QixRQUFQLENBQWdCLEtBQUtLLEtBQUwsQ0FBV0UsS0FBM0IsQ0FBUDtBQUNILEtBRkQsTUFFTztBQUNILGFBQU9zQixNQUFNLEtBQUssS0FBS3hCLEtBQUwsQ0FBV0UsS0FBN0I7QUFDSDtBQUNKOztBQUVETSxFQUFBQSxrQkFBa0IsR0FBRztBQUNqQixVQUFNWCxHQUFHLEdBQUdDLHlCQUFnQkMsaUJBQWhCLEVBQVo7O0FBQ0EsUUFBSSxLQUFLQyxLQUFMLENBQVdDLFVBQVgsS0FBMEJmLGdCQUE5QixFQUFnRDtBQUM1QyxXQUFLeUMsUUFBTCxDQUFjO0FBQUN6QixRQUFBQSxLQUFLLEVBQUVMLEdBQUcsQ0FBQ007QUFBWixPQUFkO0FBQ0gsS0FGRCxNQUVPLElBQUksS0FBS0gsS0FBTCxDQUFXQyxVQUFYLEtBQTBCZCxpQkFBOUIsRUFBaUQ7QUFDcEQsV0FBS3dDLFFBQUwsQ0FBYztBQUFDekIsUUFBQUEsS0FBSyxFQUFFTCxHQUFHLENBQUNPO0FBQVosT0FBZDtBQUNIO0FBQ0o7O0FBRUR3QixFQUFBQSxNQUFNLEdBQUc7QUFDTDtBQUNBLHdCQUFPO0FBQUssTUFBQSxTQUFTLEVBQUMsa0JBQWY7QUFBa0MsTUFBQSxJQUFJLEVBQUM7QUFBdkMsT0FDRixLQUFLQyxhQUFMLEVBREUsQ0FBUDtBQUdIOztBQXpEc0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTUsIDIwMTYgT3Blbk1hcmtldCBMdGRcbkNvcHlyaWdodCAyMDE3IFZlY3RvciBDcmVhdGlvbnMgTHRkXG5Db3B5cmlnaHQgMjAxNyBOZXcgVmVjdG9yIEx0ZFxuQ29weXJpZ2h0IDIwMTggTmV3IFZlY3RvciBMdGRcbkNvcHlyaWdodCAyMDE5IFRoZSBNYXRyaXgub3JnIEZvdW5kYXRpb24gQy5JLkMuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBkaXMgZnJvbSAnLi4vLi4vLi4vZGlzcGF0Y2hlci9kaXNwYXRjaGVyJztcbmltcG9ydCBSaWdodFBhbmVsU3RvcmUgZnJvbSBcIi4uLy4uLy4uL3N0b3Jlcy9SaWdodFBhbmVsU3RvcmVcIjtcblxuZXhwb3J0IGNvbnN0IEhFQURFUl9LSU5EX1JPT00gPSBcInJvb21cIjtcbmV4cG9ydCBjb25zdCBIRUFERVJfS0lORF9HUk9VUCA9IFwiZ3JvdXBcIjtcblxuY29uc3QgSEVBREVSX0tJTkRTID0gW0hFQURFUl9LSU5EX0dST1VQLCBIRUFERVJfS0lORF9ST09NXTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGVhZGVyQnV0dG9ucyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMsIGtpbmQpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIGlmICghSEVBREVSX0tJTkRTLmluY2x1ZGVzKGtpbmQpKSB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaGVhZGVyIGtpbmQ6ICR7a2luZH1gKTtcblxuICAgICAgICBjb25zdCBycHMgPSBSaWdodFBhbmVsU3RvcmUuZ2V0U2hhcmVkSW5zdGFuY2UoKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGhlYWRlcktpbmQ6IGtpbmQsXG4gICAgICAgICAgICBwaGFzZToga2luZCA9PT0gSEVBREVSX0tJTkRfUk9PTSA/IHJwcy52aXNpYmxlUm9vbVBhbmVsUGhhc2UgOiBycHMudmlzaWJsZUdyb3VwUGFuZWxQaGFzZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5fc3RvcmVUb2tlbiA9IFJpZ2h0UGFuZWxTdG9yZS5nZXRTaGFyZWRJbnN0YW5jZSgpLmFkZExpc3RlbmVyKHRoaXMub25SaWdodFBhbmVsVXBkYXRlLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLl9kaXNwYXRjaGVyUmVmID0gZGlzLnJlZ2lzdGVyKHRoaXMub25BY3Rpb24uYmluZCh0aGlzKSk7IC8vIHVzZWQgYnkgc3ViY2xhc3Nlc1xuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy5fc3RvcmVUb2tlbikgdGhpcy5fc3RvcmVUb2tlbi5yZW1vdmUoKTtcbiAgICAgICAgaWYgKHRoaXMuX2Rpc3BhdGNoZXJSZWYpIGRpcy51bnJlZ2lzdGVyKHRoaXMuX2Rpc3BhdGNoZXJSZWYpO1xuICAgIH1cblxuICAgIG9uQWN0aW9uKHBheWxvYWQpIHtcbiAgICAgICAgLy8gSWdub3JlIC0gaW50ZW5kZWQgdG8gYmUgb3ZlcnJpZGRlbiBieSBzdWJjbGFzc2VzXG4gICAgfVxuXG4gICAgc2V0UGhhc2UocGhhc2UsIGV4dHJhcykge1xuICAgICAgICBkaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgYWN0aW9uOiAnc2V0X3JpZ2h0X3BhbmVsX3BoYXNlJyxcbiAgICAgICAgICAgIHBoYXNlOiBwaGFzZSxcbiAgICAgICAgICAgIHJlZmlyZVBhcmFtczogZXh0cmFzLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpc1BoYXNlKHBoYXNlczogc3RyaW5nIHwgc3RyaW5nW10pIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGhhc2VzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHBoYXNlcy5pbmNsdWRlcyh0aGlzLnN0YXRlLnBoYXNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBwaGFzZXMgPT09IHRoaXMuc3RhdGUucGhhc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblJpZ2h0UGFuZWxVcGRhdGUoKSB7XG4gICAgICAgIGNvbnN0IHJwcyA9IFJpZ2h0UGFuZWxTdG9yZS5nZXRTaGFyZWRJbnN0YW5jZSgpO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5oZWFkZXJLaW5kID09PSBIRUFERVJfS0lORF9ST09NKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtwaGFzZTogcnBzLnZpc2libGVSb29tUGFuZWxQaGFzZX0pO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuaGVhZGVyS2luZCA9PT0gSEVBREVSX0tJTkRfR1JPVVApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe3BoYXNlOiBycHMudmlzaWJsZUdyb3VwUGFuZWxQaGFzZX0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICAvLyBpbmxpbmUgc3R5bGUgYXMgdGhpcyB3aWxsIGJlIHN3YXBwZWQgYXJvdW5kIGluIGZ1dHVyZSBjb21taXRzXG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIm14X0hlYWRlckJ1dHRvbnNcIiByb2xlPVwidGFibGlzdFwiPlxuICAgICAgICAgICAge3RoaXMucmVuZGVyQnV0dG9ucygpfVxuICAgICAgICA8L2Rpdj47XG4gICAgfVxufVxuIl19