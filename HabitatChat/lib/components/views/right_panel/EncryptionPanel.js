"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _EncryptionInfo = _interopRequireDefault(require("./EncryptionInfo"));

var _VerificationPanel = _interopRequireDefault(require("./VerificationPanel"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _createRoom = require("../../../createRoom");

var _useEventEmitter = require("../../../hooks/useEventEmitter");

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _VerificationRequest = require("matrix-js-sdk/src/crypto/verification/request/VerificationRequest");

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

/*
Copyright 2019, 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// cancellation codes which constitute a key mismatch
const MISMATCHES = ["m.key_mismatch", "m.user_error", "m.mismatched_sas"];

const EncryptionPanel = props => {
  const {
    verificationRequest,
    verificationRequestPromise,
    member,
    onClose,
    layout,
    isRoomEncrypted
  } = props;
  const [request, setRequest] = (0, _react.useState)(verificationRequest); // state to show a spinner immediately after clicking "start verification",
  // before we have a request

  const [isRequesting, setRequesting] = (0, _react.useState)(false);
  const [phase, setPhase] = (0, _react.useState)(request && request.phase);
  (0, _react.useEffect)(() => {
    setRequest(verificationRequest);

    if (verificationRequest) {
      setRequesting(false);
      setPhase(verificationRequest.phase);
    }
  }, [verificationRequest]);
  (0, _react.useEffect)(() => {
    async function awaitPromise() {
      setRequesting(true);
      const request = await verificationRequestPromise;
      setRequesting(false);
      setRequest(request);
      setPhase(request.phase);
    }

    if (verificationRequestPromise) {
      awaitPromise();
    }
  }, [verificationRequestPromise]);
  const changeHandler = (0, _react.useCallback)(() => {
    // handle transitions -> cancelled for mismatches which fire a modal instead of showing a card
    if (request && request.cancelled && MISMATCHES.includes(request.cancellationCode)) {
      const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

      _Modal.default.createTrackedDialog("Verification failed", "insecure", ErrorDialog, {
        headerImage: require("../../../../res/img/e2e/warning.svg"),
        title: (0, _languageHandler._t)("Your messages are not secure"),
        description: /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("One of the following may be compromised:"), /*#__PURE__*/_react.default.createElement("ul", null, /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Your homeserver")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("The homeserver the user you’re verifying is connected to")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Yours, or the other users’ internet connection")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Yours, or the other users’ session")))),
        onFinished: onClose
      });

      return; // don't update phase here as we will be transitioning away from this view shortly
    }

    if (request) {
      setPhase(request.phase);
    }
  }, [onClose, request]);
  (0, _useEventEmitter.useEventEmitter)(request, "change", changeHandler);
  const onCancel = (0, _react.useCallback)(function () {
    if (request) {
      request.cancel();
    }
  }, [request]);
  let cancelButton;

  if (layout !== "dialog" && request && request.pending) {
    const AccessibleButton = sdk.getComponent("elements.AccessibleButton");
    cancelButton = /*#__PURE__*/_react.default.createElement(AccessibleButton, {
      className: "mx_EncryptionPanel_cancel",
      onClick: onCancel,
      title: (0, _languageHandler._t)('Cancel')
    });
  }

  const onStartVerification = (0, _react.useCallback)(async () => {
    setRequesting(true);

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const roomId = await (0, _createRoom.ensureDMExists)(cli, member.userId);
    const verificationRequest = await cli.requestVerificationDM(member.userId, roomId);
    setRequest(verificationRequest);
    setPhase(verificationRequest.phase);
  }, [member.userId]);
  const requested = !request && isRequesting || request && (phase === _VerificationRequest.PHASE_REQUESTED || phase === _VerificationRequest.PHASE_UNSENT || phase === undefined);
  const isSelfVerification = request ? request.isSelfVerification : member.userId === _MatrixClientPeg.MatrixClientPeg.get().getUserId();

  if (!request || requested) {
    const initiatedByMe = !request && isRequesting || request && request.initiatedByMe;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, cancelButton, /*#__PURE__*/_react.default.createElement(_EncryptionInfo.default, {
      isRoomEncrypted: isRoomEncrypted,
      onStartVerification: onStartVerification,
      member: member,
      isSelfVerification: isSelfVerification,
      waitingForOtherParty: requested && initiatedByMe,
      waitingForNetwork: requested && !initiatedByMe,
      inDialog: layout === "dialog"
    }));
  } else {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, cancelButton, /*#__PURE__*/_react.default.createElement(_VerificationPanel.default, {
      isRoomEncrypted: isRoomEncrypted,
      layout: layout,
      onClose: onClose,
      member: member,
      request: request,
      key: request.channel.transactionId,
      inDialog: layout === "dialog",
      phase: phase
    }));
  }
};

EncryptionPanel.propTypes = {
  member: _propTypes.default.object.isRequired,
  onClose: _propTypes.default.func.isRequired,
  verificationRequest: _propTypes.default.object,
  layout: _propTypes.default.string,
  inDialog: _propTypes.default.bool
};
var _default = EncryptionPanel;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,