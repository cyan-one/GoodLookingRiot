"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _MessageEvent = _interopRequireDefault(require("../messages/MessageEvent"));

var _MemberAvatar = _interopRequireDefault(require("../avatars/MemberAvatar"));

var _languageHandler = require("../../../languageHandler");

var _DateUtils = require("../../../DateUtils");

/*
Copyright 2017 Travis Ralston

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var _default = (0, _createReactClass.default)({
  displayName: 'PinnedEventTile',
  propTypes: {
    mxRoom: _propTypes.default.object.isRequired,
    mxEvent: _propTypes.default.object.isRequired,
    onUnpinned: _propTypes.default.func
  },
  onTileClicked: function () {
    _dispatcher.default.dispatch({
      action: 'view_room',
      event_id: this.props.mxEvent.getId(),
      highlighted: true,
      room_id: this.props.mxEvent.getRoomId()
    });
  },
  onUnpinClicked: function () {
    const pinnedEvents = this.props.mxRoom.currentState.getStateEvents("m.room.pinned_events", "");

    if (!pinnedEvents || !pinnedEvents.getContent().pinned) {
      // Nothing to do: already unpinned
      if (this.props.onUnpinned) this.props.onUnpinned();
    } else {
      const pinned = pinnedEvents.getContent().pinned;
      const index = pinned.indexOf(this.props.mxEvent.getId());

      if (index !== -1) {
        pinned.splice(index, 1);

        _MatrixClientPeg.MatrixClientPeg.get().sendStateEvent(this.props.mxRoom.roomId, 'm.room.pinned_events', {
          pinned
        }, '').then(() => {
          if (this.props.onUnpinned) this.props.onUnpinned();
        });
      } else if (this.props.onUnpinned) this.props.onUnpinned();
    }
  },
  _canUnpin: function () {
    return this.props.mxRoom.currentState.mayClientSendStateEvent('m.room.pinned_events', _MatrixClientPeg.MatrixClientPeg.get());
  },
  render: function () {
    const sender = this.props.mxEvent.getSender(); // Get the latest sender profile rather than historical

    const senderProfile = this.props.mxRoom.getMember(sender);
    const avatarSize = 40;
    let unpinButton = null;

    if (this._canUnpin()) {
      unpinButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onUnpinClicked,
        className: "mx_PinnedEventTile_unpinButton"
      }, /*#__PURE__*/_react.default.createElement("img", {
        src: require("../../../../res/img/cancel-red.svg"),
        width: "8",
        height: "8",
        alt: (0, _languageHandler._t)('Unpin Message'),
        title: (0, _languageHandler._t)('Unpin Message')
      }));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_PinnedEventTile"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_PinnedEventTile_actions"
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_PinnedEventTile_gotoButton mx_textButton",
      onClick: this.onTileClicked
    }, (0, _languageHandler._t)("Jump to message")), unpinButton), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_PinnedEventTile_senderAvatar"
    }, /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
      member: senderProfile,
      width: avatarSize,
      height: avatarSize,
      fallbackUserId: sender
    })), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_PinnedEventTile_sender"
    }, senderProfile ? senderProfile.name : sender), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_PinnedEventTile_timestamp"
    }, (0, _DateUtils.formatFullDate)(new Date(this.props.mxEvent.getTs()))), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_PinnedEventTile_message"
    }, /*#__PURE__*/_react.default.createElement(_MessageEvent.default, {
      mxEvent: this.props.mxEvent,
      className: "mx_PinnedEventTile_body",
      maxImageHeight: 150,
      onHeightChanged: () => {} // we need to give this, apparently

    })));
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,