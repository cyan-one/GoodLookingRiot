"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

/*
Copyright 2018 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var _default = (0, _createReactClass.default)({
  displayName: 'RoomUpgradeWarningBar',
  propTypes: {
    room: _propTypes.default.object.isRequired,
    recommendation: _propTypes.default.object.isRequired
  },
  componentDidMount: function () {
    const tombstone = this.props.room.currentState.getStateEvents("m.room.tombstone", "");
    this.setState({
      upgraded: tombstone && tombstone.getContent().replacement_room
    });

    _MatrixClientPeg.MatrixClientPeg.get().on("RoomState.events", this._onStateEvents);
  },
  _onStateEvents: function (event, state) {
    if (!this.props.room || event.getRoomId() !== this.props.room.roomId) {
      return;
    }

    if (event.getType() !== "m.room.tombstone") return;
    const tombstone = this.props.room.currentState.getStateEvents("m.room.tombstone", "");
    this.setState({
      upgraded: tombstone && tombstone.getContent().replacement_room
    });
  },
  onUpgradeClick: function () {
    const RoomUpgradeDialog = sdk.getComponent('dialogs.RoomUpgradeDialog');

    _Modal.default.createTrackedDialog('Upgrade Room Version', '', RoomUpgradeDialog, {
      room: this.props.room
    });
  },
  render: function () {
    const AccessibleButton = sdk.getComponent('elements.AccessibleButton');

    let doUpgradeWarnings = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomUpgradeWarningBar_body"
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Upgrading this room will shut down the current instance of the room and create " + "an upgraded room with the same name.")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("<b>Warning</b>: Upgrading a room will <i>not automatically migrate room members " + "to the new version of the room.</i> We'll post a link to the new room in the old " + "version of the room - room members will have to click this link to join the new room.", {}, {
      "b": sub => /*#__PURE__*/_react.default.createElement("b", null, sub),
      "i": sub => /*#__PURE__*/_react.default.createElement("i", null, sub)
    }))), /*#__PURE__*/_react.default.createElement("p", {
      className: "mx_RoomUpgradeWarningBar_upgradelink"
    }, /*#__PURE__*/_react.default.createElement(AccessibleButton, {
      onClick: this.onUpgradeClick
    }, (0, _languageHandler._t)("Upgrade this room to the recommended room version"))));

    if (this.state.upgraded) {
      doUpgradeWarnings = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomUpgradeWarningBar_body"
      }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("This room has already been upgraded.")));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomUpgradeWarningBar"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomUpgradeWarningBar_wrapped"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomUpgradeWarningBar_header"
    }, (0, _languageHandler._t)("This room is running room version <roomVersion />, which this homeserver has " + "marked as <i>unstable</i>.", {}, {
      "roomVersion": () => /*#__PURE__*/_react.default.createElement("code", null, this.props.room.getVersion()),
      "i": sub => /*#__PURE__*/_react.default.createElement("i", null, sub)
    })), doUpgradeWarnings, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomUpgradeWarningBar_small"
    }, (0, _languageHandler._t)("Only room administrators will see this warning"))));
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,