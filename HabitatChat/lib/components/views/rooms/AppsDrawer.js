"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _AppTile = _interopRequireDefault(require("../elements/AppTile"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var sdk = _interopRequireWildcard(require("../../../index"));

var ScalarMessaging = _interopRequireWildcard(require("../../../ScalarMessaging"));

var _languageHandler = require("../../../languageHandler");

var _WidgetUtils = _interopRequireDefault(require("../../../utils/WidgetUtils"));

var _WidgetEchoStore = _interopRequireDefault(require("../../../stores/WidgetEchoStore"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _IntegrationManagers = require("../../../integrations/IntegrationManagers");

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

/*
Copyright 2017 Vector Creations Ltd
Copyright 2018 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// The maximum number of widgets that can be added in a room
const MAX_WIDGETS = 2;

var _default = (0, _createReactClass.default)({
  displayName: 'AppsDrawer',
  propTypes: {
    userId: _propTypes.default.string.isRequired,
    room: _propTypes.default.object.isRequired,
    showApps: _propTypes.default.bool,
    // Should apps be rendered
    hide: _propTypes.default.bool // If rendered, should apps drawer be visible

  },
  getDefaultProps: () => ({
    showApps: true,
    hide: false
  }),
  getInitialState: function () {
    return {
      apps: this._getApps()
    };
  },
  componentDidMount: function () {
    ScalarMessaging.startListening();

    _MatrixClientPeg.MatrixClientPeg.get().on('RoomState.events', this.onRoomStateEvents);

    _WidgetEchoStore.default.on('update', this._updateApps);

    this.dispatcherRef = _dispatcher.default.register(this.onAction);
  },
  componentWillUnmount: function () {
    ScalarMessaging.stopListening();

    if (_MatrixClientPeg.MatrixClientPeg.get()) {
      _MatrixClientPeg.MatrixClientPeg.get().removeListener('RoomState.events', this.onRoomStateEvents);
    }

    _WidgetEchoStore.default.removeListener('update', this._updateApps);

    if (this.dispatcherRef) _dispatcher.default.unregister(this.dispatcherRef);
  },

  // TODO: [REACT-WARNING] Replace with appropriate lifecycle event
  UNSAFE_componentWillReceiveProps(newProps) {
    // Room has changed probably, update apps
    this._updateApps();
  },

  onAction: function (action) {
    const hideWidgetKey = this.props.room.roomId + '_hide_widget_drawer';

    switch (action.action) {
      case 'appsDrawer':
        // Note: these booleans are awkward because localstorage is fundamentally
        // string-based. We also do exact equality on the strings later on.
        if (action.show) {
          localStorage.setItem(hideWidgetKey, "false");
        } else {
          // Store hidden state of widget
          // Don't show if previously hidden
          localStorage.setItem(hideWidgetKey, "true");
        }

        break;
    }
  },
  onRoomStateEvents: function (ev, state) {
    if (ev.getRoomId() !== this.props.room.roomId || ev.getType() !== 'im.vector.modular.widgets') {
      return;
    }

    this._updateApps();
  },
  _getApps: function () {
    const widgets = _WidgetEchoStore.default.getEchoedRoomWidgets(this.props.room.roomId, _WidgetUtils.default.getRoomWidgets(this.props.room));

    return widgets.map(ev => {
      return _WidgetUtils.default.makeAppConfig(ev.getStateKey(), ev.getContent(), ev.getSender(), ev.getRoomId(), ev.getId());
    });
  },
  _updateApps: function () {
    const apps = this._getApps();

    this.setState({
      apps: apps
    });
  },
  _canUserModify: function () {
    try {
      return _WidgetUtils.default.canUserModifyWidgets(this.props.room.roomId);
    } catch (err) {
      console.error(err);
      return false;
    }
  },
  _launchManageIntegrations: function () {
    if (_SettingsStore.default.isFeatureEnabled("feature_many_integration_managers")) {
      _IntegrationManagers.IntegrationManagers.sharedInstance().openAll();
    } else {
      _IntegrationManagers.IntegrationManagers.sharedInstance().getPrimaryManager().open(this.props.room, 'add_integ');
    }
  },
  onClickAddWidget: function (e) {
    e.preventDefault(); // Display a warning dialog if the max number of widgets have already been added to the room

    const apps = this._getApps();

    if (apps && apps.length >= MAX_WIDGETS) {
      const ErrorDialog = sdk.getComponent('dialogs.ErrorDialog');
      const errorMsg = "The maximum number of ".concat(MAX_WIDGETS, " widgets have already been added to this room.");
      console.error(errorMsg);

      _Modal.default.createDialog(ErrorDialog, {
        title: (0, _languageHandler._t)('Cannot add any more widgets'),
        description: (0, _languageHandler._t)('The maximum permitted number of widgets have already been added to this room.')
      });

      return;
    }

    this._launchManageIntegrations();
  },
  render: function () {
    const apps = this.state.apps.map((app, index, arr) => {
      const capWhitelist = _WidgetUtils.default.getCapWhitelistForAppTypeInRoomId(app.type, this.props.room.roomId);

      return /*#__PURE__*/_react.default.createElement(_AppTile.default, {
        key: app.id,
        app: app,
        fullWidth: arr.length < 2 ? true : false,
        room: this.props.room,
        userId: this.props.userId,
        show: this.props.showApps,
        creatorUserId: app.creatorUserId,
        widgetPageTitle: app.data && app.data.title ? app.data.title : '',
        waitForIframeLoad: app.waitForIframeLoad,
        whitelistCapabilities: capWhitelist
      });
    });

    if (apps.length == 0) {
      return /*#__PURE__*/_react.default.createElement("div", null);
    }

    let addWidget;

    if (this.props.showApps && this._canUserModify()) {
      addWidget = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        onClick: this.onClickAddWidget,
        className: this.state.apps.length < 2 ? 'mx_AddWidget_button mx_AddWidget_button_full_width' : 'mx_AddWidget_button',
        title: (0, _languageHandler._t)('Add a widget')
      }, "[+] ", (0, _languageHandler._t)('Add a widget'));
    }

    let spinner;

    if (apps.length === 0 && _WidgetEchoStore.default.roomHasPendingWidgets(this.props.room.roomId, _WidgetUtils.default.getRoomWidgets(this.props.room))) {
      const Loader = sdk.getComponent("elements.Spinner");
      spinner = /*#__PURE__*/_react.default.createElement(Loader, null);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: 'mx_AppsDrawer' + (this.props.hide ? ' mx_AppsDrawer_hidden' : '')
    }, /*#__PURE__*/_react.default.createElement("div", {
      id: "apps",
      className: "mx_AppsContainer"
    }, apps, spinner), this._canUserModify() && addWidget);
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,