"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _languageHandler = require("../../../languageHandler");

var _classnames = _interopRequireDefault(require("classnames"));

var _E2EIcon = _interopRequireDefault(require("./E2EIcon"));

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2018 New Vector Ltd
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const PRESENCE_CLASS = {
  "offline": "mx_EntityTile_offline",
  "online": "mx_EntityTile_online",
  "unavailable": "mx_EntityTile_unavailable"
};

function presenceClassForMember(presenceState, lastActiveAgo, showPresence) {
  if (showPresence === false) {
    return 'mx_EntityTile_online_beenactive';
  } // offline is split into two categories depending on whether we have
  // a last_active_ago for them.


  if (presenceState == 'offline') {
    if (lastActiveAgo) {
      return PRESENCE_CLASS['offline'] + '_beenactive';
    } else {
      return PRESENCE_CLASS['offline'] + '_neveractive';
    }
  } else if (presenceState) {
    return PRESENCE_CLASS[presenceState];
  } else {
    return PRESENCE_CLASS['offline'] + '_neveractive';
  }
}

const EntityTile = (0, _createReactClass.default)({
  displayName: 'EntityTile',
  propTypes: {
    name: _propTypes.default.string,
    title: _propTypes.default.string,
    avatarJsx: _propTypes.default.any,
    // <BaseAvatar />
    className: _propTypes.default.string,
    presenceState: _propTypes.default.string,
    presenceLastActiveAgo: _propTypes.default.number,
    presenceLastTs: _propTypes.default.number,
    presenceCurrentlyActive: _propTypes.default.bool,
    showInviteButton: _propTypes.default.bool,
    shouldComponentUpdate: _propTypes.default.func,
    onClick: _propTypes.default.func,
    suppressOnHover: _propTypes.default.bool,
    showPresence: _propTypes.default.bool,
    subtextLabel: _propTypes.default.string,
    e2eStatus: _propTypes.default.string
  },
  getDefaultProps: function () {
    return {
      shouldComponentUpdate: function (nextProps, nextState) {
        return true;
      },
      onClick: function () {},
      presenceState: "offline",
      presenceLastActiveAgo: 0,
      presenceLastTs: 0,
      showInviteButton: false,
      suppressOnHover: false,
      showPresence: true
    };
  },
  getInitialState: function () {
    return {
      hover: false
    };
  },
  shouldComponentUpdate: function (nextProps, nextState) {
    if (this.state.hover !== nextState.hover) return true;
    return this.props.shouldComponentUpdate(nextProps, nextState);
  },
  render: function () {
    const mainClassNames = {
      "mx_EntityTile": true,
      "mx_EntityTile_noHover": this.props.suppressOnHover
    };
    if (this.props.className) mainClassNames[this.props.className] = true;
    const presenceClass = presenceClassForMember(this.props.presenceState, this.props.presenceLastActiveAgo, this.props.showPresence);
    mainClassNames[presenceClass] = true;
    let nameEl;
    const {
      name
    } = this.props;

    if (!this.props.suppressOnHover) {
      const activeAgo = this.props.presenceLastActiveAgo ? Date.now() - (this.props.presenceLastTs - this.props.presenceLastActiveAgo) : -1;
      const PresenceLabel = sdk.getComponent("rooms.PresenceLabel");
      let presenceLabel = null;

      if (this.props.showPresence) {
        presenceLabel = /*#__PURE__*/_react.default.createElement(PresenceLabel, {
          activeAgo: activeAgo,
          currentlyActive: this.props.presenceCurrentlyActive,
          presenceState: this.props.presenceState
        });
      }

      if (this.props.subtextLabel) {
        presenceLabel = /*#__PURE__*/_react.default.createElement("span", {
          className: "mx_EntityTile_subtext"
        }, this.props.subtextLabel);
      }

      nameEl = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_EntityTile_details"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_EntityTile_name",
        dir: "auto"
      }, name), presenceLabel);
    } else if (this.props.subtextLabel) {
      nameEl = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_EntityTile_details"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_EntityTile_name",
        dir: "auto"
      }, name), /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_EntityTile_subtext"
      }, this.props.subtextLabel));
    } else {
      nameEl = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_EntityTile_name",
        dir: "auto"
      }, name);
    }

    let inviteButton;

    if (this.props.showInviteButton) {
      inviteButton = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_EntityTile_invite"
      }, /*#__PURE__*/_react.default.createElement("img", {
        src: require("../../../../res/img/plus.svg"),
        width: "16",
        height: "16"
      }));
    }

    let powerLabel;
    const powerStatus = this.props.powerStatus;

    if (powerStatus) {
      const powerText = {
        [EntityTile.POWER_STATUS_MODERATOR]: (0, _languageHandler._t)("Mod"),
        [EntityTile.POWER_STATUS_ADMIN]: (0, _languageHandler._t)("Admin")
      }[powerStatus];
      powerLabel = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_EntityTile_power"
      }, powerText);
    }

    let e2eIcon;
    const {
      e2eStatus
    } = this.props;

    if (e2eStatus) {
      e2eIcon = /*#__PURE__*/_react.default.createElement(_E2EIcon.default, {
        status: e2eStatus,
        isUser: true
      });
    }

    const BaseAvatar = sdk.getComponent('avatars.BaseAvatar');

    const av = this.props.avatarJsx || /*#__PURE__*/_react.default.createElement(BaseAvatar, {
      name: this.props.name,
      width: 36,
      height: 36,
      "aria-hidden": "true"
    }); // The wrapping div is required to make the magic mouse listener work, for some reason.


    return /*#__PURE__*/_react.default.createElement("div", {
      ref: c => this.container = c
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: (0, _classnames.default)(mainClassNames),
      title: this.props.title,
      onClick: this.props.onClick
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EntityTile_avatar"
    }, av, e2eIcon), nameEl, powerLabel, inviteButton));
  }
});
EntityTile.POWER_STATUS_MODERATOR = "moderator";
EntityTile.POWER_STATUS_ADMIN = "admin";
var _default = EntityTile;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,