"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

require("../../../VelocityBounce");

var _languageHandler = require("../../../languageHandler");

var _DateUtils = require("../../../DateUtils");

var _Velociraptor = _interopRequireDefault(require("../../../Velociraptor"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _rem = _interopRequireDefault(require("../../../utils/rem"));

/*
Copyright 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
let bounce = false;

try {
  if (global.localStorage) {
    bounce = global.localStorage.getItem('avatar_bounce') == 'true';
  }
} catch (e) {}

var _default = (0, _createReactClass.default)({
  displayName: 'ReadReceiptMarker',
  propTypes: {
    // the RoomMember to show the RR for
    member: _propTypes.default.object,
    // userId to fallback the avatar to
    // if the member hasn't been loaded yet
    fallbackUserId: _propTypes.default.string.isRequired,
    // number of pixels to offset the avatar from the right of its parent;
    // typically a negative value.
    leftOffset: _propTypes.default.number,
    // true to hide the avatar (it will still be animated)
    hidden: _propTypes.default.bool,
    // don't animate this RR into position
    suppressAnimation: _propTypes.default.bool,
    // an opaque object for storing information about this user's RR in
    // this room
    readReceiptInfo: _propTypes.default.object,
    // A function which is used to check if the parent panel is being
    // unmounted, to avoid unnecessary work. Should return true if we
    // are being unmounted.
    checkUnmounting: _propTypes.default.func,
    // callback for clicks on this RR
    onClick: _propTypes.default.func,
    // Timestamp when the receipt was read
    timestamp: _propTypes.default.number,
    // True to show twelve hour format, false otherwise
    showTwelveHour: _propTypes.default.bool
  },
  getDefaultProps: function () {
    return {
      leftOffset: 0
    };
  },
  getInitialState: function () {
    // if we are going to animate the RR, we don't show it on first render,
    // and instead just add a placeholder to the DOM; once we've been
    // mounted, we start an animation which moves the RR from its old
    // position.
    return {
      suppressDisplay: !this.props.suppressAnimation
    };
  },
  // TODO: [REACT-WARNING] Replace component with real class, use constructor for refs
  UNSAFE_componentWillMount: function () {
    this._avatar = (0, _react.createRef)();
  },
  componentWillUnmount: function () {
    // before we remove the rr, store its location in the map, so that if
    // it reappears, it can be animated from the right place.
    const rrInfo = this.props.readReceiptInfo;

    if (!rrInfo) {
      return;
    } // checking the DOM properties can force a re-layout, which can be
    // quite expensive; so if the parent messagepanel is being unmounted,
    // then don't bother with this.


    if (this.props.checkUnmounting && this.props.checkUnmounting()) {
      return;
    }

    const avatarNode = this._avatar.current;
    rrInfo.top = avatarNode.offsetTop;
    rrInfo.left = avatarNode.offsetLeft;
    rrInfo.parent = avatarNode.offsetParent;
  },
  componentDidMount: function () {
    if (!this.state.suppressDisplay) {
      // we've already done our display - nothing more to do.
      return;
    } // treat new RRs as though they were off the top of the screen


    let oldTop = -15;
    const oldInfo = this.props.readReceiptInfo;

    if (oldInfo && oldInfo.parent) {
      oldTop = oldInfo.top + oldInfo.parent.getBoundingClientRect().top;
    }

    const newElement = this._avatar.current;
    let startTopOffset;

    if (!newElement.offsetParent) {
      // this seems to happen sometimes for reasons I don't understand
      // the docs for `offsetParent` say it may be null if `display` is
      // `none`, but I can't see why that would happen.
      console.warn("ReadReceiptMarker for ".concat(this.props.fallbackUserId, " in has no offsetParent"));
      startTopOffset = 0;
    } else {
      startTopOffset = oldTop - newElement.offsetParent.getBoundingClientRect().top;
    }

    const startStyles = [];
    const enterTransitionOpts = [];

    if (oldInfo && oldInfo.left) {
      // start at the old height and in the old h pos
      startStyles.push({
        top: startTopOffset + "px",
        left: (0, _rem.default)(oldInfo.left)
      });
      const reorderTransitionOpts = {
        duration: 100,
        easing: 'easeOut'
      };
      enterTransitionOpts.push(reorderTransitionOpts);
    } // then shift to the rightmost column,
    // and then it will drop down to its resting position


    startStyles.push({
      top: startTopOffset + 'px',
      left: '0px'
    });
    enterTransitionOpts.push({
      duration: bounce ? Math.min(Math.log(Math.abs(startTopOffset)) * 200, 3000) : 300,
      easing: bounce ? 'easeOutBounce' : 'easeOutCubic'
    });
    this.setState({
      suppressDisplay: false,
      startStyles: startStyles,
      enterTransitionOpts: enterTransitionOpts
    });
  },
  render: function () {
    const MemberAvatar = sdk.getComponent('avatars.MemberAvatar');

    if (this.state.suppressDisplay) {
      return /*#__PURE__*/_react.default.createElement("div", {
        ref: this._avatar
      });
    }

    const style = {
      left: (0, _rem.default)(this.props.leftOffset),
      top: '0px',
      visibility: this.props.hidden ? 'hidden' : 'visible'
    };
    let title;

    if (this.props.timestamp) {
      const dateString = (0, _DateUtils.formatDate)(new Date(this.props.timestamp), this.props.showTwelveHour);

      if (!this.props.member || this.props.fallbackUserId === this.props.member.rawDisplayName) {
        title = (0, _languageHandler._t)("Seen by %(userName)s at %(dateTime)s", {
          userName: this.props.fallbackUserId,
          dateTime: dateString
        });
      } else {
        title = (0, _languageHandler._t)("Seen by %(displayName)s (%(userName)s) at %(dateTime)s", {
          displayName: this.props.member.rawDisplayName,
          userName: this.props.fallbackUserId,
          dateTime: dateString
        });
      }
    }

    return /*#__PURE__*/_react.default.createElement(_Velociraptor.default, {
      startStyles: this.state.startStyles,
      enterTransitionOpts: this.state.enterTransitionOpts
    }, /*#__PURE__*/_react.default.createElement(MemberAvatar, {
      member: this.props.member,
      fallbackUserId: this.props.fallbackUserId,
      "aria-hidden": "true",
      width: 14,
      height: 14,
      resizeMethod: "crop",
      style: style,
      title: title,
      onClick: this.props.onClick,
      inputRef: this._avatar
    }));
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,