"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.E2E_STATE = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _languageHandler = require("../../../languageHandler");

var _useSettings = require("../../../hooks/useSettings");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _Tooltip = _interopRequireDefault(require("../elements/Tooltip"));

/*
Copyright 2019 New Vector Ltd
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const E2E_STATE = {
  VERIFIED: "verified",
  WARNING: "warning",
  UNKNOWN: "unknown",
  NORMAL: "normal"
};
exports.E2E_STATE = E2E_STATE;
const crossSigningUserTitles = {
  [E2E_STATE.WARNING]: (0, _languageHandler._td)("This user has not verified all of their sessions."),
  [E2E_STATE.NORMAL]: (0, _languageHandler._td)("You have not verified this user."),
  [E2E_STATE.VERIFIED]: (0, _languageHandler._td)("You have verified this user. This user has verified all of their sessions.")
};
const crossSigningRoomTitles = {
  [E2E_STATE.WARNING]: (0, _languageHandler._td)("Someone is using an unknown session"),
  [E2E_STATE.NORMAL]: (0, _languageHandler._td)("This room is end-to-end encrypted"),
  [E2E_STATE.VERIFIED]: (0, _languageHandler._td)("Everyone in this room is verified")
};
const legacyUserTitles = {
  [E2E_STATE.WARNING]: (0, _languageHandler._td)("Some sessions for this user are not trusted"),
  [E2E_STATE.VERIFIED]: (0, _languageHandler._td)("All sessions for this user are trusted")
};
const legacyRoomTitles = {
  [E2E_STATE.WARNING]: (0, _languageHandler._td)("Some sessions in this encrypted room are not trusted"),
  [E2E_STATE.VERIFIED]: (0, _languageHandler._td)("All sessions in this encrypted room are trusted")
};

const E2EIcon = ({
  isUser,
  status,
  className,
  size,
  onClick,
  hideTooltip
}) => {
  const [hover, setHover] = (0, _react.useState)(false);
  const classes = (0, _classnames.default)({
    mx_E2EIcon: true,
    mx_E2EIcon_warning: status === E2E_STATE.WARNING,
    mx_E2EIcon_normal: status === E2E_STATE.NORMAL,
    mx_E2EIcon_verified: status === E2E_STATE.VERIFIED
  }, className);
  let e2eTitle;
  const crossSigning = (0, _useSettings.useSettingValue)("feature_cross_signing");

  if (crossSigning && isUser) {
    e2eTitle = crossSigningUserTitles[status];
  } else if (crossSigning && !isUser) {
    e2eTitle = crossSigningRoomTitles[status];
  } else if (!crossSigning && isUser) {
    e2eTitle = legacyUserTitles[status];
  } else if (!crossSigning && !isUser) {
    e2eTitle = legacyRoomTitles[status];
  }

  let style;

  if (size) {
    style = {
      width: "".concat(size, "px"),
      height: "".concat(size, "px")
    };
  }

  const onMouseOver = () => setHover(true);

  const onMouseOut = () => setHover(false);

  let tip;

  if (hover && !hideTooltip) {
    tip = /*#__PURE__*/_react.default.createElement(_Tooltip.default, {
      label: e2eTitle ? (0, _languageHandler._t)(e2eTitle) : ""
    });
  }

  if (onClick) {
    return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      onClick: onClick,
      onMouseOver: onMouseOver,
      onMouseOut: onMouseOut,
      className: classes,
      style: style
    }, tip);
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    onMouseOver: onMouseOver,
    onMouseOut: onMouseOut,
    className: classes,
    style: style
  }, tip);
};

E2EIcon.propTypes = {
  isUser: _propTypes.default.bool,
  status: _propTypes.default.oneOf(Object.values(E2E_STATE)),
  className: _propTypes.default.string,
  size: _propTypes.default.number,
  onClick: _propTypes.default.func
};
var _default = E2EIcon;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,