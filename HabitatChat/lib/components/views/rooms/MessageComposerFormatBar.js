"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _languageHandler = require("../../../languageHandler");

var sdk = _interopRequireWildcard(require("../../../index"));

var _classnames = _interopRequireDefault(require("classnames"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

/*
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class MessageComposerFormatBar extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      visible: false
    };
  }

  render() {
    const classes = (0, _classnames.default)("mx_MessageComposerFormatBar", {
      "mx_MessageComposerFormatBar_shown": this.state.visible
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes,
      ref: ref => this._formatBarRef = ref
    }, /*#__PURE__*/_react.default.createElement(FormatButton, {
      label: (0, _languageHandler._t)("Bold"),
      onClick: () => this.props.onAction("bold"),
      icon: "Bold",
      shortcut: this.props.shortcuts.bold,
      visible: this.state.visible
    }), /*#__PURE__*/_react.default.createElement(FormatButton, {
      label: (0, _languageHandler._t)("Italics"),
      onClick: () => this.props.onAction("italics"),
      icon: "Italic",
      shortcut: this.props.shortcuts.italics,
      visible: this.state.visible
    }), /*#__PURE__*/_react.default.createElement(FormatButton, {
      label: (0, _languageHandler._t)("Strikethrough"),
      onClick: () => this.props.onAction("strikethrough"),
      icon: "Strikethrough",
      visible: this.state.visible
    }), /*#__PURE__*/_react.default.createElement(FormatButton, {
      label: (0, _languageHandler._t)("Code block"),
      onClick: () => this.props.onAction("code"),
      icon: "Code",
      visible: this.state.visible
    }), /*#__PURE__*/_react.default.createElement(FormatButton, {
      label: (0, _languageHandler._t)("Quote"),
      onClick: () => this.props.onAction("quote"),
      icon: "Quote",
      shortcut: this.props.shortcuts.quote,
      visible: this.state.visible
    }));
  }

  showAt(selectionRect) {
    this.setState({
      visible: true
    });

    const parentRect = this._formatBarRef.parentElement.getBoundingClientRect();

    this._formatBarRef.style.left = "".concat(selectionRect.left - parentRect.left, "px"); // 12 is half the height of the bar (e.g. to center it) and 16 is an offset that felt ok.

    this._formatBarRef.style.top = "".concat(selectionRect.top - parentRect.top - 16 - 12, "px");
  }

  hide() {
    this.setState({
      visible: false
    });
  }

}

exports.default = MessageComposerFormatBar;
(0, _defineProperty2.default)(MessageComposerFormatBar, "propTypes", {
  onAction: _propTypes.default.func.isRequired,
  shortcuts: _propTypes.default.object.isRequired
});

class FormatButton extends _react.default.PureComponent {
  render() {
    const InteractiveTooltip = sdk.getComponent('elements.InteractiveTooltip');
    const className = "mx_MessageComposerFormatBar_button mx_MessageComposerFormatBar_buttonIcon".concat(this.props.icon);
    let shortcut;

    if (this.props.shortcut) {
      shortcut = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MessageComposerFormatBar_tooltipShortcut"
      }, this.props.shortcut);
    }

    const tooltipContent = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MessageComposerFormatBar_buttonTooltip"
    }, /*#__PURE__*/_react.default.createElement("div", null, this.props.label), shortcut);

    return /*#__PURE__*/_react.default.createElement(InteractiveTooltip, {
      content: tooltipContent,
      forceHidden: !this.props.visible
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      as: "span",
      role: "button",
      onClick: this.props.onClick,
      "aria-label": this.props.label,
      className: className
    }));
  }

}

(0, _defineProperty2.default)(FormatButton, "propTypes", {
  label: _propTypes.default.string.isRequired,
  onClick: _propTypes.default.func.isRequired,
  icon: _propTypes.default.string.isRequired,
  shortcut: _propTypes.default.string,
  visible: _propTypes.default.bool
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,