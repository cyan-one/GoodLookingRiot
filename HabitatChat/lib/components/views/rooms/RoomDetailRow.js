"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDisplayAliasForRoom = getDisplayAliasForRoom;
exports.default = exports.roomShape = void 0;

var sdk = _interopRequireWildcard(require("../../../index"));

var _react = _interopRequireWildcard(require("react"));

var _languageHandler = require("../../../languageHandler");

var _HtmlUtils = require("../../../HtmlUtils");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _contentRepo = require("matrix-js-sdk/src/content-repo");

/*
Copyright 2017 New Vector Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function getDisplayAliasForRoom(room) {
  return room.canonicalAlias || (room.aliases ? room.aliases[0] : "");
}

const roomShape = _propTypes.default.shape({
  name: _propTypes.default.string,
  topic: _propTypes.default.string,
  roomId: _propTypes.default.string,
  avatarUrl: _propTypes.default.string,
  numJoinedMembers: _propTypes.default.number,
  canonicalAlias: _propTypes.default.string,
  aliases: _propTypes.default.arrayOf(_propTypes.default.string),
  worldReadable: _propTypes.default.bool,
  guestCanJoin: _propTypes.default.bool
});

exports.roomShape = roomShape;

var _default = (0, _createReactClass.default)({
  displayName: "RoomDetailRow",
  propTypes: {
    room: roomShape,
    // passes ev, room as args
    onClick: _propTypes.default.func,
    onMouseDown: _propTypes.default.func
  },
  _linkifyTopic: function () {
    if (this._topic.current) {
      (0, _HtmlUtils.linkifyElement)(this._topic.current);
    }
  },
  // TODO: [REACT-WARNING] Replace component with real class, use constructor for refs
  UNSAFE_componentWillMount: function () {
    this._topic = (0, _react.createRef)();
  },
  componentDidMount: function () {
    this._linkifyTopic();
  },
  componentDidUpdate: function () {
    this._linkifyTopic();
  },
  onClick: function (ev) {
    ev.preventDefault();

    if (this.props.onClick) {
      this.props.onClick(ev, this.props.room);
    }
  },
  onTopicClick: function (ev) {
    // When clicking a link in the topic, prevent the event being propagated
    // to `onClick`.
    ev.stopPropagation();
  },
  render: function () {
    const BaseAvatar = sdk.getComponent('avatars.BaseAvatar');
    const room = this.props.room;
    const name = room.name || getDisplayAliasForRoom(room) || (0, _languageHandler._t)('Unnamed room');
    const guestRead = room.worldReadable ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomDirectory_perm"
    }, (0, _languageHandler._t)('World readable')) : /*#__PURE__*/_react.default.createElement("div", null);
    const guestJoin = room.guestCanJoin ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomDirectory_perm"
    }, (0, _languageHandler._t)('Guests can join')) : /*#__PURE__*/_react.default.createElement("div", null);
    const perms = guestRead || guestJoin ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomDirectory_perms"
    }, guestRead, "\xA0", guestJoin) : /*#__PURE__*/_react.default.createElement("div", null);
    return /*#__PURE__*/_react.default.createElement("tr", {
      key: room.roomId,
      onClick: this.onClick,
      onMouseDown: this.props.onMouseDown
    }, /*#__PURE__*/_react.default.createElement("td", {
      className: "mx_RoomDirectory_roomAvatar"
    }, /*#__PURE__*/_react.default.createElement(BaseAvatar, {
      width: 24,
      height: 24,
      resizeMethod: "crop",
      name: name,
      idName: name,
      url: (0, _contentRepo.getHttpUriForMxc)(_MatrixClientPeg.MatrixClientPeg.get().getHomeserverUrl(), room.avatarUrl, 24, 24, "crop")
    })), /*#__PURE__*/_react.default.createElement("td", {
      className: "mx_RoomDirectory_roomDescription"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomDirectory_name"
    }, name), "\xA0", perms, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomDirectory_topic",
      ref: this._topic,
      onClick: this.onTopicClick
    }, room.topic), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomDirectory_alias"
    }, getDisplayAliasForRoom(room))), /*#__PURE__*/_react.default.createElement("td", {
      className: "mx_RoomDirectory_roomMemberCount"
    }, room.numJoinedMembers));
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,