"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../../../../../languageHandler");

var _SettingsStore = _interopRequireWildcard(require("../../../../../settings/SettingsStore"));

var _LabelledToggleSwitch = _interopRequireDefault(require("../../../elements/LabelledToggleSwitch"));

var _Field = _interopRequireDefault(require("../../../elements/Field"));

var sdk = _interopRequireWildcard(require("../../../../.."));

var _PlatformPeg = _interopRequireDefault(require("../../../../../PlatformPeg"));

/*
Copyright 2019 New Vector Ltd
Copyright 2019 Michael Telatynski <7t3chguy@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class PreferencesUserSettingsTab extends _react.default.Component {
  constructor() {
    super();
    (0, _defineProperty2.default)(this, "_onAutoLaunchChange", checked => {
      _PlatformPeg.default.get().setAutoLaunchEnabled(checked).then(() => this.setState({
        autoLaunch: checked
      }));
    });
    (0, _defineProperty2.default)(this, "_onAlwaysShowMenuBarChange", checked => {
      _PlatformPeg.default.get().setAutoHideMenuBarEnabled(!checked).then(() => this.setState({
        alwaysShowMenuBar: checked
      }));
    });
    (0, _defineProperty2.default)(this, "_onMinimizeToTrayChange", checked => {
      _PlatformPeg.default.get().setMinimizeToTrayEnabled(checked).then(() => this.setState({
        minimizeToTray: checked
      }));
    });
    (0, _defineProperty2.default)(this, "_onAutocompleteDelayChange", e => {
      this.setState({
        autocompleteDelay: e.target.value
      });

      _SettingsStore.default.setValue("autocompleteDelay", null, _SettingsStore.SettingLevel.DEVICE, e.target.value);
    });
    (0, _defineProperty2.default)(this, "_onReadMarkerInViewThresholdMs", e => {
      this.setState({
        readMarkerInViewThresholdMs: e.target.value
      });

      _SettingsStore.default.setValue("readMarkerInViewThresholdMs", null, _SettingsStore.SettingLevel.DEVICE, e.target.value);
    });
    (0, _defineProperty2.default)(this, "_onReadMarkerOutOfViewThresholdMs", e => {
      this.setState({
        readMarkerOutOfViewThresholdMs: e.target.value
      });

      _SettingsStore.default.setValue("readMarkerOutOfViewThresholdMs", null, _SettingsStore.SettingLevel.DEVICE, e.target.value);
    });
    this.state = {
      autoLaunch: false,
      autoLaunchSupported: false,
      alwaysShowMenuBar: true,
      alwaysShowMenuBarSupported: false,
      minimizeToTray: true,
      minimizeToTraySupported: false,
      autocompleteDelay: _SettingsStore.default.getValueAt(_SettingsStore.SettingLevel.DEVICE, 'autocompleteDelay').toString(10),
      readMarkerInViewThresholdMs: _SettingsStore.default.getValueAt(_SettingsStore.SettingLevel.DEVICE, 'readMarkerInViewThresholdMs').toString(10),
      readMarkerOutOfViewThresholdMs: _SettingsStore.default.getValueAt(_SettingsStore.SettingLevel.DEVICE, 'readMarkerOutOfViewThresholdMs').toString(10)
    };
  }

  async componentDidMount()
  /*: void*/
  {
    const platform = _PlatformPeg.default.get();

    const autoLaunchSupported = await platform.supportsAutoLaunch();
    let autoLaunch = false;

    if (autoLaunchSupported) {
      autoLaunch = await platform.getAutoLaunchEnabled();
    }

    const alwaysShowMenuBarSupported = await platform.supportsAutoHideMenuBar();
    let alwaysShowMenuBar = true;

    if (alwaysShowMenuBarSupported) {
      alwaysShowMenuBar = !(await platform.getAutoHideMenuBarEnabled());
    }

    const minimizeToTraySupported = await platform.supportsMinimizeToTray();
    let minimizeToTray = true;

    if (minimizeToTraySupported) {
      minimizeToTray = await platform.getMinimizeToTrayEnabled();
    }

    this.setState({
      autoLaunch,
      autoLaunchSupported,
      alwaysShowMenuBarSupported,
      alwaysShowMenuBar,
      minimizeToTraySupported,
      minimizeToTray
    });
  }

  _renderGroup(settingIds) {
    const SettingsFlag = sdk.getComponent("views.elements.SettingsFlag");
    return settingIds.map(i => /*#__PURE__*/_react.default.createElement(SettingsFlag, {
      key: i,
      name: i,
      level: _SettingsStore.SettingLevel.ACCOUNT
    }));
  }

  render() {
    let autoLaunchOption = null;

    if (this.state.autoLaunchSupported) {
      autoLaunchOption = /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
        value: this.state.autoLaunch,
        onChange: this._onAutoLaunchChange,
        label: (0, _languageHandler._t)('Start automatically after system login')
      });
    }

    let autoHideMenuOption = null;

    if (this.state.alwaysShowMenuBarSupported) {
      autoHideMenuOption = /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
        value: this.state.alwaysShowMenuBar,
        onChange: this._onAlwaysShowMenuBarChange,
        label: (0, _languageHandler._t)('Always show the window menu bar')
      });
    }

    let minimizeToTrayOption = null;

    if (this.state.minimizeToTraySupported) {
      minimizeToTrayOption = /*#__PURE__*/_react.default.createElement(_LabelledToggleSwitch.default, {
        value: this.state.minimizeToTray,
        onChange: this._onMinimizeToTrayChange,
        label: (0, _languageHandler._t)('Show tray icon and minimize window to it on close')
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab mx_PreferencesUserSettingsTab"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, (0, _languageHandler._t)("Preferences")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Room list")), this._renderGroup(PreferencesUserSettingsTab.ROOM_LIST_SETTINGS)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Composer")), this._renderGroup(PreferencesUserSettingsTab.COMPOSER_SETTINGS)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Timeline")), this._renderGroup(PreferencesUserSettingsTab.TIMELINE_SETTINGS)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Advanced")), this._renderGroup(PreferencesUserSettingsTab.ADVANCED_SETTINGS), minimizeToTrayOption, autoHideMenuOption, autoLaunchOption, /*#__PURE__*/_react.default.createElement(_Field.default, {
      label: (0, _languageHandler._t)('Autocomplete delay (ms)'),
      type: "number",
      value: this.state.autocompleteDelay,
      onChange: this._onAutocompleteDelayChange
    }), /*#__PURE__*/_react.default.createElement(_Field.default, {
      label: (0, _languageHandler._t)('Read Marker lifetime (ms)'),
      type: "number",
      value: this.state.readMarkerInViewThresholdMs,
      onChange: this._onReadMarkerInViewThresholdMs
    }), /*#__PURE__*/_react.default.createElement(_Field.default, {
      label: (0, _languageHandler._t)('Read Marker off-screen lifetime (ms)'),
      type: "number",
      value: this.state.readMarkerOutOfViewThresholdMs,
      onChange: this._onReadMarkerOutOfViewThresholdMs
    })));
  }

}

exports.default = PreferencesUserSettingsTab;
(0, _defineProperty2.default)(PreferencesUserSettingsTab, "ROOM_LIST_SETTINGS", ['RoomList.orderAlphabetically', 'RoomList.orderByImportance', 'breadcrumbs']);
(0, _defineProperty2.default)(PreferencesUserSettingsTab, "COMPOSER_SETTINGS", ['MessageComposerInput.autoReplaceEmoji', 'MessageComposerInput.suggestEmoji', 'sendTypingNotifications']);
(0, _defineProperty2.default)(PreferencesUserSettingsTab, "TIMELINE_SETTINGS", ['showTypingNotifications', 'autoplayGifsAndVideos', 'urlPreviewsEnabled', 'TextualBody.enableBigEmoji', 'showReadReceipts', 'showTwelveHourTimestamps', 'alwaysShowTimestamps', 'showRedactions', 'enableSyntaxHighlightLanguageDetection', 'showJoinLeaves', 'showAvatarChanges', 'showDisplaynameChanges', 'showImages']);
(0, _defineProperty2.default)(PreferencesUserSettingsTab, "ADVANCED_SETTINGS", ['alwaysShowEncryptionIcons', 'Pill.shouldShowPillAvatar', 'TagPanel.enableTagPanel', 'promptBeforeInviteUnknownUsers' // Start automatically after startup (electron-only)
// Autocomplete delay (niche text box)
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,