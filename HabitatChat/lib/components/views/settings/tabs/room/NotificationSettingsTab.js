"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _languageHandler = require("../../../../../languageHandler");

var _MatrixClientPeg = require("../../../../../MatrixClientPeg");

var _AccessibleButton = _interopRequireDefault(require("../../../elements/AccessibleButton"));

var _Notifier = _interopRequireDefault(require("../../../../../Notifier"));

var _SettingsStore = _interopRequireWildcard(require("../../../../../settings/SettingsStore"));

/*
Copyright 2019 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class NotificationsSettingsTab extends _react.default.Component {
  constructor() {
    super();
    this.state = {
      currentSound: "default",
      uploadedFile: null
    };
  } // TODO: [REACT-WARNING] Replace component with real class, use constructor for refs


  UNSAFE_componentWillMount() {
    // eslint-disable-line camelcase
    _Notifier.default.getSoundForRoom(this.props.roomId).then(soundData => {
      if (!soundData) {
        return;
      }

      this.setState({
        currentSound: soundData.name || soundData.url
      });
    });

    this._soundUpload = (0, _react.createRef)();
  }

  async _triggerUploader(e) {
    e.stopPropagation();
    e.preventDefault();

    this._soundUpload.current.click();
  }

  async _onSoundUploadChanged(e) {
    if (!e.target.files || !e.target.files.length) {
      this.setState({
        uploadedFile: null
      });
      return;
    }

    const file = e.target.files[0];
    this.setState({
      uploadedFile: file
    });
  }

  async _onClickSaveSound(e) {
    e.stopPropagation();
    e.preventDefault();

    try {
      await this._saveSound();
    } catch (ex) {
      console.error("Unable to save notification sound for ".concat(this.props.roomId));
      console.error(ex);
    }
  }

  async _saveSound() {
    if (!this.state.uploadedFile) {
      return;
    }

    let type = this.state.uploadedFile.type;

    if (type === "video/ogg") {
      // XXX: I've observed browsers allowing users to pick a audio/ogg files,
      // and then calling it a video/ogg. This is a lame hack, but man browsers
      // suck at detecting mimetypes.
      type = "audio/ogg";
    }

    const url = await _MatrixClientPeg.MatrixClientPeg.get().uploadContent(this.state.uploadedFile, {
      type
    });
    await _SettingsStore.default.setValue("notificationSound", this.props.roomId, _SettingsStore.SettingLevel.ROOM_ACCOUNT, {
      name: this.state.uploadedFile.name,
      type: type,
      size: this.state.uploadedFile.size,
      url
    });
    this.setState({
      uploadedFile: null,
      currentSound: this.state.uploadedFile.name
    });
  }

  _clearSound(e) {
    e.stopPropagation();
    e.preventDefault();

    _SettingsStore.default.setValue("notificationSound", this.props.roomId, _SettingsStore.SettingLevel.ROOM_ACCOUNT, null);

    this.setState({
      currentSound: "default"
    });
  }

  render() {
    let currentUploadedFile = null;

    if (this.state.uploadedFile) {
      currentUploadedFile = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Uploaded sound"), ": ", /*#__PURE__*/_react.default.createElement("code", null, this.state.uploadedFile.name)));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_heading"
    }, (0, _languageHandler._t)("Notifications")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_section mx_SettingsTab_subsectionText"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsTab_subheading"
    }, (0, _languageHandler._t)("Sounds")), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("span", null, (0, _languageHandler._t)("Notification sound"), ": ", /*#__PURE__*/_react.default.createElement("code", null, this.state.currentSound)), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_NotificationSound_resetSound",
      disabled: this.state.currentSound == "default",
      onClick: this._clearSound.bind(this),
      kind: "primary"
    }, (0, _languageHandler._t)("Reset"))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Set a new custom sound")), /*#__PURE__*/_react.default.createElement("form", {
      autoComplete: "off",
      noValidate: true
    }, /*#__PURE__*/_react.default.createElement("input", {
      ref: this._soundUpload,
      className: "mx_NotificationSound_soundUpload",
      type: "file",
      onChange: this._onSoundUploadChanged.bind(this),
      accept: "audio/*"
    })), currentUploadedFile, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_NotificationSound_browse",
      onClick: this._triggerUploader.bind(this),
      kind: "primary"
    }, (0, _languageHandler._t)("Browse")), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_NotificationSound_save",
      disabled: this.state.uploadedFile == null,
      onClick: this._onClickSaveSound.bind(this),
      kind: "primary"
    }, (0, _languageHandler._t)("Save")), /*#__PURE__*/_react.default.createElement("br", null))));
  }

}

exports.default = NotificationsSettingsTab;
(0, _defineProperty2.default)(NotificationsSettingsTab, "propTypes", {
  roomId: _propTypes.default.string.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,