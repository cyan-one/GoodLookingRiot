"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _DateUtils = require("../../../DateUtils");

/*
Copyright 2016 OpenMarket Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class DevicesPanelEntry extends _react.default.Component {
  constructor(props) {
    super(props);
    this._unmounted = false;
    this.onDeviceToggled = this.onDeviceToggled.bind(this);
    this._onDisplayNameChanged = this._onDisplayNameChanged.bind(this);
  }

  componentWillUnmount() {
    this._unmounted = true;
  }

  _onDisplayNameChanged(value) {
    const device = this.props.device;
    return _MatrixClientPeg.MatrixClientPeg.get().setDeviceDetails(device.device_id, {
      display_name: value
    }).catch(e => {
      console.error("Error setting session display name", e);
      throw new Error((0, _languageHandler._t)("Failed to set display name"));
    });
  }

  onDeviceToggled() {
    this.props.onDeviceToggled(this.props.device);
  }

  render() {
    const EditableTextContainer = sdk.getComponent('elements.EditableTextContainer');
    const device = this.props.device;
    let lastSeen = "";

    if (device.last_seen_ts) {
      const lastSeenDate = (0, _DateUtils.formatDate)(new Date(device.last_seen_ts));
      lastSeen = device.last_seen_ip + " @ " + lastSeenDate.toLocaleString();
    }

    let myDeviceClass = '';

    if (device.device_id === _MatrixClientPeg.MatrixClientPeg.get().getDeviceId()) {
      myDeviceClass = " mx_DevicesPanel_myDevice";
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DevicesPanel_device" + myDeviceClass
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DevicesPanel_deviceId"
    }, device.device_id), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DevicesPanel_deviceName"
    }, /*#__PURE__*/_react.default.createElement(EditableTextContainer, {
      initialValue: device.display_name,
      onSubmit: this._onDisplayNameChanged,
      placeholder: device.device_id
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DevicesPanel_lastSeen"
    }, lastSeen), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DevicesPanel_deviceButtons"
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "checkbox",
      onChange: this.onDeviceToggled,
      checked: this.props.selected
    })));
  }

}

exports.default = DevicesPanelEntry;
DevicesPanelEntry.propTypes = {
  device: _propTypes.default.object.isRequired,
  onDeviceToggled: _propTypes.default.func
};
DevicesPanelEntry.defaultProps = {
  onDeviceToggled: function () {}
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,