"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _languageHandler = require("../../../languageHandler");

var sdk = _interopRequireWildcard(require("../../../index"));

var _CrossSigningManager = require("../../../CrossSigningManager");

var _Modal = _interopRequireDefault(require("../../../Modal"));

/*
Copyright 2019, 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class CrossSigningPanel extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "onAccountData", event => {
      const type = event.getType();

      if (type.startsWith("m.cross_signing") || type.startsWith("m.secret_storage")) {
        this._getUpdatedStatus();
      }
    });
    (0, _defineProperty2.default)(this, "_onBootstrapClick", () => {
      this._bootstrapSecureSecretStorage(false);
    });
    (0, _defineProperty2.default)(this, "onStatusChanged", () => {
      this._getUpdatedStatus();
    });
    (0, _defineProperty2.default)(this, "_bootstrapSecureSecretStorage", async (forceReset = false) => {
      this.setState({
        error: null
      });

      try {
        await (0, _CrossSigningManager.accessSecretStorage)(() => undefined, forceReset);
      } catch (e) {
        this.setState({
          error: e
        });
        console.error("Error bootstrapping secret storage", e);
      }

      if (this._unmounted) return;

      this._getUpdatedStatus();
    });
    (0, _defineProperty2.default)(this, "onDestroyStorage", act => {
      if (!act) return;

      this._bootstrapSecureSecretStorage(true);
    });
    (0, _defineProperty2.default)(this, "_destroySecureSecretStorage", () => {
      const ConfirmDestroyCrossSigningDialog = sdk.getComponent("dialogs.ConfirmDestroyCrossSigningDialog");

      _Modal.default.createDialog(ConfirmDestroyCrossSigningDialog, {
        onFinished: this.onDestroyStorage
      });
    });
    this._unmounted = false;
    this.state = {
      error: null,
      crossSigningPublicKeysOnDevice: false,
      crossSigningPrivateKeysInStorage: false,
      selfSigningPrivateKeyCached: false,
      userSigningPrivateKeyCached: false,
      sessionBackupKeyCached: false,
      secretStorageKeyInAccount: false
    };
  }

  componentDidMount() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    cli.on("accountData", this.onAccountData);
    cli.on("userTrustStatusChanged", this.onStatusChanged);
    cli.on("crossSigning.keysChanged", this.onStatusChanged);

    this._getUpdatedStatus();
  }

  componentWillUnmount() {
    this._unmounted = true;

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (!cli) return;
    cli.removeListener("accountData", this.onAccountData);
    cli.removeListener("userTrustStatusChanged", this.onStatusChanged);
    cli.removeListener("crossSigning.keysChanged", this.onStatusChanged);
  }

  async _getUpdatedStatus() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const pkCache = cli.getCrossSigningCacheCallbacks();
    const crossSigning = cli._crypto._crossSigningInfo;
    const secretStorage = cli._crypto._secretStorage;
    const crossSigningPublicKeysOnDevice = crossSigning.getId();
    const crossSigningPrivateKeysInStorage = await crossSigning.isStoredInSecretStorage(secretStorage);
    const selfSigningPrivateKeyCached = !!(pkCache && (await pkCache.getCrossSigningKeyCache("self_signing")));
    const userSigningPrivateKeyCached = !!(pkCache && (await pkCache.getCrossSigningKeyCache("user_signing")));
    const sessionBackupKeyFromCache = await cli._crypto.getSessionBackupPrivateKey();
    const sessionBackupKeyCached = !!sessionBackupKeyFromCache;
    const sessionBackupKeyWellFormed = sessionBackupKeyFromCache instanceof Uint8Array;
    const secretStorageKeyInAccount = await secretStorage.hasKey();
    const homeserverSupportsCrossSigning = await cli.doesServerSupportUnstableFeature("org.matrix.e2e_cross_signing");
    const crossSigningReady = await cli.isCrossSigningReady();
    this.setState({
      crossSigningPublicKeysOnDevice,
      crossSigningPrivateKeysInStorage,
      selfSigningPrivateKeyCached,
      userSigningPrivateKeyCached,
      sessionBackupKeyCached,
      sessionBackupKeyWellFormed,
      secretStorageKeyInAccount,
      homeserverSupportsCrossSigning,
      crossSigningReady
    });
  }
  /**
   * Bootstrapping secret storage may take one of these paths:
   * 1. Create secret storage from a passphrase and store cross-signing keys
   *    in secret storage.
   * 2. Access existing secret storage by requesting passphrase and accessing
   *    cross-signing keys as needed.
   * 3. All keys are loaded and there's nothing to do.
   * @param {bool} [forceReset] Bootstrap again even if keys already present
   */


  render() {
    const AccessibleButton = sdk.getComponent("elements.AccessibleButton");
    const {
      error,
      crossSigningPublicKeysOnDevice,
      crossSigningPrivateKeysInStorage,
      selfSigningPrivateKeyCached,
      userSigningPrivateKeyCached,
      sessionBackupKeyCached,
      sessionBackupKeyWellFormed,
      secretStorageKeyInAccount,
      homeserverSupportsCrossSigning,
      crossSigningReady
    } = this.state;
    let errorSection;

    if (error) {
      errorSection = /*#__PURE__*/_react.default.createElement("div", {
        className: "error"
      }, error.toString());
    } // Whether the various keys exist on your account (but not necessarily
    // on this device).


    const enabledForAccount = crossSigningPrivateKeysInStorage && secretStorageKeyInAccount;
    let summarisedStatus;

    if (homeserverSupportsCrossSigning === undefined) {
      const InlineSpinner = sdk.getComponent('views.elements.InlineSpinner');
      summarisedStatus = /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(InlineSpinner, null));
    } else if (!homeserverSupportsCrossSigning) {
      summarisedStatus = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Your homeserver does not support cross-signing."));
    } else if (crossSigningReady) {
      summarisedStatus = /*#__PURE__*/_react.default.createElement("p", null, "\u2705 ", (0, _languageHandler._t)("Cross-signing and secret storage are enabled."));
    } else if (crossSigningPrivateKeysInStorage) {
      summarisedStatus = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Your account has a cross-signing identity in secret storage, but it " + "is not yet trusted by this session."));
    } else {
      summarisedStatus = /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Cross-signing and secret storage are not yet set up."));
    }

    let resetButton;

    if (enabledForAccount) {
      resetButton = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CrossSigningPanel_buttonRow"
      }, /*#__PURE__*/_react.default.createElement(AccessibleButton, {
        kind: "danger",
        onClick: this._destroySecureSecretStorage
      }, (0, _languageHandler._t)("Reset cross-signing and secret storage")));
    }

    let bootstrapButton;

    if ((!enabledForAccount || !crossSigningPublicKeysOnDevice) && homeserverSupportsCrossSigning) {
      bootstrapButton = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_CrossSigningPanel_buttonRow"
      }, /*#__PURE__*/_react.default.createElement(AccessibleButton, {
        kind: "primary",
        onClick: this._onBootstrapClick
      }, (0, _languageHandler._t)("Bootstrap cross-signing and secret storage")));
    }

    let sessionBackupKeyWellFormedText = "";

    if (sessionBackupKeyCached) {
      sessionBackupKeyWellFormedText = ", ";

      if (sessionBackupKeyWellFormed) {
        sessionBackupKeyWellFormedText += (0, _languageHandler._t)("well formed");
      } else {
        sessionBackupKeyWellFormedText += (0, _languageHandler._t)("unexpected type");
      }
    }

    return /*#__PURE__*/_react.default.createElement("div", null, summarisedStatus, /*#__PURE__*/_react.default.createElement("details", null, /*#__PURE__*/_react.default.createElement("summary", null, (0, _languageHandler._t)("Advanced")), /*#__PURE__*/_react.default.createElement("table", {
      className: "mx_CrossSigningPanel_statusList"
    }, /*#__PURE__*/_react.default.createElement("tbody", null, /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", null, (0, _languageHandler._t)("Cross-signing public keys:")), /*#__PURE__*/_react.default.createElement("td", null, crossSigningPublicKeysOnDevice ? (0, _languageHandler._t)("in memory") : (0, _languageHandler._t)("not found"))), /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", null, (0, _languageHandler._t)("Cross-signing private keys:")), /*#__PURE__*/_react.default.createElement("td", null, crossSigningPrivateKeysInStorage ? (0, _languageHandler._t)("in secret storage") : (0, _languageHandler._t)("not found"))), /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", null, (0, _languageHandler._t)("Self signing private key:")), /*#__PURE__*/_react.default.createElement("td", null, selfSigningPrivateKeyCached ? (0, _languageHandler._t)("cached locally") : (0, _languageHandler._t)("not found locally"))), /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", null, (0, _languageHandler._t)("User signing private key:")), /*#__PURE__*/_react.default.createElement("td", null, userSigningPrivateKeyCached ? (0, _languageHandler._t)("cached locally") : (0, _languageHandler._t)("not found locally"))), /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", null, (0, _languageHandler._t)("Session backup key:")), /*#__PURE__*/_react.default.createElement("td", null, sessionBackupKeyCached ? (0, _languageHandler._t)("cached locally") : (0, _languageHandler._t)("not found locally"), sessionBackupKeyWellFormedText)), /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", null, (0, _languageHandler._t)("Secret storage public key:")), /*#__PURE__*/_react.default.createElement("td", null, secretStorageKeyInAccount ? (0, _languageHandler._t)("in account data") : (0, _languageHandler._t)("not found"))), /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", null, (0, _languageHandler._t)("Homeserver feature support:")), /*#__PURE__*/_react.default.createElement("td", null, homeserverSupportsCrossSigning ? (0, _languageHandler._t)("exists") : (0, _languageHandler._t)("not found")))))), errorSection, bootstrapButton, resetButton);
  }

}

exports.default = CrossSigningPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,