"use strict";

var _interopRequireWildcard3 = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime/helpers/interopRequireWildcard"));

var _Field = _interopRequireDefault(require("../elements/Field"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _languageHandler = require("../../../languageHandler");

var sdk = _interopRequireWildcard3(require("../../../index"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _SessionStore = _interopRequireDefault(require("../../../stores/SessionStore"));

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2018-2019 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var _default = (0, _createReactClass.default)({
  displayName: 'ChangePassword',
  propTypes: {
    onFinished: _propTypes.default.func,
    onError: _propTypes.default.func,
    onCheckPassword: _propTypes.default.func,
    rowClassName: _propTypes.default.string,
    buttonClassName: _propTypes.default.string,
    buttonKind: _propTypes.default.string,
    confirm: _propTypes.default.bool,
    // Whether to autoFocus the new password input
    autoFocusNewPasswordInput: _propTypes.default.bool
  },
  Phases: {
    Edit: "edit",
    Uploading: "uploading",
    Error: "error"
  },
  getDefaultProps: function () {
    return {
      onFinished: function () {},
      onError: function () {},
      onCheckPassword: function (oldPass, newPass, confirmPass) {
        if (newPass !== confirmPass) {
          return {
            error: (0, _languageHandler._t)("New passwords don't match")
          };
        } else if (!newPass || newPass.length === 0) {
          return {
            error: (0, _languageHandler._t)("Passwords can't be empty")
          };
        }
      },
      confirm: true
    };
  },
  getInitialState: function () {
    return {
      phase: this.Phases.Edit,
      cachedPassword: null,
      oldPassword: "",
      newPassword: "",
      newPasswordConfirm: ""
    };
  },
  componentDidMount: function () {
    this._sessionStore = _SessionStore.default;
    this._sessionStoreToken = this._sessionStore.addListener(this._setStateFromSessionStore);

    this._setStateFromSessionStore();
  },
  componentWillUnmount: function () {
    if (this._sessionStoreToken) {
      this._sessionStoreToken.remove();
    }
  },
  _setStateFromSessionStore: function () {
    this.setState({
      cachedPassword: this._sessionStore.getCachedPassword()
    });
  },
  changePassword: function (oldPassword, newPassword) {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (!this.props.confirm) {
      this._changePassword(cli, oldPassword, newPassword);

      return;
    }

    const QuestionDialog = sdk.getComponent("dialogs.QuestionDialog");

    _Modal.default.createTrackedDialog('Change Password', '', QuestionDialog, {
      title: (0, _languageHandler._t)("Warning!"),
      description: /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)('Changing password will currently reset any end-to-end encryption keys on all sessions, ' + 'making encrypted chat history unreadable, unless you first export your room keys ' + 'and re-import them afterwards. ' + 'In future this will be improved.'), ' ', /*#__PURE__*/_react.default.createElement("a", {
        href: "https://github.com/vector-im/riot-web/issues/2671",
        target: "_blank",
        rel: "noreferrer noopener"
      }, "https://github.com/vector-im/riot-web/issues/2671")),
      button: (0, _languageHandler._t)("Continue"),
      extraButtons: [/*#__PURE__*/_react.default.createElement("button", {
        className: "mx_Dialog_primary",
        onClick: this._onExportE2eKeysClicked
      }, (0, _languageHandler._t)('Export E2E room keys'))],
      onFinished: confirmed => {
        if (confirmed) {
          this._changePassword(cli, oldPassword, newPassword);
        }
      }
    });
  },
  _changePassword: function (cli, oldPassword, newPassword) {
    const authDict = {
      type: 'm.login.password',
      user: cli.credentials.userId,
      password: oldPassword
    };
    this.setState({
      phase: this.Phases.Uploading
    });
    cli.setPassword(authDict, newPassword).then(() => {
      // Notify SessionStore that the user's password was changed
      _dispatcher.default.dispatch({
        action: 'password_changed'
      });

      if (this.props.shouldAskForEmail) {
        return this._optionallySetEmail().then(confirmed => {
          this.props.onFinished({
            didSetEmail: confirmed
          });
        });
      } else {
        this.props.onFinished();
      }
    }, err => {
      this.props.onError(err);
    }).finally(() => {
      this.setState({
        phase: this.Phases.Edit,
        oldPassword: "",
        newPassword: "",
        newPasswordConfirm: ""
      });
    });
  },
  _optionallySetEmail: function () {
    // Ask for an email otherwise the user has no way to reset their password
    const SetEmailDialog = sdk.getComponent("dialogs.SetEmailDialog");

    const modal = _Modal.default.createTrackedDialog('Do you want to set an email address?', '', SetEmailDialog, {
      title: (0, _languageHandler._t)('Do you want to set an email address?')
    });

    return modal.finished.then(([confirmed]) => confirmed);
  },
  _onExportE2eKeysClicked: function () {
    _Modal.default.createTrackedDialogAsync('Export E2E Keys', 'Change Password', Promise.resolve().then(() => (0, _interopRequireWildcard2.default)(require('../../../async-components/views/dialogs/ExportE2eKeysDialog'))), {
      matrixClient: _MatrixClientPeg.MatrixClientPeg.get()
    });
  },

  onChangeOldPassword(ev) {
    this.setState({
      oldPassword: ev.target.value
    });
  },

  onChangeNewPassword(ev) {
    this.setState({
      newPassword: ev.target.value
    });
  },

  onChangeNewPasswordConfirm(ev) {
    this.setState({
      newPasswordConfirm: ev.target.value
    });
  },

  onClickChange: function (ev) {
    ev.preventDefault();
    const oldPassword = this.state.cachedPassword || this.state.oldPassword;
    const newPassword = this.state.newPassword;
    const confirmPassword = this.state.newPasswordConfirm;
    const err = this.props.onCheckPassword(oldPassword, newPassword, confirmPassword);

    if (err) {
      this.props.onError(err);
    } else {
      this.changePassword(oldPassword, newPassword);
    }
  },
  render: function () {
    // TODO: Live validation on `new pw == confirm pw`
    const rowClassName = this.props.rowClassName;
    const buttonClassName = this.props.buttonClassName;
    let currentPassword = null;

    if (!this.state.cachedPassword) {
      currentPassword = /*#__PURE__*/_react.default.createElement("div", {
        className: rowClassName
      }, /*#__PURE__*/_react.default.createElement(_Field.default, {
        type: "password",
        label: (0, _languageHandler._t)('Current password'),
        value: this.state.oldPassword,
        onChange: this.onChangeOldPassword
      }));
    }

    switch (this.state.phase) {
      case this.Phases.Edit:
        const passwordLabel = this.state.cachedPassword ? (0, _languageHandler._t)('Password') : (0, _languageHandler._t)('New Password');
        return /*#__PURE__*/_react.default.createElement("form", {
          className: this.props.className,
          onSubmit: this.onClickChange
        }, currentPassword, /*#__PURE__*/_react.default.createElement("div", {
          className: rowClassName
        }, /*#__PURE__*/_react.default.createElement(_Field.default, {
          type: "password",
          label: passwordLabel,
          value: this.state.newPassword,
          autoFocus: this.props.autoFocusNewPasswordInput,
          onChange: this.onChangeNewPassword,
          autoComplete: "new-password"
        })), /*#__PURE__*/_react.default.createElement("div", {
          className: rowClassName
        }, /*#__PURE__*/_react.default.createElement(_Field.default, {
          type: "password",
          label: (0, _languageHandler._t)("Confirm password"),
          value: this.state.newPasswordConfirm,
          onChange: this.onChangeNewPasswordConfirm,
          autoComplete: "new-password"
        })), /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
          className: buttonClassName,
          kind: this.props.buttonKind,
          onClick: this.onClickChange
        }, (0, _languageHandler._t)('Change Password')));

      case this.Phases.Uploading:
        var Loader = sdk.getComponent("elements.Spinner");
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_Dialog_content"
        }, /*#__PURE__*/_react.default.createElement(Loader, null));
    }
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,