"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _url = _interopRequireDefault(require("url"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

var _WidgetUtils = _interopRequireDefault(require("../../../utils/WidgetUtils"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

class AppPermission extends _react.default.Component {
  constructor(props) {
    super(props); // The first step is to pick apart the widget so we can render information about it

    const urlInfo = this.parseWidgetUrl(); // The second step is to find the user's profile so we can show it on the prompt

    const room = _MatrixClientPeg.MatrixClientPeg.get().getRoom(this.props.roomId);

    let roomMember;
    if (room) roomMember = room.getMember(this.props.creatorUserId); // Set all this into the initial state

    this.state = _objectSpread({}, urlInfo, {
      roomMember
    });
  }

  parseWidgetUrl() {
    const widgetUrl = _url.default.parse(this.props.url);

    const params = new URLSearchParams(widgetUrl.search); // HACK: We're relying on the query params when we should be relying on the widget's `data`.
    // This is a workaround for Scalar.

    if (_WidgetUtils.default.isScalarUrl(widgetUrl) && params && params.get('url')) {
      const unwrappedUrl = _url.default.parse(params.get('url'));

      return {
        widgetDomain: unwrappedUrl.host || unwrappedUrl.hostname,
        isWrapped: true
      };
    } else {
      return {
        widgetDomain: widgetUrl.host || widgetUrl.hostname,
        isWrapped: false
      };
    }
  }

  render() {
    const AccessibleButton = sdk.getComponent("views.elements.AccessibleButton");
    const MemberAvatar = sdk.getComponent("views.avatars.MemberAvatar");
    const BaseAvatar = sdk.getComponent("views.avatars.BaseAvatar");
    const TextWithTooltip = sdk.getComponent("views.elements.TextWithTooltip");
    const displayName = this.state.roomMember ? this.state.roomMember.name : this.props.creatorUserId;
    const userId = displayName === this.props.creatorUserId ? null : this.props.creatorUserId;
    const avatar = this.state.roomMember ? /*#__PURE__*/_react.default.createElement(MemberAvatar, {
      member: this.state.roomMember,
      width: 38,
      height: 38
    }) : /*#__PURE__*/_react.default.createElement(BaseAvatar, {
      name: this.props.creatorUserId,
      width: 38,
      height: 38
    });

    const warningTooltipText = /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Any of the following data may be shared:"), /*#__PURE__*/_react.default.createElement("ul", null, /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Your display name")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Your avatar URL")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Your user ID")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Your theme")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Riot URL")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Room ID")), /*#__PURE__*/_react.default.createElement("li", null, (0, _languageHandler._t)("Widget ID"))));

    const warningTooltip = /*#__PURE__*/_react.default.createElement(TextWithTooltip, {
      tooltip: warningTooltipText,
      tooltipClass: "mx_AppPermissionWarning_tooltip mx_Tooltip_dark"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_AppPermissionWarning_helpIcon"
    })); // Due to i18n limitations, we can't dedupe the code for variables in these two messages.


    const warning = this.state.isWrapped ? (0, _languageHandler._t)("Using this widget may share data <helpIcon /> with %(widgetDomain)s & your Integration Manager.", {
      widgetDomain: this.state.widgetDomain
    }, {
      helpIcon: () => warningTooltip
    }) : (0, _languageHandler._t)("Using this widget may share data <helpIcon /> with %(widgetDomain)s.", {
      widgetDomain: this.state.widgetDomain
    }, {
      helpIcon: () => warningTooltip
    });
    const encryptionWarning = this.props.isRoomEncrypted ? (0, _languageHandler._t)("Widgets do not use message encryption.") : null;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AppPermissionWarning"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AppPermissionWarning_row mx_AppPermissionWarning_bolder mx_AppPermissionWarning_smallText"
    }, (0, _languageHandler._t)("Widget added by")), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AppPermissionWarning_row"
    }, avatar, /*#__PURE__*/_react.default.createElement("h4", {
      className: "mx_AppPermissionWarning_bolder"
    }, displayName), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AppPermissionWarning_smallText"
    }, userId)), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AppPermissionWarning_row mx_AppPermissionWarning_smallText"
    }, warning), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AppPermissionWarning_row mx_AppPermissionWarning_smallText"
    }, (0, _languageHandler._t)("This widget may use cookies."), "\xA0", encryptionWarning), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_AppPermissionWarning_row"
    }, /*#__PURE__*/_react.default.createElement(AccessibleButton, {
      kind: "primary_sm",
      onClick: this.props.onPermissionGranted
    }, (0, _languageHandler._t)("Continue"))));
  }

}

exports.default = AppPermission;
(0, _defineProperty2.default)(AppPermission, "propTypes", {
  url: _propTypes.default.string.isRequired,
  creatorUserId: _propTypes.default.string.isRequired,
  roomId: _propTypes.default.string.isRequired,
  onPermissionGranted: _propTypes.default.func.isRequired,
  isRoomEncrypted: _propTypes.default.bool
});
(0, _defineProperty2.default)(AppPermission, "defaultProps", {
  onPermissionGranted: () => {}
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,