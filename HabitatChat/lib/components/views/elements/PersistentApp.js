"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _RoomViewStore = _interopRequireDefault(require("../../../stores/RoomViewStore"));

var _ActiveWidgetStore = _interopRequireDefault(require("../../../stores/ActiveWidgetStore"));

var _WidgetUtils = _interopRequireDefault(require("../../../utils/WidgetUtils"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

/*
Copyright 2018 New Vector Ltd
Copyright 2019, 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var _default = (0, _createReactClass.default)({
  displayName: 'PersistentApp',
  getInitialState: function () {
    return {
      roomId: _RoomViewStore.default.getRoomId(),
      persistentWidgetId: _ActiveWidgetStore.default.getPersistentWidgetId()
    };
  },
  componentDidMount: function () {
    this._roomStoreToken = _RoomViewStore.default.addListener(this._onRoomViewStoreUpdate);

    _ActiveWidgetStore.default.on('update', this._onActiveWidgetStoreUpdate);
  },
  componentWillUnmount: function () {
    if (this._roomStoreToken) {
      this._roomStoreToken.remove();
    }

    _ActiveWidgetStore.default.removeListener('update', this._onActiveWidgetStoreUpdate);
  },
  _onRoomViewStoreUpdate: function (payload) {
    if (_RoomViewStore.default.getRoomId() === this.state.roomId) return;
    this.setState({
      roomId: _RoomViewStore.default.getRoomId()
    });
  },
  _onActiveWidgetStoreUpdate: function () {
    this.setState({
      persistentWidgetId: _ActiveWidgetStore.default.getPersistentWidgetId()
    });
  },
  render: function () {
    if (this.state.persistentWidgetId) {
      const persistentWidgetInRoomId = _ActiveWidgetStore.default.getRoomId(this.state.persistentWidgetId);

      if (this.state.roomId !== persistentWidgetInRoomId) {
        const persistentWidgetInRoom = _MatrixClientPeg.MatrixClientPeg.get().getRoom(persistentWidgetInRoomId); // get the widget data


        const appEvent = _WidgetUtils.default.getRoomWidgets(persistentWidgetInRoom).find(ev => {
          return ev.getStateKey() === _ActiveWidgetStore.default.getPersistentWidgetId();
        });

        const app = _WidgetUtils.default.makeAppConfig(appEvent.getStateKey(), appEvent.getContent(), appEvent.getSender(), persistentWidgetInRoomId, appEvent.getId());

        const capWhitelist = _WidgetUtils.default.getCapWhitelistForAppTypeInRoomId(app.type, persistentWidgetInRoomId);

        const AppTile = sdk.getComponent('elements.AppTile');
        return /*#__PURE__*/_react.default.createElement(AppTile, {
          key: app.id,
          app: app,
          fullWidth: true,
          room: persistentWidgetInRoom,
          userId: _MatrixClientPeg.MatrixClientPeg.get().credentials.userId,
          show: true,
          creatorUserId: app.creatorUserId,
          widgetPageTitle: app.data && app.data.title ? app.data.title : '',
          waitForIframeLoad: app.waitForIframeLoad,
          whitelistCapabilities: capWhitelist,
          showDelete: false,
          showMinimise: false,
          miniMode: true
        });
      }
    }

    return null;
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL1BlcnNpc3RlbnRBcHAuanMiXSwibmFtZXMiOlsiZGlzcGxheU5hbWUiLCJnZXRJbml0aWFsU3RhdGUiLCJyb29tSWQiLCJSb29tVmlld1N0b3JlIiwiZ2V0Um9vbUlkIiwicGVyc2lzdGVudFdpZGdldElkIiwiQWN0aXZlV2lkZ2V0U3RvcmUiLCJnZXRQZXJzaXN0ZW50V2lkZ2V0SWQiLCJjb21wb25lbnREaWRNb3VudCIsIl9yb29tU3RvcmVUb2tlbiIsImFkZExpc3RlbmVyIiwiX29uUm9vbVZpZXdTdG9yZVVwZGF0ZSIsIm9uIiwiX29uQWN0aXZlV2lkZ2V0U3RvcmVVcGRhdGUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInJlbW92ZSIsInJlbW92ZUxpc3RlbmVyIiwicGF5bG9hZCIsInN0YXRlIiwic2V0U3RhdGUiLCJyZW5kZXIiLCJwZXJzaXN0ZW50V2lkZ2V0SW5Sb29tSWQiLCJwZXJzaXN0ZW50V2lkZ2V0SW5Sb29tIiwiTWF0cml4Q2xpZW50UGVnIiwiZ2V0IiwiZ2V0Um9vbSIsImFwcEV2ZW50IiwiV2lkZ2V0VXRpbHMiLCJnZXRSb29tV2lkZ2V0cyIsImZpbmQiLCJldiIsImdldFN0YXRlS2V5IiwiYXBwIiwibWFrZUFwcENvbmZpZyIsImdldENvbnRlbnQiLCJnZXRTZW5kZXIiLCJnZXRJZCIsImNhcFdoaXRlbGlzdCIsImdldENhcFdoaXRlbGlzdEZvckFwcFR5cGVJblJvb21JZCIsInR5cGUiLCJBcHBUaWxlIiwic2RrIiwiZ2V0Q29tcG9uZW50IiwiaWQiLCJjcmVkZW50aWFscyIsInVzZXJJZCIsImNyZWF0b3JVc2VySWQiLCJkYXRhIiwidGl0bGUiLCJ3YWl0Rm9ySWZyYW1lTG9hZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFpQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBdkJBOzs7Ozs7Ozs7Ozs7Ozs7O2VBeUJlLCtC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LGVBQWUsRUFBR2QsR0FBRyxDQUFDZSxJQUFKLElBQVlmLEdBQUcsQ0FBQ2UsSUFBSixDQUFTQyxLQUF0QixHQUErQmhCLEdBQUcsQ0FBQ2UsSUFBSixDQUFTQyxLQUF4QyxHQUFnRCxFQVI5RDtBQVNILFVBQUEsaUJBQWlCLEVBQUVoQixHQUFHLENBQUNpQixpQkFUcEI7QUFVSCxVQUFBLHFCQUFxQixFQUFFWixZQVZwQjtBQVdILFVBQUEsVUFBVSxFQUFFLEtBWFQ7QUFZSCxVQUFBLFlBQVksRUFBRSxLQVpYO0FBYUgsVUFBQSxRQUFRLEVBQUU7QUFiUCxVQUFQO0FBZUg7QUFDSjs7QUFDRCxXQUFPLElBQVA7QUFDSDtBQXBFMkIsQ0FBakIsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxOCBOZXcgVmVjdG9yIEx0ZFxuQ29weXJpZ2h0IDIwMTksIDIwMjAgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVJlYWN0Q2xhc3MgZnJvbSAnY3JlYXRlLXJlYWN0LWNsYXNzJztcbmltcG9ydCBSb29tVmlld1N0b3JlIGZyb20gJy4uLy4uLy4uL3N0b3Jlcy9Sb29tVmlld1N0b3JlJztcbmltcG9ydCBBY3RpdmVXaWRnZXRTdG9yZSBmcm9tICcuLi8uLi8uLi9zdG9yZXMvQWN0aXZlV2lkZ2V0U3RvcmUnO1xuaW1wb3J0IFdpZGdldFV0aWxzIGZyb20gJy4uLy4uLy4uL3V0aWxzL1dpZGdldFV0aWxzJztcbmltcG9ydCAqIGFzIHNkayBmcm9tICcuLi8uLi8uLi9pbmRleCc7XG5pbXBvcnQge01hdHJpeENsaWVudFBlZ30gZnJvbSAnLi4vLi4vLi4vTWF0cml4Q2xpZW50UGVnJztcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUmVhY3RDbGFzcyh7XG4gICAgZGlzcGxheU5hbWU6ICdQZXJzaXN0ZW50QXBwJyxcblxuICAgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByb29tSWQ6IFJvb21WaWV3U3RvcmUuZ2V0Um9vbUlkKCksXG4gICAgICAgICAgICBwZXJzaXN0ZW50V2lkZ2V0SWQ6IEFjdGl2ZVdpZGdldFN0b3JlLmdldFBlcnNpc3RlbnRXaWRnZXRJZCgpLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX3Jvb21TdG9yZVRva2VuID0gUm9vbVZpZXdTdG9yZS5hZGRMaXN0ZW5lcih0aGlzLl9vblJvb21WaWV3U3RvcmVVcGRhdGUpO1xuICAgICAgICBBY3RpdmVXaWRnZXRTdG9yZS5vbigndXBkYXRlJywgdGhpcy5fb25BY3RpdmVXaWRnZXRTdG9yZVVwZGF0ZSk7XG4gICAgfSxcblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Jvb21TdG9yZVRva2VuKSB7XG4gICAgICAgICAgICB0aGlzLl9yb29tU3RvcmVUb2tlbi5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBBY3RpdmVXaWRnZXRTdG9yZS5yZW1vdmVMaXN0ZW5lcigndXBkYXRlJywgdGhpcy5fb25BY3RpdmVXaWRnZXRTdG9yZVVwZGF0ZSk7XG4gICAgfSxcblxuICAgIF9vblJvb21WaWV3U3RvcmVVcGRhdGU6IGZ1bmN0aW9uKHBheWxvYWQpIHtcbiAgICAgICAgaWYgKFJvb21WaWV3U3RvcmUuZ2V0Um9vbUlkKCkgPT09IHRoaXMuc3RhdGUucm9vbUlkKSByZXR1cm47XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgcm9vbUlkOiBSb29tVmlld1N0b3JlLmdldFJvb21JZCgpLFxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgX29uQWN0aXZlV2lkZ2V0U3RvcmVVcGRhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHBlcnNpc3RlbnRXaWRnZXRJZDogQWN0aXZlV2lkZ2V0U3RvcmUuZ2V0UGVyc2lzdGVudFdpZGdldElkKCksXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5wZXJzaXN0ZW50V2lkZ2V0SWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBlcnNpc3RlbnRXaWRnZXRJblJvb21JZCA9IEFjdGl2ZVdpZGdldFN0b3JlLmdldFJvb21JZCh0aGlzLnN0YXRlLnBlcnNpc3RlbnRXaWRnZXRJZCk7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5yb29tSWQgIT09IHBlcnNpc3RlbnRXaWRnZXRJblJvb21JZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBlcnNpc3RlbnRXaWRnZXRJblJvb20gPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCkuZ2V0Um9vbShwZXJzaXN0ZW50V2lkZ2V0SW5Sb29tSWQpO1xuICAgICAgICAgICAgICAgIC8vIGdldCB0aGUgd2lkZ2V0IGRhdGFcbiAgICAgICAgICAgICAgICBjb25zdCBhcHBFdmVudCA9IFdpZGdldFV0aWxzLmdldFJvb21XaWRnZXRzKHBlcnNpc3RlbnRXaWRnZXRJblJvb20pLmZpbmQoKGV2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBldi5nZXRTdGF0ZUtleSgpID09PSBBY3RpdmVXaWRnZXRTdG9yZS5nZXRQZXJzaXN0ZW50V2lkZ2V0SWQoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCBhcHAgPSBXaWRnZXRVdGlscy5tYWtlQXBwQ29uZmlnKFxuICAgICAgICAgICAgICAgICAgICBhcHBFdmVudC5nZXRTdGF0ZUtleSgpLCBhcHBFdmVudC5nZXRDb250ZW50KCksIGFwcEV2ZW50LmdldFNlbmRlcigpLFxuICAgICAgICAgICAgICAgICAgICBwZXJzaXN0ZW50V2lkZ2V0SW5Sb29tSWQsIGFwcEV2ZW50LmdldElkKCksXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjYXBXaGl0ZWxpc3QgPSBXaWRnZXRVdGlscy5nZXRDYXBXaGl0ZWxpc3RGb3JBcHBUeXBlSW5Sb29tSWQoYXBwLnR5cGUsIHBlcnNpc3RlbnRXaWRnZXRJblJvb21JZCk7XG4gICAgICAgICAgICAgICAgY29uc3QgQXBwVGlsZSA9IHNkay5nZXRDb21wb25lbnQoJ2VsZW1lbnRzLkFwcFRpbGUnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gPEFwcFRpbGVcbiAgICAgICAgICAgICAgICAgICAga2V5PXthcHAuaWR9XG4gICAgICAgICAgICAgICAgICAgIGFwcD17YXBwfVxuICAgICAgICAgICAgICAgICAgICBmdWxsV2lkdGg9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgIHJvb209e3BlcnNpc3RlbnRXaWRnZXRJblJvb219XG4gICAgICAgICAgICAgICAgICAgIHVzZXJJZD17TWF0cml4Q2xpZW50UGVnLmdldCgpLmNyZWRlbnRpYWxzLnVzZXJJZH1cbiAgICAgICAgICAgICAgICAgICAgc2hvdz17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgY3JlYXRvclVzZXJJZD17YXBwLmNyZWF0b3JVc2VySWR9XG4gICAgICAgICAgICAgICAgICAgIHdpZGdldFBhZ2VUaXRsZT17KGFwcC5kYXRhICYmIGFwcC5kYXRhLnRpdGxlKSA/IGFwcC5kYXRhLnRpdGxlIDogJyd9XG4gICAgICAgICAgICAgICAgICAgIHdhaXRGb3JJZnJhbWVMb2FkPXthcHAud2FpdEZvcklmcmFtZUxvYWR9XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlbGlzdENhcGFiaWxpdGllcz17Y2FwV2hpdGVsaXN0fVxuICAgICAgICAgICAgICAgICAgICBzaG93RGVsZXRlPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgc2hvd01pbmltaXNlPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgbWluaU1vZGU9e3RydWV9XG4gICAgICAgICAgICAgICAgLz47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbn0pO1xuXG4iXX0=