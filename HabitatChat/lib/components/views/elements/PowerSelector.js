"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var Roles = _interopRequireWildcard(require("../../../Roles"));

var _languageHandler = require("../../../languageHandler");

var _Field = _interopRequireDefault(require("./Field"));

var _Keyboard = require("../../../Keyboard");

/*
Copyright 2015, 2016 OpenMarket Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var _default = (0, _createReactClass.default)({
  displayName: 'PowerSelector',
  propTypes: {
    value: _propTypes.default.number.isRequired,
    // The maximum value that can be set with the power selector
    maxValue: _propTypes.default.number.isRequired,
    // Default user power level for the room
    usersDefault: _propTypes.default.number.isRequired,
    // should the user be able to change the value? false by default.
    disabled: _propTypes.default.bool,
    onChange: _propTypes.default.func,
    // Optional key to pass as the second argument to `onChange`
    powerLevelKey: _propTypes.default.string,
    // The name to annotate the selector with
    label: _propTypes.default.string
  },
  getInitialState: function () {
    return {
      levelRoleMap: {},
      // List of power levels to show in the drop-down
      options: [],
      customValue: this.props.value,
      selectValue: 0
    };
  },
  getDefaultProps: function () {
    return {
      maxValue: Infinity,
      usersDefault: 0
    };
  },
  componentDidMount: function () {
    // TODO: [REACT-WARNING] Move this to class constructor
    this._initStateFromProps(this.props);
  },
  // TODO: [REACT-WARNING] Replace with appropriate lifecycle event
  UNSAFE_componentWillReceiveProps: function (newProps) {
    this._initStateFromProps(newProps);
  },
  _initStateFromProps: function (newProps) {
    // This needs to be done now because levelRoleMap has translated strings
    const levelRoleMap = Roles.levelRoleMap(newProps.usersDefault);
    const options = Object.keys(levelRoleMap).filter(level => {
      return level === undefined || level <= newProps.maxValue || level == newProps.value;
    });
    const isCustom = levelRoleMap[newProps.value] === undefined;
    this.setState({
      levelRoleMap,
      options,
      custom: isCustom,
      customLevel: newProps.value,
      selectValue: isCustom ? "SELECT_VALUE_CUSTOM" : newProps.value
    });
  },
  onSelectChange: function (event) {
    const isCustom = event.target.value === "SELECT_VALUE_CUSTOM";

    if (isCustom) {
      this.setState({
        custom: true
      });
    } else {
      this.props.onChange(event.target.value, this.props.powerLevelKey);
      this.setState({
        selectValue: event.target.value
      });
    }
  },
  onCustomChange: function (event) {
    this.setState({
      customValue: event.target.value
    });
  },
  onCustomBlur: function (event) {
    event.preventDefault();
    event.stopPropagation();
    this.props.onChange(parseInt(this.state.customValue), this.props.powerLevelKey);
  },
  onCustomKeyDown: function (event) {
    if (event.key === _Keyboard.Key.ENTER) {
      event.preventDefault();
      event.stopPropagation(); // Do not call the onChange handler directly here - it can cause an infinite loop.
      // Long story short, a user hits Enter to submit the value which onChange handles as
      // raising a dialog which causes a blur which causes a dialog which causes a blur and
      // so on. By not causing the onChange to be called here, we avoid the loop because we
      // handle the onBlur safely.

      event.target.blur();
    }
  },
  render: function () {
    let picker;
    const label = typeof this.props.label === "undefined" ? (0, _languageHandler._t)("Power level") : this.props.label;

    if (this.state.custom) {
      picker = /*#__PURE__*/_react.default.createElement(_Field.default, {
        type: "number",
        label: label,
        max: this.props.maxValue,
        onBlur: this.onCustomBlur,
        onKeyDown: this.onCustomKeyDown,
        onChange: this.onCustomChange,
        value: String(this.state.customValue),
        disabled: this.props.disabled
      });
    } else {
      // Each level must have a definition in this.state.levelRoleMap
      let options = this.state.options.map(level => {
        return {
          value: level,
          text: Roles.textualPowerLevel(level, this.props.usersDefault)
        };
      });
      options.push({
        value: "SELECT_VALUE_CUSTOM",
        text: (0, _languageHandler._t)("Custom level")
      });
      options = options.map(op => {
        return /*#__PURE__*/_react.default.createElement("option", {
          value: op.value,
          key: op.value
        }, op.text);
      });
      picker = /*#__PURE__*/_react.default.createElement(_Field.default, {
        element: "select",
        label: label,
        onChange: this.onSelectChange,
        value: String(this.state.selectValue),
        disabled: this.props.disabled
      }, options);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_PowerSelector"
    }, picker);
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,