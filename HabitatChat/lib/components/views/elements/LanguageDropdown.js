"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var sdk = _interopRequireWildcard(require("../../../index"));

var languageHandler = _interopRequireWildcard(require("../../../languageHandler"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

/*
Copyright 2017 Marcel Radzio (MTRNord)
Copyright 2017 Vector Creations Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function languageMatchesSearchQuery(query, language) {
  if (language.label.toUpperCase().includes(query.toUpperCase())) return true;
  if (language.value.toUpperCase() === query.toUpperCase()) return true;
  return false;
}

class LanguageDropdown extends _react.default.Component {
  constructor(props) {
    super(props);
    this._onSearchChange = this._onSearchChange.bind(this);
    this.state = {
      searchQuery: '',
      langs: null
    };
  }

  componentDidMount() {
    languageHandler.getAllLanguagesFromJson().then(langs => {
      langs.sort(function (a, b) {
        if (a.label < b.label) return -1;
        if (a.label > b.label) return 1;
        return 0;
      });
      this.setState({
        langs
      });
    }).catch(() => {
      this.setState({
        langs: ['en']
      });
    });

    if (!this.props.value) {
      // If no value is given, we start with the first
      // country selected, but our parent component
      // doesn't know this, therefore we do this.
      const language = _SettingsStore.default.getValue("language", null,
      /*excludeDefault:*/
      true);

      if (language) {
        this.props.onOptionChange(language);
      } else {
        const language = languageHandler.normalizeLanguageKey(languageHandler.getLanguageFromBrowser());
        this.props.onOptionChange(language);
      }
    }
  }

  _onSearchChange(search) {
    this.setState({
      searchQuery: search
    });
  }

  render() {
    if (this.state.langs === null) {
      const Spinner = sdk.getComponent('elements.Spinner');
      return /*#__PURE__*/_react.default.createElement(Spinner, null);
    }

    const Dropdown = sdk.getComponent('elements.Dropdown');
    let displayedLanguages;

    if (this.state.searchQuery) {
      displayedLanguages = this.state.langs.filter(lang => {
        return languageMatchesSearchQuery(this.state.searchQuery, lang);
      });
    } else {
      displayedLanguages = this.state.langs;
    }

    const options = displayedLanguages.map(language => {
      return /*#__PURE__*/_react.default.createElement("div", {
        key: language.value
      }, language.label);
    }); // default value here too, otherwise we need to handle null / undefined
    // values between mounting and the initial value propgating

    let language = _SettingsStore.default.getValue("language", null,
    /*excludeDefault:*/
    true);

    let value = null;

    if (language) {
      value = this.props.value || language;
    } else {
      language = navigator.language || navigator.userLanguage;
      value = this.props.value || language;
    }

    return /*#__PURE__*/_react.default.createElement(Dropdown, {
      id: "mx_LanguageDropdown",
      className: this.props.className,
      onOptionChange: this.props.onOptionChange,
      onSearchChange: this._onSearchChange,
      searchEnabled: true,
      value: value,
      label: (0, languageHandler._t)("Language Dropdown"),
      disabled: this.props.disabled
    }, options);
  }

}

exports.default = LanguageDropdown;
LanguageDropdown.propTypes = {
  className: _propTypes.default.string,
  onOptionChange: _propTypes.default.func.isRequired,
  value: _propTypes.default.string
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,