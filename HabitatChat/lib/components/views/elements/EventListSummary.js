"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _MemberAvatar = _interopRequireDefault(require("../avatars/MemberAvatar"));

var _languageHandler = require("../../../languageHandler");

var _matrixJsSdk = require("matrix-js-sdk");

var _useStateToggle = require("../../../hooks/useStateToggle");

var _AccessibleButton = _interopRequireDefault(require("./AccessibleButton"));

/*
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const EventListSummary = ({
  events,
  children,
  threshold = 3,
  onToggle,
  startExpanded,
  summaryMembers = [],
  summaryText
}) => {
  const [expanded, toggleExpanded] = (0, _useStateToggle.useStateToggle)(startExpanded); // Whenever expanded changes call onToggle

  (0, _react.useEffect)(() => {
    if (onToggle) {
      onToggle();
    }
  }, [expanded]); // eslint-disable-line react-hooks/exhaustive-deps

  const eventIds = events.map(e => e.getId()).join(','); // If we are only given few events then just pass them through

  if (events.length < threshold) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EventListSummary",
      "data-scroll-tokens": eventIds
    }, children);
  }

  let body;

  if (expanded) {
    body = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EventListSummary_line"
    }, "\xA0"), children);
  } else {
    const avatars = summaryMembers.map(m => /*#__PURE__*/_react.default.createElement(_MemberAvatar.default, {
      key: m.userId,
      member: m,
      width: 14,
      height: 14
    }));
    body = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EventTile_line"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_EventTile_info"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_EventListSummary_avatars",
      onClick: toggleExpanded
    }, avatars), /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_TextualEvent mx_EventListSummary_summary"
    }, summaryText)));
  }

  return /*#__PURE__*/_react.default.createElement("li", {
    className: "mx_EventListSummary",
    "data-scroll-tokens": eventIds
  }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
    className: "mx_EventListSummary_toggle",
    onClick: toggleExpanded,
    "aria-expanded": expanded
  }, expanded ? (0, _languageHandler._t)('collapse') : (0, _languageHandler._t)('expand')), body);
};

EventListSummary.propTypes = {
  // An array of member events to summarise
  events: _propTypes.default.arrayOf(_propTypes.default.instanceOf(_matrixJsSdk.MatrixEvent)).isRequired,
  // An array of EventTiles to render when expanded
  children: _propTypes.default.arrayOf(_propTypes.default.element).isRequired,
  // The minimum number of events needed to trigger summarisation
  threshold: _propTypes.default.number,
  // Called when the event list expansion is toggled
  onToggle: _propTypes.default.func,
  // Whether or not to begin with state.expanded=true
  startExpanded: _propTypes.default.bool,
  // The list of room members for which to show avatars next to the summary
  summaryMembers: _propTypes.default.arrayOf(_propTypes.default.instanceOf(_matrixJsSdk.RoomMember)),
  // The text to show as the summary of this event list
  summaryText: _propTypes.default.string
};
var _default = EventListSummary;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,