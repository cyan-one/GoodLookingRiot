"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

/*
Copyright 2016 OpenMarket Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class DirectorySearchBox extends _react.default.Component {
  constructor() {
    super();
    this._collectInput = this._collectInput.bind(this);
    this._onClearClick = this._onClearClick.bind(this);
    this._onChange = this._onChange.bind(this);
    this._onKeyUp = this._onKeyUp.bind(this);
    this._onJoinButtonClick = this._onJoinButtonClick.bind(this);
    this.input = null;
    this.state = {
      value: ''
    };
  }

  _collectInput(e) {
    this.input = e;
  }

  _onClearClick() {
    this.setState({
      value: ''
    });

    if (this.input) {
      this.input.focus();

      if (this.props.onClear) {
        this.props.onClear();
      }
    }
  }

  _onChange(ev) {
    if (!this.input) return;
    this.setState({
      value: ev.target.value
    });

    if (this.props.onChange) {
      this.props.onChange(ev.target.value);
    }
  }

  _onKeyUp(ev) {
    if (ev.key == 'Enter' && this.props.showJoinButton) {
      if (this.props.onJoinClick) {
        this.props.onJoinClick(this.state.value);
      }
    }
  }

  _onJoinButtonClick() {
    if (this.props.onJoinClick) {
      this.props.onJoinClick(this.state.value);
    }
  }

  render() {
    const AccessibleButton = sdk.getComponent('elements.AccessibleButton');
    const searchbox_classes = {
      mx_DirectorySearchBox: true
    };
    searchbox_classes[this.props.className] = true;
    let join_button;

    if (this.props.showJoinButton) {
      join_button = /*#__PURE__*/_react.default.createElement(AccessibleButton, {
        className: "mx_DirectorySearchBox_joinButton",
        onClick: this._onJoinButtonClick
      }, (0, _languageHandler._t)("Join"));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DirectorySearchBox ".concat(this.props.className, " mx_textinput")
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "text",
      name: "dirsearch",
      value: this.state.value,
      className: "mx_textinput_icon mx_textinput_search",
      ref: this._collectInput,
      onChange: this._onChange,
      onKeyUp: this._onKeyUp,
      placeholder: this.props.placeholder,
      autoFocus: true
    }), join_button, /*#__PURE__*/_react.default.createElement(AccessibleButton, {
      className: "mx_DirectorySearchBox_clear",
      onClick: this._onClearClick
    }));
  }

}

exports.default = DirectorySearchBox;
DirectorySearchBox.propTypes = {
  className: _propTypes.default.string,
  onChange: _propTypes.default.func,
  onClear: _propTypes.default.func,
  onJoinClick: _propTypes.default.func,
  placeholder: _propTypes.default.string,
  showJoinButton: _propTypes.default.bool
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,