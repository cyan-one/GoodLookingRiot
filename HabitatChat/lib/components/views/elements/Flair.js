/*
 Copyright 2017 New Vector Ltd.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _FlairStore = _interopRequireDefault(require("../../../stores/FlairStore"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

class FlairAvatar extends _react.default.Component {
  constructor() {
    super();
    this.onClick = this.onClick.bind(this);
  }

  onClick(ev) {
    ev.preventDefault(); // Don't trigger onClick of parent element

    ev.stopPropagation();

    _dispatcher.default.dispatch({
      action: 'view_group',
      group_id: this.props.groupProfile.groupId
    });
  }

  render() {
    const httpUrl = this.context.mxcUrlToHttp(this.props.groupProfile.avatarUrl, 16, 16, 'scale', false);
    const tooltip = this.props.groupProfile.name ? "".concat(this.props.groupProfile.name, " (").concat(this.props.groupProfile.groupId, ")") : this.props.groupProfile.groupId;
    return /*#__PURE__*/_react.default.createElement("img", {
      src: httpUrl,
      width: "16",
      height: "16",
      onClick: this.onClick,
      title: tooltip
    });
  }

}

FlairAvatar.propTypes = {
  groupProfile: _propTypes.default.shape({
    groupId: _propTypes.default.string.isRequired,
    name: _propTypes.default.string,
    avatarUrl: _propTypes.default.string.isRequired
  })
};
FlairAvatar.contextType = _MatrixClientContext.default;

class Flair extends _react.default.Component {
  constructor() {
    super();
    this.state = {
      profiles: []
    };
  }

  componentDidMount() {
    this._unmounted = false;

    this._generateAvatars(this.props.groups);
  }

  componentWillUnmount() {
    this._unmounted = true;
  } // TODO: [REACT-WARNING] Replace with appropriate lifecycle event


  UNSAFE_componentWillReceiveProps(newProps) {
    // eslint-disable-line camelcase
    this._generateAvatars(newProps.groups);
  }

  async _getGroupProfiles(groups) {
    const profiles = [];

    for (const groupId of groups) {
      let groupProfile = null;

      try {
        groupProfile = await _FlairStore.default.getGroupProfileCached(this.context, groupId);
      } catch (err) {
        console.error('Could not get profile for group', groupId, err);
      }

      profiles.push(groupProfile);
    }

    return profiles.filter(p => p !== null);
  }

  async _generateAvatars(groups) {
    if (!groups || groups.length === 0) {
      return;
    }

    const profiles = await this._getGroupProfiles(groups);

    if (!this.unmounted) {
      this.setState({
        profiles: profiles.filter(profile => {
          return profile ? profile.avatarUrl : false;
        })
      });
    }
  }

  render() {
    if (this.state.profiles.length === 0) {
      return /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_Flair"
      });
    }

    const avatars = this.state.profiles.map((profile, index) => {
      return /*#__PURE__*/_react.default.createElement(FlairAvatar, {
        key: index,
        groupProfile: profile
      });
    });
    return /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_Flair"
    }, avatars);
  }

}

exports.default = Flair;
Flair.propTypes = {
  groups: _propTypes.default.arrayOf(_propTypes.default.string)
};
Flair.contextType = _MatrixClientContext.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,