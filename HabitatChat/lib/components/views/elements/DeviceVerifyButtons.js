"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var sdk = _interopRequireWildcard(require("../../../index"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var _languageHandler = require("../../../languageHandler");

/*
Copyright 2016 OpenMarket Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// XXX: This component is *not* cross-signing aware. Once everything is
// cross-signing, this component should just go away.
var _default = (0, _createReactClass.default)({
  displayName: 'DeviceVerifyButtons',
  propTypes: {
    userId: _propTypes.default.string.isRequired,
    device: _propTypes.default.object.isRequired
  },
  getInitialState: function () {
    return {
      device: this.props.device
    };
  },
  componentDidMount: function () {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    cli.on("deviceVerificationChanged", this.onDeviceVerificationChanged);
  },
  componentWillUnmount: function () {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    if (cli) {
      cli.removeListener("deviceVerificationChanged", this.onDeviceVerificationChanged);
    }
  },
  onDeviceVerificationChanged: function (userId, deviceId, deviceInfo) {
    if (userId === this.props.userId && deviceId === this.props.device.deviceId) {
      this.setState({
        device: deviceInfo
      });
    }
  },
  onVerifyClick: function () {
    const DeviceVerifyDialog = sdk.getComponent('views.dialogs.DeviceVerifyDialog');

    _Modal.default.createTrackedDialog('Device Verify Dialog', '', DeviceVerifyDialog, {
      userId: this.props.userId,
      device: this.state.device
    }, null,
    /* priority = */
    false,
    /* static = */
    true);
  },
  onUnverifyClick: function () {
    _MatrixClientPeg.MatrixClientPeg.get().setDeviceVerified(this.props.userId, this.state.device.deviceId, false);
  },
  onBlacklistClick: function () {
    _MatrixClientPeg.MatrixClientPeg.get().setDeviceBlocked(this.props.userId, this.state.device.deviceId, true);
  },
  onUnblacklistClick: function () {
    _MatrixClientPeg.MatrixClientPeg.get().setDeviceBlocked(this.props.userId, this.state.device.deviceId, false);
  },
  render: function () {
    let blacklistButton = null;
    let verifyButton = null;

    if (this.state.device.isBlocked()) {
      blacklistButton = /*#__PURE__*/_react.default.createElement("button", {
        className: "mx_MemberDeviceInfo_textButton mx_MemberDeviceInfo_unblacklist",
        onClick: this.onUnblacklistClick
      }, (0, _languageHandler._t)("Unblacklist"));
    } else {
      blacklistButton = /*#__PURE__*/_react.default.createElement("button", {
        className: "mx_MemberDeviceInfo_textButton mx_MemberDeviceInfo_blacklist",
        onClick: this.onBlacklistClick
      }, (0, _languageHandler._t)("Blacklist"));
    }

    if (this.state.device.isVerified()) {
      verifyButton = /*#__PURE__*/_react.default.createElement("button", {
        className: "mx_MemberDeviceInfo_textButton mx_MemberDeviceInfo_unverify",
        onClick: this.onUnverifyClick
      }, (0, _languageHandler._t)("Unverify"));
    } else {
      verifyButton = /*#__PURE__*/_react.default.createElement("button", {
        className: "mx_MemberDeviceInfo_textButton mx_MemberDeviceInfo_verify",
        onClick: this.onVerifyClick
      }, (0, _languageHandler._t)("Verify..."));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_DeviceVerifyButtons"
    }, verifyButton, blacklistButton);
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL0RldmljZVZlcmlmeUJ1dHRvbnMuanMiXSwibmFtZXMiOlsiZGlzcGxheU5hbWUiLCJwcm9wVHlwZXMiLCJ1c2VySWQiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwiZGV2aWNlIiwib2JqZWN0IiwiZ2V0SW5pdGlhbFN0YXRlIiwicHJvcHMiLCJjb21wb25lbnREaWRNb3VudCIsImNsaSIsIk1hdHJpeENsaWVudFBlZyIsImdldCIsIm9uIiwib25EZXZpY2VWZXJpZmljYXRpb25DaGFuZ2VkIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW1vdmVMaXN0ZW5lciIsImRldmljZUlkIiwiZGV2aWNlSW5mbyIsInNldFN0YXRlIiwib25WZXJpZnlDbGljayIsIkRldmljZVZlcmlmeURpYWxvZyIsInNkayIsImdldENvbXBvbmVudCIsIk1vZGFsIiwiY3JlYXRlVHJhY2tlZERpYWxvZyIsInN0YXRlIiwib25VbnZlcmlmeUNsaWNrIiwic2V0RGV2aWNlVmVyaWZpZWQiLCJvbkJsYWNrbGlzdENsaWNrIiwic2V0RGV2aWNlQmxvY2tlZCIsIm9uVW5ibGFja2xpc3RDbGljayIsInJlbmRlciIsImJsYWNrbGlzdEJ1dHRvbiIsInZlcmlmeUJ1dHRvbiIsImlzQmxvY2tlZCIsImlzVmVyaWZpZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZ0JBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQXRCQTs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBO0FBQ0E7ZUFDZSwrQkFBaUI7QUFDNUJBLEVBQUFBLFdBQVcsRUFBRSxxQkFEZTtBQUc1QkMsRUFBQUEsU0FBUyxFQUFFO0FBQ1BDLElBQUFBLE1BQU0sRUFBRUMsbUJBQVVDLE1BQVYsQ0FBaUJDLFVBRGxCO0FBRVBDLElBQUFBLE1BQU0sRUFBRUgsbUJBQVVJLE1BQVYsQ0FBaUJGO0FBRmxCLEdBSGlCO0FB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S0o7QUFEaEIsU0FFTSx5QkFBRyxXQUFILENBRk4sQ0FESjtBQU1IOztBQUVELFFBQUksS0FBS0gsS0FBTCxDQUFXckIsTUFBWCxDQUFrQitCLFVBQWxCLEVBQUosRUFBb0M7QUFDaENGLE1BQUFBLFlBQVksZ0JBQ1I7QUFBUSxRQUFBLFNBQVMsRUFBQyw2REFBbEI7QUFDRSxRQUFBLE9BQU8sRUFBRSxLQUFLUDtBQURoQixTQUVNLHlCQUFHLFVBQUgsQ0FGTixDQURKO0FBTUgsS0FQRCxNQU9PO0FBQ0hPLE1BQUFBLFlBQVksZ0JBQ1I7QUFBUSxRQUFBLFNBQVMsRUFBQywyREFBbEI7QUFDRSxRQUFBLE9BQU8sRUFBRSxLQUFLZDtBQURoQixTQUVNLHlCQUFHLFdBQUgsQ0FGTixDQURKO0FBTUg7O0FBRUQsd0JBQ0k7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLE9BQ01jLFlBRE4sRUFFTUQsZUFGTixDQURKO0FBTUg7QUFuRzJCLENBQWpCLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTYgT3Blbk1hcmtldCBMdGRcblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjcmVhdGVSZWFjdENsYXNzIGZyb20gJ2NyZWF0ZS1yZWFjdC1jbGFzcyc7XG5pbXBvcnQge01hdHJpeENsaWVudFBlZ30gZnJvbSAnLi4vLi4vLi4vTWF0cml4Q2xpZW50UGVnJztcbmltcG9ydCAqIGFzIHNkayBmcm9tICcuLi8uLi8uLi9pbmRleCc7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vLi4vLi4vTW9kYWwnO1xuaW1wb3J0IHsgX3QgfSBmcm9tICcuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXInO1xuXG4vLyBYWFg6IFRoaXMgY29tcG9uZW50IGlzICpub3QqIGNyb3NzLXNpZ25pbmcgYXdhcmUuIE9uY2UgZXZlcnl0aGluZyBpc1xuLy8gY3Jvc3Mtc2lnbmluZywgdGhpcyBjb21wb25lbnQgc2hvdWxkIGp1c3QgZ28gYXdheS5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVJlYWN0Q2xhc3Moe1xuICAgIGRpc3BsYXlOYW1lOiAnRGV2aWNlVmVyaWZ5QnV0dG9ucycsXG5cbiAgICBwcm9wVHlwZXM6IHtcbiAgICAgICAgdXNlcklkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgIGRldmljZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIH0sXG5cbiAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGV2aWNlOiB0aGlzLnByb3BzLmRldmljZSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBjbGkgPSBNYXRyaXhDbGllbnRQZWcuZ2V0KCk7XG4gICAgICAgIGNsaS5vbihcImRldmljZVZlcmlmaWNhdGlvbkNoYW5nZWRcIiwgdGhpcy5vbkRldmljZVZlcmlmaWNhdGlvbkNoYW5nZWQpO1xuICAgIH0sXG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGNsaSA9IE1hdHJpeENsaWVudFBlZy5nZXQoKTtcbiAgICAgICAgaWYgKGNsaSkge1xuICAgICAgICAgICAgY2xpLnJlbW92ZUxpc3RlbmVyKFwiZGV2aWNlVmVyaWZpY2F0aW9uQ2hhbmdlZFwiLCB0aGlzLm9uRGV2aWNlVmVyaWZpY2F0aW9uQ2hhbmdlZCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25EZXZpY2VWZXJpZmljYXRpb25DaGFuZ2VkOiBmdW5jdGlvbih1c2VySWQsIGRldmljZUlkLCBkZXZpY2VJbmZvKSB7XG4gICAgICAgIGlmICh1c2VySWQgPT09IHRoaXMucHJvcHMudXNlcklkICYmIGRldmljZUlkID09PSB0aGlzLnByb3BzLmRldmljZS5kZXZpY2VJZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGRldmljZTogZGV2aWNlSW5mbyB9KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvblZlcmlmeUNsaWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgRGV2aWNlVmVyaWZ5RGlhbG9nID0gc2RrLmdldENvbXBvbmVudCgndmlld3MuZGlhbG9ncy5EZXZpY2VWZXJpZnlEaWFsb2cnKTtcbiAgICAgICAgTW9kYWwuY3JlYXRlVHJhY2tlZERpYWxvZygnRGV2aWNlIFZlcmlmeSBEaWFsb2cnLCAnJywgRGV2aWNlVmVyaWZ5RGlhbG9nLCB7XG4gICAgICAgICAgICB1c2VySWQ6IHRoaXMucHJvcHMudXNlcklkLFxuICAgICAgICAgICAgZGV2aWNlOiB0aGlzLnN0YXRlLmRldmljZSxcbiAgICAgICAgfSwgbnVsbCwgLyogcHJpb3JpdHkgPSAqLyBmYWxzZSwgLyogc3RhdGljID0gKi8gdHJ1ZSk7XG4gICAgfSxcblxuICAgIG9uVW52ZXJpZnlDbGljazogZnVuY3Rpb24oKSB7XG4gICAgICAgIE1hdHJpeENsaWVudFBlZy5nZXQoKS5zZXREZXZpY2VWZXJpZmllZChcbiAgICAgICAgICAgIHRoaXMucHJvcHMudXNlcklkLCB0aGlzLnN0YXRlLmRldmljZS5kZXZpY2VJZCwgZmFsc2UsXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIG9uQmxhY2tsaXN0Q2xpY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICBNYXRyaXhDbGllbnRQZWcuZ2V0KCkuc2V0RGV2aWNlQmxvY2tlZChcbiAgICAgICAgICAgIHRoaXMucHJvcHMudXNlcklkLCB0aGlzLnN0YXRlLmRldmljZS5kZXZpY2VJZCwgdHJ1ZSxcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgb25VbmJsYWNrbGlzdENsaWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgTWF0cml4Q2xpZW50UGVnLmdldCgpLnNldERldmljZUJsb2NrZWQoXG4gICAgICAgICAgICB0aGlzLnByb3BzLnVzZXJJZCwgdGhpcy5zdGF0ZS5kZXZpY2UuZGV2aWNlSWQsIGZhbHNlLFxuICAgICAgICApO1xuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgYmxhY2tsaXN0QnV0dG9uID0gbnVsbDsgbGV0IHZlcmlmeUJ1dHRvbiA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZGV2aWNlLmlzQmxvY2tlZCgpKSB7XG4gICAgICAgICAgICBibGFja2xpc3RCdXR0b24gPSAoXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJteF9NZW1iZXJEZXZpY2VJbmZvX3RleHRCdXR0b24gbXhfTWVtYmVyRGV2aWNlSW5mb191bmJsYWNrbGlzdFwiXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uVW5ibGFja2xpc3RDbGlja30+XG4gICAgICAgICAgICAgICAgICAgIHsgX3QoXCJVbmJsYWNrbGlzdFwiKSB9XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmxhY2tsaXN0QnV0dG9uID0gKFxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwibXhfTWVtYmVyRGV2aWNlSW5mb190ZXh0QnV0dG9uIG14X01lbWJlckRldmljZUluZm9fYmxhY2tsaXN0XCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25CbGFja2xpc3RDbGlja30+XG4gICAgICAgICAgICAgICAgICAgIHsgX3QoXCJCbGFja2xpc3RcIikgfVxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmRldmljZS5pc1ZlcmlmaWVkKCkpIHtcbiAgICAgICAgICAgIHZlcmlmeUJ1dHRvbiA9IChcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cIm14X01lbWJlckRldmljZUluZm9fdGV4dEJ1dHRvbiBteF9NZW1iZXJEZXZpY2VJbmZvX3VudmVyaWZ5XCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25VbnZlcmlmeUNsaWNrfT5cbiAgICAgICAgICAgICAgICAgICAgeyBfdChcIlVudmVyaWZ5XCIpIH1cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2ZXJpZnlCdXR0b24gPSAoXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJteF9NZW1iZXJEZXZpY2VJbmZvX3RleHRCdXR0b24gbXhfTWVtYmVyRGV2aWNlSW5mb192ZXJpZnlcIlxuICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vblZlcmlmeUNsaWNrfT5cbiAgICAgICAgICAgICAgICAgICAgeyBfdChcIlZlcmlmeS4uLlwiKSB9XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfRGV2aWNlVmVyaWZ5QnV0dG9uc1wiID5cbiAgICAgICAgICAgICAgICB7IHZlcmlmeUJ1dHRvbiB9XG4gICAgICAgICAgICAgICAgeyBibGFja2xpc3RCdXR0b24gfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfSxcbn0pO1xuIl19