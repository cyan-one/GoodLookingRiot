"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

var _languageHandler = require("../../../languageHandler");

var _ToggleSwitch = _interopRequireDefault(require("./ToggleSwitch"));

/*
Copyright 2017 Travis Ralston
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var _default = (0, _createReactClass.default)({
  displayName: 'SettingsFlag',
  propTypes: {
    name: _propTypes.default.string.isRequired,
    level: _propTypes.default.string.isRequired,
    roomId: _propTypes.default.string,
    // for per-room settings
    label: _propTypes.default.string,
    // untranslated
    onChange: _propTypes.default.func,
    isExplicit: _propTypes.default.bool
  },
  getInitialState: function () {
    return {
      value: _SettingsStore.default.getValueAt(this.props.level, this.props.name, this.props.roomId, this.props.isExplicit)
    };
  },
  onChange: function (checked) {
    if (this.props.group && !checked) return;
    this.save(checked);
    this.setState({
      value: checked
    });
    if (this.props.onChange) this.props.onChange(checked);
  },
  save: function (val = undefined) {
    return _SettingsStore.default.setValue(this.props.name, this.props.roomId, this.props.level, val !== undefined ? val : this.state.value);
  },
  render: function () {
    const canChange = _SettingsStore.default.canSetValue(this.props.name, this.props.roomId, this.props.level);

    let label = this.props.label;
    if (!label) label = _SettingsStore.default.getDisplayName(this.props.name, this.props.level);else label = (0, _languageHandler._t)(label);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsFlag"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "mx_SettingsFlag_label"
    }, label), /*#__PURE__*/_react.default.createElement(_ToggleSwitch.default, {
      checked: this.state.value,
      onChange: this.onChange,
      disabled: !canChange,
      "aria-label": label
    }));
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2VsZW1lbnRzL1NldHRpbmdzRmxhZy5qcyJdLCJuYW1lcyI6WyJkaXNwbGF5TmFtZSIsInByb3BUeXBlcyIsIm5hbWUiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwibGV2ZWwiLCJyb29tSWQiLCJsYWJlbCIsIm9uQ2hhbmdlIiwiZnVuYyIsImlzRXhwbGljaXQiLCJib29sIiwiZ2V0SW5pdGlhbFN0YXRlIiwidmFsdWUiLCJTZXR0aW5nc1N0b3JlIiwiZ2V0VmFsdWVBdCIsInByb3BzIiwiY2hlY2tlZCIsImdyb3VwIiwic2F2ZSIsInNldFN0YXRlIiwidmFsIiwidW5kZWZpbmVkIiwic2V0VmFsdWUiLCJzdGF0ZSIsInJlbmRlciIsImNhbkNoYW5nZSIsImNhblNldFZhbHVlIiwiZ2V0RGlzcGxheU5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQWlCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUF0QkE7Ozs7Ozs7Ozs7Ozs7Ozs7ZUF3QmUsK0JBQWlCO0FBQzVCQSxFQUFBQSxXQUFXLEVBQUUsY0FEZTtBQUU1QkMsRUFBQUEsU0FBUyxFQUFFO0FBQ1BDLElBQUFBLElBQUksRUFBRUMsbUJBQVVDLE1BQVYsQ0FBaUJDLFVBRGhCO0FBRVBDLElBQUFBLEtBQUssRUFBRUgsbUJBQVVDLE1BQVYsQ0FBaUJDLFVBRmpCO0FBR1BFLElBQUFBLE1BQU0sRUFBRUosbUJBQVVDLE1BSFg7QUFHbUI7QUFDMUJJLElBQUFBLEtBQUssRUFBRUwsbUJBQVVDLE1BSlY7QUFJa0I7QUFDekJLLElBQUFBLFFBQVEsRUFBRU4sbUJBQVVPLElBTGI7QUFNUEMsSUFBQUEsVUFBVSxFQUFFUixtQkFBVVM7QUFOZixHQUZpQjtBQVc1QkMsRUFBQUEsZUFBZSxFQUFFLFlBQVc7QUFDeEIsV0FBTztBQUNIQyxNQUFBQSxLQUFLLEVBQUVDLHVCQUFjQyxVQUFkLENBQ0gsS0FBS0MsS0FBTCxDQUFXWCxLQURSLEVBRUgsS0FBS1csS0FBTCxDQUFXZixJQUZSLEVBR0gsS0FBS2UsS0FBTCxDQUFXVixNQUhSLEVBSUgsS0FBS1UsS0FBTCxDQUFXTixVQUpSO0FBREosS0FBUDtBQVFILEdBcEIyQjtBQXNCNUJGLEVBQUFBLFFBQVEsRUFBRSxVQUFTUyxPQUFULEVBQWtCO0FBQ3hCLFFBQUksS0FBS0QsS0FBTCxDQUFXRSxLQUFYLElBQW9CLENBQUNELE9BQXpCLEVBQWtDO0FBRWxDLFNBQUtFLElBQUwsQ0FBVUYsT0FBVjtBQUNBLFNBQUtHLFFBQUwsQ0FBYztBQUFFUCxNQUFBQSxLQUFLLEVBQUVJO0FBQVQsS0FBZDtBQUNBLFFBQUksS0FBS0QsS0FBTCxDQUFXUixRQUFmLEVBQXlCLEtBQUtRLEtBQUwsQ0FBV1IsUUFBWCxDQUFvQlMsT0FBcEI7QUFDNUIsR0E1QjJCO0FBOEI1QkUsRUFBQUEsSUFBSSxFQUFFLFVBQVNFLEdBQUcsR0FBR0MsU0FBZixFQUEwQjtBQUM1QixXQUFPUix1QkFBY1MsUUFBZCxDQUNILEtBQUtQLEtBQUwsQ0FBV2YsSUFEUixFQUVILEtBQUtlLEtBQUwsQ0FBV1YsTUFGUixFQUdILEtBQUtVLEtBQUwsQ0FBV1gsS0FIUixFQUlIZ0IsR0FBRyxLQUFLQyxTQUFSLEdBQW9CRCxHQUFwQixHQUEwQixLQUFLRyxLQUFMLENBQVdYLEtBSmxDLENBQVA7QUFNSCxHQXJDMkI7QUF1QzVCWSxFQUFBQSxNQUFNLEVBQUUsWUFBVztBQUNmLFVBQU1DLFNBQVMsR0FBR1osdUJBQWNhLFdBQWQsQ0FBMEIsS0FBS1gsS0FBTCxDQUFXZixJQUFyQyxFQUEyQyxLQUFLZSxLQUFMLENBQVdWLE1BQXRELEVBQThELEtBQUtVLEtBQUwsQ0FBV1gsS0FBekUsQ0FBbEI7O0FBRUEsUUFBSUUsS0FBSyxHQUFHLEtBQUtTLEtBQUwsQ0FBV1QsS0FBdkI7QUFDQSxRQUFJLENBQUNBLEtBQUwsRUFBWUEsS0FBSyxHQUFHTyx1QkFBY2MsY0FBZCxDQUE2QixLQUFLWixLQUFMLENBQVdmLElBQXhDLEVBQThDLEtBQUtlLEtBQUwsQ0FBV1gsS0FBekQsQ0FBUixDQUFaLEtBQ0tFLEtBQUssR0FBRyx5QkFBR0EsS0FBSCxDQUFSO0FBRUwsd0JBQ0k7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLG9CQUNJO0FBQU0sTUFBQSxTQUFTLEVBQUM7QUFBaEIsT0FBeUNBLEtBQXpDLENBREosZUFFSSw2QkFBQyxxQkFBRDtBQUFjLE1BQUEsT0FBTyxFQUFFLEtBQUtpQixLQUFMLENBQVdYLEtBQWxDO0FBQXlDLE1BQUEsUUFBUSxFQUFFLEtBQUtMLFFBQXhEO0FBQWtFLE1BQUEsUUFBUSxFQUFFLENBQUNrQixTQUE3RTtBQUF3RixvQkFBWW5CO0FBQXBHLE1BRkosQ0FESjtBQU1IO0FBcEQyQixDQUFqQixDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE3IFRyYXZpcyBSYWxzdG9uXG5Db3B5cmlnaHQgMjAxOSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3JlYXRlUmVhY3RDbGFzcyBmcm9tICdjcmVhdGUtcmVhY3QtY2xhc3MnO1xuaW1wb3J0IFNldHRpbmdzU3RvcmUgZnJvbSBcIi4uLy4uLy4uL3NldHRpbmdzL1NldHRpbmdzU3RvcmVcIjtcbmltcG9ydCB7IF90IH0gZnJvbSAnLi4vLi4vLi4vbGFuZ3VhZ2VIYW5kbGVyJztcbmltcG9ydCBUb2dnbGVTd2l0Y2ggZnJvbSBcIi4vVG9nZ2xlU3dpdGNoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVJlYWN0Q2xhc3Moe1xuICAgIGRpc3BsYXlOYW1lOiAnU2V0dGluZ3NGbGFnJyxcbiAgICBwcm9wVHlwZXM6IHtcbiAgICAgICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgICBsZXZlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgICByb29tSWQ6IFByb3BUeXBlcy5zdHJpbmcsIC8vIGZvciBwZXItcm9vbSBzZXR0aW5nc1xuICAgICAgICBsYWJlbDogUHJvcFR5cGVzLnN0cmluZywgLy8gdW50cmFuc2xhdGVkXG4gICAgICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgaXNFeHBsaWNpdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgfSxcblxuICAgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogU2V0dGluZ3NTdG9yZS5nZXRWYWx1ZUF0KFxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMubGV2ZWwsXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5uYW1lLFxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMucm9vbUlkLFxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaXNFeHBsaWNpdCxcbiAgICAgICAgICAgICksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIG9uQ2hhbmdlOiBmdW5jdGlvbihjaGVja2VkKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmdyb3VwICYmICFjaGVja2VkKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5zYXZlKGNoZWNrZWQpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IGNoZWNrZWQgfSk7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2hhbmdlKSB0aGlzLnByb3BzLm9uQ2hhbmdlKGNoZWNrZWQpO1xuICAgIH0sXG5cbiAgICBzYXZlOiBmdW5jdGlvbih2YWwgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIFNldHRpbmdzU3RvcmUuc2V0VmFsdWUoXG4gICAgICAgICAgICB0aGlzLnByb3BzLm5hbWUsXG4gICAgICAgICAgICB0aGlzLnByb3BzLnJvb21JZCxcbiAgICAgICAgICAgIHRoaXMucHJvcHMubGV2ZWwsXG4gICAgICAgICAgICB2YWwgIT09IHVuZGVmaW5lZCA/IHZhbCA6IHRoaXMuc3RhdGUudmFsdWUsXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGNhbkNoYW5nZSA9IFNldHRpbmdzU3RvcmUuY2FuU2V0VmFsdWUodGhpcy5wcm9wcy5uYW1lLCB0aGlzLnByb3BzLnJvb21JZCwgdGhpcy5wcm9wcy5sZXZlbCk7XG5cbiAgICAgICAgbGV0IGxhYmVsID0gdGhpcy5wcm9wcy5sYWJlbDtcbiAgICAgICAgaWYgKCFsYWJlbCkgbGFiZWwgPSBTZXR0aW5nc1N0b3JlLmdldERpc3BsYXlOYW1lKHRoaXMucHJvcHMubmFtZSwgdGhpcy5wcm9wcy5sZXZlbCk7XG4gICAgICAgIGVsc2UgbGFiZWwgPSBfdChsYWJlbCk7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXhfU2V0dGluZ3NGbGFnXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibXhfU2V0dGluZ3NGbGFnX2xhYmVsXCI+e2xhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8VG9nZ2xlU3dpdGNoIGNoZWNrZWQ9e3RoaXMuc3RhdGUudmFsdWV9IG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlfSBkaXNhYmxlZD17IWNhbkNoYW5nZX0gYXJpYS1sYWJlbD17bGFiZWx9IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9LFxufSk7XG4iXX0=