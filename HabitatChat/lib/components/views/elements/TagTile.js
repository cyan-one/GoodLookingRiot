"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _classnames = _interopRequireDefault(require("classnames"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _Keyboard = require("../../../Keyboard");

var FormattingUtils = _interopRequireWildcard(require("../../../utils/FormattingUtils"));

var _FlairStore = _interopRequireDefault(require("../../../stores/FlairStore"));

var _GroupStore = _interopRequireDefault(require("../../../stores/GroupStore"));

var _TagOrderStore = _interopRequireDefault(require("../../../stores/TagOrderStore"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

/*
Copyright 2017 New Vector Ltd.
Copyright 2018 Michael Telatynski <7t3chguy@gmail.com>
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// A class for a child of TagPanel (possibly wrapped in a DNDTagTile) that represents
// a thing to click on for the user to filter the visible rooms in the RoomList to:
//  - Rooms that are part of the group
//  - Direct messages with members of the group
// with the intention that this could be expanded to arbitrary tags in future.
var _default = (0, _createReactClass.default)({
  displayName: 'TagTile',
  propTypes: {
    // A string tag such as "m.favourite" or a group ID such as "+groupid:domain.bla"
    // For now, only group IDs are handled.
    tag: _propTypes.default.string,
    contextMenuButtonRef: _propTypes.default.object,
    openMenu: _propTypes.default.func,
    menuDisplayed: _propTypes.default.bool
  },
  statics: {
    contextType: _MatrixClientContext.default
  },

  getInitialState() {
    return {
      // Whether the mouse is over the tile
      hover: false,
      // The profile data of the group if this.props.tag is a group ID
      profile: null
    };
  },

  componentDidMount() {
    this.unmounted = false;

    if (this.props.tag[0] === '+') {
      _FlairStore.default.addListener('updateGroupProfile', this._onFlairStoreUpdated);

      this._onFlairStoreUpdated(); // New rooms or members may have been added to the group, fetch async


      this._refreshGroup(this.props.tag);
    }
  },

  componentWillUnmount() {
    this.unmounted = true;

    if (this.props.tag[0] === '+') {
      _FlairStore.default.removeListener('updateGroupProfile', this._onFlairStoreUpdated);
    }
  },

  _onFlairStoreUpdated() {
    if (this.unmounted) return;

    _FlairStore.default.getGroupProfileCached(this.context, this.props.tag).then(profile => {
      if (this.unmounted) return;
      this.setState({
        profile
      });
    }).catch(err => {
      console.warn('Could not fetch group profile for ' + this.props.tag, err);
    });
  },

  _refreshGroup(groupId) {
    _GroupStore.default.refreshGroupRooms(groupId);

    _GroupStore.default.refreshGroupMembers(groupId);
  },

  onClick: function (e) {
    e.preventDefault();
    e.stopPropagation();

    _dispatcher.default.dispatch({
      action: 'select_tag',
      tag: this.props.tag,
      ctrlOrCmdKey: (0, _Keyboard.isOnlyCtrlOrCmdIgnoreShiftKeyEvent)(e),
      shiftKey: e.shiftKey
    });

    if (this.props.tag[0] === '+') {
      // New rooms or members may have been added to the group, fetch async
      this._refreshGroup(this.props.tag);
    }
  },
  onMouseOver: function () {
    this.setState({
      hover: true
    });
  },
  onMouseOut: function () {
    this.setState({
      hover: false
    });
  },
  openMenu: function (e) {
    // Prevent the TagTile onClick event firing as well
    e.stopPropagation();
    e.preventDefault();
    this.setState({
      hover: false
    });
    this.props.openMenu();
  },
  render: function () {
    const BaseAvatar = sdk.getComponent('avatars.BaseAvatar');
    const profile = this.state.profile || {};
    const name = profile.name || this.props.tag;
    const avatarHeight = 40;
    const httpUrl = profile.avatarUrl ? this.context.mxcUrlToHttp(profile.avatarUrl, avatarHeight, avatarHeight, "crop") : null;
    const className = (0, _classnames.default)({
      mx_TagTile: true,
      mx_TagTile_selected: this.props.selected
    });

    const badge = _TagOrderStore.default.getGroupBadge(this.props.tag);

    let badgeElement;

    if (badge && !this.state.hover && !this.props.menuDisplayed) {
      const badgeClasses = (0, _classnames.default)({
        "mx_TagTile_badge": true,
        "mx_TagTile_badgeHighlight": badge.highlight
      });
      badgeElement = /*#__PURE__*/_react.default.createElement("div", {
        className: badgeClasses
      }, FormattingUtils.formatCount(badge.count));
    } // FIXME: this ought to use AccessibleButton for a11y but that causes onMouseOut/onMouseOver to fire too much


    const contextButton = this.state.hover || this.props.menuDisplayed ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_TagTile_context_button",
      onClick: this.openMenu,
      ref: this.props.contextMenuButtonRef
    }, "\u00B7\u00B7\u00B7") : /*#__PURE__*/_react.default.createElement("div", {
      ref: this.props.contextMenuButtonRef
    });
    const AccessibleTooltipButton = sdk.getComponent("elements.AccessibleTooltipButton");
    return /*#__PURE__*/_react.default.createElement(AccessibleTooltipButton, {
      className: className,
      onClick: this.onClick,
      onContextMenu: this.openMenu,
      title: name
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_TagTile_avatar",
      onMouseOver: this.onMouseOver,
      onMouseOut: this.onMouseOut
    }, /*#__PURE__*/_react.default.createElement(BaseAvatar, {
      name: name,
      idName: this.props.tag,
      url: httpUrl,
      width: avatarHeight,
      height: avatarHeight
    }), contextButton, badgeElement));
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,