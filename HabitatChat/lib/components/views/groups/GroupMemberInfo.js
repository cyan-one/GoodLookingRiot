"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

var _groups = require("../../../groups");

var _GroupStore = _interopRequireDefault(require("../../../stores/GroupStore"));

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _AutoHideScrollbar = _interopRequireDefault(require("../../structures/AutoHideScrollbar"));

var _actions = require("../../../dispatcher/actions");

/*
Copyright 2017 Vector Creations Ltd
Copyright 2017 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var _default = (0, _createReactClass.default)({
  displayName: 'GroupMemberInfo',
  statics: {
    contextType: _MatrixClientContext.default
  },
  propTypes: {
    groupId: _propTypes.default.string,
    groupMember: _groups.GroupMemberType,
    isInvited: _propTypes.default.bool
  },
  getInitialState: function () {
    return {
      removingUser: false,
      isUserPrivilegedInGroup: null
    };
  },
  componentDidMount: function () {
    this._unmounted = false;

    this._initGroupStore(this.props.groupId);
  },

  // TODO: [REACT-WARNING] Replace with appropriate lifecycle event
  UNSAFE_componentWillReceiveProps(newProps) {
    if (newProps.groupId !== this.props.groupId) {
      this._unregisterGroupStore(this.props.groupId);

      this._initGroupStore(newProps.groupId);
    }
  },

  componentWillUnmount() {
    this._unmounted = true;

    this._unregisterGroupStore(this.props.groupId);
  },

  _initGroupStore(groupId) {
    _GroupStore.default.registerListener(groupId, this.onGroupStoreUpdated);
  },

  _unregisterGroupStore(groupId) {
    _GroupStore.default.unregisterListener(this.onGroupStoreUpdated);
  },

  onGroupStoreUpdated: function () {
    if (this._unmounted) return;
    this.setState({
      isUserInvited: _GroupStore.default.getGroupInvitedMembers(this.props.groupId).some(m => m.userId === this.props.groupMember.userId),
      isUserPrivilegedInGroup: _GroupStore.default.isUserPrivileged(this.props.groupId)
    });
  },
  _onKick: function () {
    const ConfirmUserActionDialog = sdk.getComponent("dialogs.ConfirmUserActionDialog");

    _Modal.default.createDialog(ConfirmUserActionDialog, {
      matrixClient: this.context,
      groupMember: this.props.groupMember,
      action: this.state.isUserInvited ? (0, _languageHandler._t)('Disinvite') : (0, _languageHandler._t)('Remove from community'),
      title: this.state.isUserInvited ? (0, _languageHandler._t)('Disinvite this user from community?') : (0, _languageHandler._t)('Remove this user from community?'),
      danger: true,
      onFinished: proceed => {
        if (!proceed) return;
        this.setState({
          removingUser: true
        });
        this.context.removeUserFromGroup(this.props.groupId, this.props.groupMember.userId).then(() => {
          // return to the user list
          _dispatcher.default.dispatch({
            action: _actions.Action.ViewUser,
            member: null
          });
        }).catch(e => {
          const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

          _Modal.default.createTrackedDialog('Failed to remove user from group', '', ErrorDialog, {
            title: (0, _languageHandler._t)('Error'),
            description: this.state.isUserInvited ? (0, _languageHandler._t)('Failed to withdraw invitation') : (0, _languageHandler._t)('Failed to remove user from community')
          });
        }).finally(() => {
          this.setState({
            removingUser: false
          });
        });
      }
    });
  },
  _onCancel: function (e) {
    // Go back to the user list
    _dispatcher.default.dispatch({
      action: _actions.Action.ViewUser,
      member: null
    });
  },

  onRoomTileClick(roomId) {
    _dispatcher.default.dispatch({
      action: 'view_room',
      room_id: roomId
    });
  },

  render: function () {
    if (this.state.removingUser) {
      const Spinner = sdk.getComponent("elements.Spinner");
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MemberInfo"
      }, /*#__PURE__*/_react.default.createElement(Spinner, null));
    }

    let adminTools;

    if (this.state.isUserPrivilegedInGroup) {
      const kickButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_MemberInfo_field",
        onClick: this._onKick
      }, this.state.isUserInvited ? (0, _languageHandler._t)('Disinvite') : (0, _languageHandler._t)('Remove from community')); // No make/revoke admin API yet

      /*const opLabel = this.state.isTargetMod ? _t("Revoke Moderator") : _t("Make Moderator");
      giveModButton = <AccessibleButton className="mx_MemberInfo_field" onClick={this.onModToggle}>
          {giveOpLabel}
      </AccessibleButton>;*/


      if (kickButton) {
        adminTools = /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_MemberInfo_adminTools"
        }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Admin Tools")), /*#__PURE__*/_react.default.createElement("div", {
          className: "mx_MemberInfo_buttons"
        }, kickButton));
      }
    }

    const avatarUrl = this.props.groupMember.avatarUrl;
    let avatarElement;

    if (avatarUrl) {
      const httpUrl = this.context.mxcUrlToHttp(avatarUrl, 800, 800);
      avatarElement = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MemberInfo_avatar"
      }, /*#__PURE__*/_react.default.createElement("img", {
        src: httpUrl
      }));
    }

    const groupMemberName = this.props.groupMember.displayname || this.props.groupMember.userId;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberInfo",
      role: "tabpanel"
    }, /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, null, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_MemberInfo_cancel",
      onClick: this._onCancel
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: require("../../../../res/img/cancel.svg"),
      width: "18",
      height: "18",
      className: "mx_filterFlipColor"
    })), avatarElement, /*#__PURE__*/_react.default.createElement("h2", null, groupMemberName), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberInfo_profile"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberInfo_profileField"
    }, this.props.groupMember.userId)), adminTools));
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,