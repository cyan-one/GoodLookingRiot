"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _languageHandler = require("../../../languageHandler");

var sdk = _interopRequireWildcard(require("../../../index"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _GroupStore = _interopRequireDefault(require("../../../stores/GroupStore"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _GroupAddressPicker = require("../../../GroupAddressPicker");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _TintableSvg = _interopRequireDefault(require("../elements/TintableSvg"));

var _RightPanelStorePhases = require("../../../stores/RightPanelStorePhases");

var _AutoHideScrollbar = _interopRequireDefault(require("../../structures/AutoHideScrollbar"));

/*
Copyright 2017 Vector Creations Ltd.
Copyright 2017 New Vector Ltd.
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const INITIAL_LOAD_NUM_MEMBERS = 30;

var _default = (0, _createReactClass.default)({
  displayName: 'GroupMemberList',
  propTypes: {
    groupId: _propTypes.default.string.isRequired
  },
  getInitialState: function () {
    return {
      members: null,
      membersError: null,
      invitedMembers: null,
      invitedMembersError: null,
      truncateAt: INITIAL_LOAD_NUM_MEMBERS
    };
  },
  componentDidMount: function () {
    this._unmounted = false;

    this._initGroupStore(this.props.groupId);
  },
  componentWillUnmount: function () {
    this._unmounted = true;
  },
  _initGroupStore: function (groupId) {
    _GroupStore.default.registerListener(groupId, () => {
      this._fetchMembers();
    });

    _GroupStore.default.on('error', (err, errorGroupId, stateKey) => {
      if (this._unmounted || groupId !== errorGroupId) return;

      if (stateKey === _GroupStore.default.STATE_KEY.GroupMembers) {
        this.setState({
          membersError: err
        });
      }

      if (stateKey === _GroupStore.default.STATE_KEY.GroupInvitedMembers) {
        this.setState({
          invitedMembersError: err
        });
      }
    });
  },
  _fetchMembers: function () {
    if (this._unmounted) return;
    this.setState({
      members: _GroupStore.default.getGroupMembers(this.props.groupId),
      invitedMembers: _GroupStore.default.getGroupInvitedMembers(this.props.groupId)
    });
  },
  _createOverflowTile: function (overflowCount, totalCount) {
    // For now we'll pretend this is any entity. It should probably be a separate tile.
    const EntityTile = sdk.getComponent("rooms.EntityTile");
    const BaseAvatar = sdk.getComponent("avatars.BaseAvatar");
    const text = (0, _languageHandler._t)("and %(count)s others...", {
      count: overflowCount
    });
    return /*#__PURE__*/_react.default.createElement(EntityTile, {
      className: "mx_EntityTile_ellipsis",
      avatarJsx: /*#__PURE__*/_react.default.createElement(BaseAvatar, {
        url: require("../../../../res/img/ellipsis.svg"),
        name: "...",
        width: 36,
        height: 36
      }),
      name: text,
      presenceState: "online",
      suppressOnHover: true,
      onClick: this._showFullMemberList
    });
  },
  _showFullMemberList: function () {
    this.setState({
      truncateAt: -1
    });
  },
  onSearchQueryChanged: function (ev) {
    this.setState({
      searchQuery: ev.target.value
    });
  },
  makeGroupMemberTiles: function (query, memberList, memberListError) {
    if (memberListError) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "warning"
      }, (0, _languageHandler._t)("Failed to load group members"));
    }

    const GroupMemberTile = sdk.getComponent("groups.GroupMemberTile");
    const TruncatedList = sdk.getComponent("elements.TruncatedList");
    query = (query || "").toLowerCase();

    if (query) {
      memberList = memberList.filter(m => {
        const matchesName = (m.displayname || "").toLowerCase().includes(query);
        const matchesId = m.userId.toLowerCase().includes(query);

        if (!matchesName && !matchesId) {
          return false;
        }

        return true;
      });
    }

    const uniqueMembers = {};
    memberList.forEach(m => {
      if (!uniqueMembers[m.userId]) uniqueMembers[m.userId] = m;
    });
    memberList = Object.keys(uniqueMembers).map(userId => uniqueMembers[userId]); // Descending sort on isPrivileged = true = 1 to isPrivileged = false = 0

    memberList.sort((a, b) => {
      if (a.isPrivileged === b.isPrivileged) {
        const aName = a.displayname || a.userId;
        const bName = b.displayname || b.userId;

        if (aName < bName) {
          return -1;
        } else if (aName > bName) {
          return 1;
        } else {
          return 0;
        }
      } else {
        return a.isPrivileged ? -1 : 1;
      }
    });
    const memberTiles = memberList.map(m => {
      return /*#__PURE__*/_react.default.createElement(GroupMemberTile, {
        key: m.userId,
        groupId: this.props.groupId,
        member: m
      });
    });
    return /*#__PURE__*/_react.default.createElement(TruncatedList, {
      className: "mx_MemberList_wrapper",
      truncateAt: this.state.truncateAt,
      createOverflowElement: this._createOverflowTile
    }, memberTiles);
  },

  onInviteToGroupButtonClick() {
    (0, _GroupAddressPicker.showGroupInviteDialog)(this.props.groupId).then(() => {
      _dispatcher.default.dispatch({
        action: 'set_right_panel_phase',
        phase: _RightPanelStorePhases.RIGHT_PANEL_PHASES.GroupMemberList,
        groupId: this.props.groupId
      });
    });
  },

  render: function () {
    if (this.state.fetching || this.state.fetchingInvitedMembers) {
      const Spinner = sdk.getComponent("elements.Spinner");
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MemberList"
      }, /*#__PURE__*/_react.default.createElement(Spinner, null));
    }

    const inputBox = /*#__PURE__*/_react.default.createElement("input", {
      className: "mx_GroupMemberList_query mx_textinput",
      id: "mx_GroupMemberList_query",
      type: "text",
      onChange: this.onSearchQueryChanged,
      value: this.state.searchQuery,
      placeholder: (0, _languageHandler._t)('Filter community members'),
      autoComplete: "off"
    });

    const joined = this.state.members ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberList_joined"
    }, this.makeGroupMemberTiles(this.state.searchQuery, this.state.members, this.state.membersError)) : /*#__PURE__*/_react.default.createElement("div", null);
    const invited = this.state.invitedMembers && this.state.invitedMembers.length > 0 ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberList_invited"
    }, /*#__PURE__*/_react.default.createElement("h2", null, (0, _languageHandler._t)("Invited")), this.makeGroupMemberTiles(this.state.searchQuery, this.state.invitedMembers, this.state.invitedMembersError)) : /*#__PURE__*/_react.default.createElement("div", null);
    let inviteButton;

    if (_GroupStore.default.isUserPrivileged(this.props.groupId)) {
      inviteButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_RightPanel_invite",
        onClick: this.onInviteToGroupButtonClick
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RightPanel_icon"
      }, /*#__PURE__*/_react.default.createElement(_TintableSvg.default, {
        src: require("../../../../res/img/icon-invite-people.svg"),
        width: "18",
        height: "14"
      })), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RightPanel_message"
      }, (0, _languageHandler._t)('Invite to this community')));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberList",
      role: "tabpanel"
    }, inviteButton, /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, null, joined, invited), inputBox);
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,