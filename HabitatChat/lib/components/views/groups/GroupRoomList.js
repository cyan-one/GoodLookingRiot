"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _languageHandler = require("../../../languageHandler");

var sdk = _interopRequireWildcard(require("../../../index"));

var _GroupStore = _interopRequireDefault(require("../../../stores/GroupStore"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _GroupAddressPicker = require("../../../GroupAddressPicker");

var _AccessibleButton = _interopRequireDefault(require("../elements/AccessibleButton"));

var _TintableSvg = _interopRequireDefault(require("../elements/TintableSvg"));

var _AutoHideScrollbar = _interopRequireDefault(require("../../structures/AutoHideScrollbar"));

/*
Copyright 2017 New Vector Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const INITIAL_LOAD_NUM_ROOMS = 30;

var _default = (0, _createReactClass.default)({
  displayName: "GroupRoomList",
  propTypes: {
    groupId: _propTypes.default.string.isRequired
  },
  getInitialState: function () {
    return {
      rooms: null,
      truncateAt: INITIAL_LOAD_NUM_ROOMS,
      searchQuery: ""
    };
  },
  componentDidMount: function () {
    this._unmounted = false;

    this._initGroupStore(this.props.groupId);
  },

  componentWillUnmount() {
    this._unmounted = true;

    this._unregisterGroupStore();
  },

  _unregisterGroupStore() {
    _GroupStore.default.unregisterListener(this.onGroupStoreUpdated);
  },

  _initGroupStore: function (groupId) {
    _GroupStore.default.registerListener(groupId, this.onGroupStoreUpdated); // XXX: This should be more fluxy - let's get the error from GroupStore .getError or something
    // XXX: This is also leaked - we should remove it when unmounting


    _GroupStore.default.on('error', (err, errorGroupId) => {
      if (errorGroupId !== groupId) return;
      this.setState({
        rooms: null
      });
    });
  },
  onGroupStoreUpdated: function () {
    if (this._unmounted) return;
    this.setState({
      rooms: _GroupStore.default.getGroupRooms(this.props.groupId)
    });
  },
  _createOverflowTile: function (overflowCount, totalCount) {
    // For now we'll pretend this is any entity. It should probably be a separate tile.
    const EntityTile = sdk.getComponent("rooms.EntityTile");
    const BaseAvatar = sdk.getComponent("avatars.BaseAvatar");
    const text = (0, _languageHandler._t)("and %(count)s others...", {
      count: overflowCount
    });
    return /*#__PURE__*/_react.default.createElement(EntityTile, {
      className: "mx_EntityTile_ellipsis",
      avatarJsx: /*#__PURE__*/_react.default.createElement(BaseAvatar, {
        url: require("../../../../res/img/ellipsis.svg"),
        name: "...",
        width: 36,
        height: 36
      }),
      name: text,
      presenceState: "online",
      suppressOnHover: true,
      onClick: this._showFullRoomList
    });
  },
  _showFullRoomList: function () {
    this.setState({
      truncateAt: -1
    });
  },
  onSearchQueryChanged: function (ev) {
    this.setState({
      searchQuery: ev.target.value
    });
  },

  onAddRoomToGroupButtonClick() {
    (0, _GroupAddressPicker.showGroupAddRoomDialog)(this.props.groupId).then(() => {
      this.forceUpdate();
    });
  },

  makeGroupRoomTiles: function (query) {
    const GroupRoomTile = sdk.getComponent("groups.GroupRoomTile");
    query = (query || "").toLowerCase();
    let roomList = this.state.rooms;

    if (query) {
      roomList = roomList.filter(room => {
        const matchesName = (room.name || "").toLowerCase().includes(query);
        const matchesAlias = (room.canonicalAlias || "").toLowerCase().includes(query);
        return matchesName || matchesAlias;
      });
    }

    roomList = roomList.map((groupRoom, index) => {
      return /*#__PURE__*/_react.default.createElement(GroupRoomTile, {
        key: index,
        groupId: this.props.groupId,
        groupRoom: groupRoom
      });
    });
    return roomList;
  },
  render: function () {
    if (this.state.rooms === null) {
      return null;
    }

    let inviteButton;

    if (_GroupStore.default.isUserPrivileged(this.props.groupId)) {
      inviteButton = /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
        className: "mx_RightPanel_invite",
        onClick: this.onAddRoomToGroupButtonClick
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RightPanel_icon"
      }, /*#__PURE__*/_react.default.createElement(_TintableSvg.default, {
        src: require("../../../../res/img/icons-room-add.svg"),
        width: "18",
        height: "14"
      })), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RightPanel_message"
      }, (0, _languageHandler._t)('Add rooms to this community')));
    }

    const inputBox = /*#__PURE__*/_react.default.createElement("input", {
      className: "mx_GroupRoomList_query mx_textinput",
      id: "mx_GroupRoomList_query",
      type: "text",
      onChange: this.onSearchQueryChanged,
      value: this.state.searchQuery,
      placeholder: (0, _languageHandler._t)('Filter community rooms'),
      autoComplete: "off"
    });

    const TruncatedList = sdk.getComponent("elements.TruncatedList");
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupRoomList",
      role: "tabpanel"
    }, inviteButton, /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, {
      className: "mx_GroupRoomList_joined mx_GroupRoomList_outerWrapper"
    }, /*#__PURE__*/_react.default.createElement(TruncatedList, {
      className: "mx_GroupRoomList_wrapper",
      truncateAt: this.state.truncateAt,
      createOverflowElement: this._createOverflowTile
    }, this.makeGroupRoomTiles(this.state.searchQuery))), inputBox);
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,