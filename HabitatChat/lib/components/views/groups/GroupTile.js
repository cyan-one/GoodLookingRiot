"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _reactBeautifulDnd = require("react-beautiful-dnd");

var sdk = _interopRequireWildcard(require("../../../index"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _FlairStore = _interopRequireDefault(require("../../../stores/FlairStore"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

/*
Copyright 2017 Vector Creations Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function nop() {}

const GroupTile = (0, _createReactClass.default)({
  displayName: 'GroupTile',
  propTypes: {
    groupId: _propTypes.default.string.isRequired,
    // Whether to show the short description of the group on the tile
    showDescription: _propTypes.default.bool,
    // Height of the group avatar in pixels
    avatarHeight: _propTypes.default.number,
    draggable: _propTypes.default.bool
  },
  statics: {
    contextType: _MatrixClientContext.default
  },

  getInitialState() {
    return {
      profile: null
    };
  },

  getDefaultProps() {
    return {
      showDescription: true,
      avatarHeight: 50,
      draggable: true
    };
  },

  componentDidMount: function () {
    _FlairStore.default.getGroupProfileCached(this.context, this.props.groupId).then(profile => {
      this.setState({
        profile
      });
    }).catch(err => {
      console.error('Error whilst getting cached profile for GroupTile', err);
    });
  },
  onMouseDown: function (e) {
    e.preventDefault();

    _dispatcher.default.dispatch({
      action: 'view_group',
      group_id: this.props.groupId
    });
  },
  render: function () {
    const BaseAvatar = sdk.getComponent('avatars.BaseAvatar');
    const AccessibleButton = sdk.getComponent('elements.AccessibleButton');
    const profile = this.state.profile || {};
    const name = profile.name || this.props.groupId;
    const avatarHeight = this.props.avatarHeight;
    const descElement = this.props.showDescription ? /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupTile_desc"
    }, profile.shortDescription) : /*#__PURE__*/_react.default.createElement("div", null);
    const httpUrl = profile.avatarUrl ? this.context.mxcUrlToHttp(profile.avatarUrl, avatarHeight, avatarHeight, "crop") : null;

    let avatarElement = /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupTile_avatar"
    }, /*#__PURE__*/_react.default.createElement(BaseAvatar, {
      name: name,
      idName: this.props.groupId,
      url: httpUrl,
      width: avatarHeight,
      height: avatarHeight
    }));

    if (this.props.draggable) {
      const avatarClone = avatarElement;
      avatarElement = /*#__PURE__*/_react.default.createElement(_reactBeautifulDnd.Droppable, {
        droppableId: "my-groups-droppable",
        type: "draggable-TagTile"
      }, (droppableProvided, droppableSnapshot) => /*#__PURE__*/_react.default.createElement("div", {
        ref: droppableProvided.innerRef
      }, /*#__PURE__*/_react.default.createElement(_reactBeautifulDnd.Draggable, {
        key: "GroupTile " + this.props.groupId,
        draggableId: "GroupTile " + this.props.groupId,
        index: this.props.groupId,
        type: "draggable-TagTile"
      }, (provided, snapshot) => /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
        ref: provided.innerRef
      }, provided.draggableProps, provided.dragHandleProps), avatarClone), provided.placeholder ? avatarClone : /*#__PURE__*/_react.default.createElement("div", null)))));
    } // XXX: Use onMouseDown as a workaround for https://github.com/atlassian/react-beautiful-dnd/issues/273
    // instead of onClick. Otherwise we experience https://github.com/vector-im/riot-web/issues/6156


    return /*#__PURE__*/_react.default.createElement(AccessibleButton, {
      className: "mx_GroupTile",
      onMouseDown: this.onMouseDown,
      onClick: nop
    }, avatarElement, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupTile_profile"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupTile_name"
    }, name), descElement, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_GroupTile_groupId"
    }, this.props.groupId)));
  }
});
var _default = GroupTile;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,