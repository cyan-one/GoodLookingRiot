"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _languageHandler = require("../../../languageHandler");

var _classnames = _interopRequireDefault(require("classnames"));

var _MatrixClientPeg = require("../../../MatrixClientPeg");

var _ContextMenu = require("../../structures/ContextMenu");

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _RovingTabIndex = require("../../../accessibility/RovingTabIndex");

/*
Copyright 2017, 2018 New Vector Ltd
Copyright 2018 Michael Telatynski <7t3chguy@gmail.com>
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// XXX this class copies a lot from RoomTile.js
var _default = (0, _createReactClass.default)({
  displayName: 'GroupInviteTile',
  propTypes: {
    group: _propTypes.default.object.isRequired
  },
  statics: {
    contextType: _MatrixClientContext.default
  },
  getInitialState: function () {
    return {
      hover: false,
      badgeHover: false,
      menuDisplayed: false,
      selected: this.props.group.groupId === null // XXX: this needs linking to LoggedInView/GroupView state

    };
  },
  onClick: function (e) {
    _dispatcher.default.dispatch({
      action: 'view_group',
      group_id: this.props.group.groupId
    });
  },
  onMouseEnter: function () {
    const state = {
      hover: true
    }; // Only allow non-guests to access the context menu

    if (!this.context.isGuest()) {
      state.badgeHover = true;
    }

    this.setState(state);
  },
  onMouseLeave: function () {
    this.setState({
      badgeHover: false,
      hover: false
    });
  },
  _showContextMenu: function (boundingClientRect) {
    // Only allow non-guests to access the context menu
    if (_MatrixClientPeg.MatrixClientPeg.get().isGuest()) return;
    const state = {
      contextMenuPosition: boundingClientRect
    }; // If the badge is clicked, then no longer show tooltip

    if (this.props.collapsed) {
      state.hover = false;
    }

    this.setState(state);
  },
  onContextMenuButtonClick: function (e) {
    // Prevent the RoomTile onClick event firing as well
    e.stopPropagation();
    e.preventDefault();

    this._showContextMenu(e.target.getBoundingClientRect());
  },
  onContextMenu: function (e) {
    // Prevent the native context menu
    e.preventDefault();

    this._showContextMenu({
      right: e.clientX,
      top: e.clientY,
      height: 0
    });
  },
  closeMenu: function () {
    this.setState({
      contextMenuPosition: null
    });
  },
  render: function () {
    const AccessibleButton = sdk.getComponent('elements.AccessibleButton');
    const BaseAvatar = sdk.getComponent('avatars.BaseAvatar');
    const groupName = this.props.group.name || this.props.group.groupId;
    const httpAvatarUrl = this.props.group.avatarUrl ? this.context.mxcUrlToHttp(this.props.group.avatarUrl, 24, 24) : null;

    const av = /*#__PURE__*/_react.default.createElement(BaseAvatar, {
      name: groupName,
      width: 24,
      height: 24,
      url: httpAvatarUrl
    });

    const isMenuDisplayed = Boolean(this.state.contextMenuPosition);
    const nameClasses = (0, _classnames.default)('mx_RoomTile_name mx_RoomTile_invite mx_RoomTile_badgeShown', {
      'mx_RoomTile_badgeShown': this.state.badgeHover || isMenuDisplayed
    }); // XXX: this is a workaround for Firefox giving this div a tabstop :( [tabIndex]

    const label = /*#__PURE__*/_react.default.createElement("div", {
      title: this.props.group.groupId,
      className: nameClasses,
      tabIndex: -1,
      dir: "auto"
    }, groupName);

    const badgeEllipsis = this.state.badgeHover || isMenuDisplayed;
    const badgeClasses = (0, _classnames.default)('mx_RoomTile_badge mx_RoomTile_highlight', {
      'mx_RoomTile_badgeButton': badgeEllipsis
    });
    const badgeContent = badgeEllipsis ? '\u00B7\u00B7\u00B7' : '!';
    let tooltip;

    if (this.props.collapsed && this.state.hover) {
      const Tooltip = sdk.getComponent("elements.Tooltip");
      tooltip = /*#__PURE__*/_react.default.createElement(Tooltip, {
        className: "mx_RoomTile_tooltip",
        label: groupName,
        dir: "auto"
      });
    }

    const classes = (0, _classnames.default)('mx_RoomTile mx_RoomTile_highlight', {
      'mx_RoomTile_menuDisplayed': isMenuDisplayed,
      'mx_RoomTile_selected': this.state.selected,
      'mx_GroupInviteTile': true
    });
    let contextMenu;

    if (isMenuDisplayed) {
      const GroupInviteTileContextMenu = sdk.getComponent('context_menus.GroupInviteTileContextMenu');
      contextMenu = /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenu, (0, _extends2.default)({}, (0, _ContextMenu.toRightOf)(this.state.contextMenuPosition), {
        onFinished: this.closeMenu
      }), /*#__PURE__*/_react.default.createElement(GroupInviteTileContextMenu, {
        group: this.props.group,
        onFinished: this.closeMenu
      }));
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_RovingTabIndex.RovingTabIndexWrapper, null, ({
      onFocus,
      isActive,
      ref
    }) => /*#__PURE__*/_react.default.createElement(AccessibleButton, {
      onFocus: onFocus,
      tabIndex: isActive ? 0 : -1,
      inputRef: ref,
      className: classes,
      onClick: this.onClick,
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave,
      onContextMenu: this.onContextMenu
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomTile_avatar"
    }, av), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_RoomTile_nameContainer"
    }, label, /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuButton, {
      className: badgeClasses,
      onClick: this.onContextMenuButtonClick,
      label: (0, _languageHandler._t)("Options"),
      isExpanded: isMenuDisplayed,
      tabIndex: isActive ? 0 : -1
    }, badgeContent)), tooltip)), contextMenu);
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ZpZXdzL2dyb3Vwcy9Hcm91cEludml0ZVRpbGUuanMiXSwibmFtZXMiOlsiZGlzcGxheU5hbWUiLCJwcm9wVHlwZXMiLCJncm91cCIsIlByb3BUeXBlcyIsIm9iamVjdCIsImlzUmVxdWlyZWQiLCJzdGF0aWNzIiwiY29udGV4dFR5cGUiLCJNYXRyaXhDbGllbnRDb250ZXh0IiwiZ2V0SW5pdGlhbFN0YXRlIiwiaG92ZXIiLCJiYWRnZUhvdmVyIiwibWVudURpc3BsYXllZCIsInNlbGVjdGVkIiwicHJvcHMiLCJncm91cElkIiwib25DbGljayIsImUiLCJkaXMiLCJkaXNwYXRjaCIsImFjdGlvbiIsImdyb3VwX2lkIiwib25Nb3VzZUVudGVyIiwic3RhdGUiLCJjb250ZXh0IiwiaXNHdWVzdCIsInNldFN0YXRlIiwib25Nb3VzZUxlYXZlIiwiX3Nob3dDb250ZXh0TWVudSIsImJvdW5kaW5nQ2xpZW50UmVjdCIsIk1hdHJpeENsaWVudFBlZyIsImdldCIsImNvbnRleHRNZW51UG9zaXRpb24iLCJjb2xsYXBzZWQiLCJvbkNvbnRleHRNZW51QnV0dG9uQ2xpY2siLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInRhcmdldCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm9uQ29udGV4dE1lbnUiLCJyaWdodCIsImNsaWVudFgiLCJ0b3AiLCJjbGllbnRZIiwiaGVpZ2h0IiwiY2xvc2VNZW51IiwicmVuZGVyIiwiQWNjZXNzaWJsZUJ1dHRvbiIsInNkayIsImdldENvbXBvbmVudCIsIkJhc2VBdmF0YXIiLCJncm91cE5hbWUiLCJuYW1lIiwiaHR0cEF2YXRhclVybCIsImF2YXRhclVybCIsIm14Y1VybFRvSHR0cCIsImF2IiwiaXNNZW51RGlzcGxheWVkIiwiQm9vbGVhbiIsIm5hbWVDbGFzc2VzIiwibGFiZWwiLCJiYWRnZUVsbGlwc2lzIiwiYmFkZ2VDbGFzc2VzIiwiYmFkZ2VDb250ZW50IiwidG9vbHRpcCIsIlRvb2x0aXAiLCJjbGFzc2VzIiwiY29udGV4dE1lbnUiLCJHcm91cEludml0ZVRpbGVDb250ZXh0TWVudSIsIm9uRm9jdXMiLCJpc0FjdGl2ZSIsInJlZiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQWtCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUE1QkE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBOEJBO2VBQ2UsK0JBQWlCO0FBQzVCQSxFQUFBQSxXQUFXLEVBQUUsaUJBRGU7QUFHNUJDLEVBQUFBLFNBQVMsRUFBRTtBQUNQQyxJQUFBQSxLQUFLLEVBQUVDLG1CQUFVQyxNQUFWLENBQWlCQztBQURqQixHQUhpQjtBQU81QkMsRUFBQUEsT0FBTyxFQUFFO0FBQ0xDLElBQUFBLFdBQVcsRUFBRUM7QUFEUixHQVBtQjtBQVc1QkMsRUFBQUEsZUFBZSxFQUFFLFlBQVc7QUFDeEIsV0FBUTtBQUNKQyxNQUFBQSxLQUFLLEVBQUUsS0FESDtBQUVKQyxNQUFBQSxVQUFVLEVBQUUsS0FGUjtBQUdKQyxNQUFBQSxhQUFhLEVBQUUsS0FIWDtBQUlKQyxNQUFBQSxRQUFRLEVBQUUsS0FBS0MsS0FBTCxDQUFXWixLQUFYLENBQWlCYSxPQUFqQixLQUE2QixJQUpuQyxDQUl5Qzs7QUFKekMsS0FBUjtBQU1ILEdBbEIyQjtBQW9CNUJDLEVBQUFBLE9BQU8sRUFBRSxVQUFTQyxDQUFULEVBQVk7QUFDakJDLHdCQUFJQyxRQUFKLENBQWE7QUFDVEMsTUFBQUEsTUFBTSxFQUFFLFlBREM7QUFFVEMsTUFBQUEsUUFBUSxFQUFFLEtBQUtQLEtBQUwsQ0FBV1osS0FBWCxDQUFpQmE7QUFGbEIsS0FBYjtBQUlILEdBekIyQjtBQTJCNUJPLEVBQUFBLFlBQVksRUFBRSxZQUFXO0FBQ3JCLFVBQU1DLEtBQUssR0FBRztBQUFDYixNQUFBQSxLQUFLLEVBQUU7QUFBUixLQUFkLENBRHFCLENBRXJCOztBQUNBLFFBQUksQ0FBQyxLQUFLYyxP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Q0MsQ0FBUDtBQW1DSDtBQXhLMkIsQ0FBakIsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxNywgMjAxOCBOZXcgVmVjdG9yIEx0ZFxuQ29weXJpZ2h0IDIwMTggTWljaGFlbCBUZWxhdHluc2tpIDw3dDNjaGd1eUBnbWFpbC5jb20+XG5Db3B5cmlnaHQgMjAxOSBUaGUgTWF0cml4Lm9yZyBGb3VuZGF0aW9uIEMuSS5DLlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNyZWF0ZVJlYWN0Q2xhc3MgZnJvbSAnY3JlYXRlLXJlYWN0LWNsYXNzJztcbmltcG9ydCAqIGFzIHNkayBmcm9tICcuLi8uLi8uLi9pbmRleCc7XG5pbXBvcnQgZGlzIGZyb20gJy4uLy4uLy4uL2Rpc3BhdGNoZXIvZGlzcGF0Y2hlcic7XG5pbXBvcnQge190fSBmcm9tICcuLi8uLi8uLi9sYW5ndWFnZUhhbmRsZXInO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQge01hdHJpeENsaWVudFBlZ30gZnJvbSBcIi4uLy4uLy4uL01hdHJpeENsaWVudFBlZ1wiO1xuaW1wb3J0IHtDb250ZXh0TWVudSwgQ29udGV4dE1lbnVCdXR0b24sIHRvUmlnaHRPZn0gZnJvbSBcIi4uLy4uL3N0cnVjdHVyZXMvQ29udGV4dE1lbnVcIjtcbmltcG9ydCBNYXRyaXhDbGllbnRDb250ZXh0IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9NYXRyaXhDbGllbnRDb250ZXh0XCI7XG5pbXBvcnQge1JvdmluZ1RhYkluZGV4V3JhcHBlcn0gZnJvbSBcIi4uLy4uLy4uL2FjY2Vzc2liaWxpdHkvUm92aW5nVGFiSW5kZXhcIjtcblxuLy8gWFhYIHRoaXMgY2xhc3MgY29waWVzIGEgbG90IGZyb20gUm9vbVRpbGUuanNcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVJlYWN0Q2xhc3Moe1xuICAgIGRpc3BsYXlOYW1lOiAnR3JvdXBJbnZpdGVUaWxlJyxcblxuICAgIHByb3BUeXBlczoge1xuICAgICAgICBncm91cDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIH0sXG5cbiAgICBzdGF0aWNzOiB7XG4gICAgICAgIGNvbnRleHRUeXBlOiBNYXRyaXhDbGllbnRDb250ZXh0LFxuICAgIH0sXG5cbiAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKHtcbiAgICAgICAgICAgIGhvdmVyOiBmYWxzZSxcbiAgICAgICAgICAgIGJhZGdlSG92ZXI6IGZhbHNlLFxuICAgICAgICAgICAgbWVudURpc3BsYXllZDogZmFsc2UsXG4gICAgICAgICAgICBzZWxlY3RlZDogdGhpcy5wcm9wcy5ncm91cC5ncm91cElkID09PSBudWxsLCAvLyBYWFg6IHRoaXMgbmVlZHMgbGlua2luZyB0byBMb2dnZWRJblZpZXcvR3JvdXBWaWV3IHN0YXRlXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBvbkNsaWNrOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIGRpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICBhY3Rpb246ICd2aWV3X2dyb3VwJyxcbiAgICAgICAgICAgIGdyb3VwX2lkOiB0aGlzLnByb3BzLmdyb3VwLmdyb3VwSWQsXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBvbk1vdXNlRW50ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHtob3ZlcjogdHJ1ZX07XG4gICAgICAgIC8vIE9ubHkgYWxsb3cgbm9uLWd1ZXN0cyB0byBhY2Nlc3MgdGhlIGNvbnRleHQgbWVudVxuICAgICAgICBpZiAoIXRoaXMuY29udGV4dC5pc0d1ZXN0KCkpIHtcbiAgICAgICAgICAgIHN0YXRlLmJhZGdlSG92ZXIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICAgIH0sXG5cbiAgICBvbk1vdXNlTGVhdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGJhZGdlSG92ZXI6IGZhbHNlLFxuICAgICAgICAgICAgaG92ZXI6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgX3Nob3dDb250ZXh0TWVudTogZnVuY3Rpb24oYm91bmRpbmdDbGllbnRSZWN0KSB7XG4gICAgICAgIC8vIE9ubHkgYWxsb3cgbm9uLWd1ZXN0cyB0byBhY2Nlc3MgdGhlIGNvbnRleHQgbWVudVxuICAgICAgICBpZiAoTWF0cml4Q2xpZW50UGVnLmdldCgpLmlzR3Vlc3QoKSkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHN0YXRlID0ge1xuICAgICAgICAgICAgY29udGV4dE1lbnVQb3NpdGlvbjogYm91bmRpbmdDbGllbnRSZWN0LFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIElmIHRoZSBiYWRnZSBpcyBjbGlja2VkLCB0aGVuIG5vIGxvbmdlciBzaG93IHRvb2x0aXBcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY29sbGFwc2VkKSB7XG4gICAgICAgICAgICBzdGF0ZS5ob3ZlciA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG4gICAgfSxcblxuICAgIG9uQ29udGV4dE1lbnVCdXR0b25DbGljazogZnVuY3Rpb24oZSkge1xuICAgICAgICAvLyBQcmV2ZW50IHRoZSBSb29tVGlsZSBvbkNsaWNrIGV2ZW50IGZpcmluZyBhcyB3ZWxsXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICB0aGlzLl9zaG93Q29udGV4dE1lbnUoZS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xuICAgIH0sXG5cbiAgICBvbkNvbnRleHRNZW51OiBmdW5jdGlvbihlKSB7XG4gICAgICAgIC8vIFByZXZlbnQgdGhlIG5hdGl2ZSBjb250ZXh0IG1lbnVcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIHRoaXMuX3Nob3dDb250ZXh0TWVudSh7XG4gICAgICAgICAgICByaWdodDogZS5jbGllbnRYLFxuICAgICAgICAgICAgdG9wOiBlLmNsaWVudFksXG4gICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBjbG9zZU1lbnU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGNvbnRleHRNZW51UG9zaXRpb246IG51bGwsXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBBY2Nlc3NpYmxlQnV0dG9uID0gc2RrLmdldENvbXBvbmVudCgnZWxlbWVudHMuQWNjZXNzaWJsZUJ1dHRvbicpO1xuICAgICAgICBjb25zdCBCYXNlQXZhdGFyID0gc2RrLmdldENvbXBvbmVudCgnYXZhdGFycy5CYXNlQXZhdGFyJyk7XG5cbiAgICAgICAgY29uc3QgZ3JvdXBOYW1lID0gdGhpcy5wcm9wcy5ncm91cC5uYW1lIHx8IHRoaXMucHJvcHMuZ3JvdXAuZ3JvdXBJZDtcbiAgICAgICAgY29uc3QgaHR0cEF2YXRhclVybCA9IHRoaXMucHJvcHMuZ3JvdXAuYXZhdGFyVXJsID9cbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5teGNVcmxUb0h0dHAodGhpcy5wcm9wcy5ncm91cC5hdmF0YXJVcmwsIDI0LCAyNCkgOiBudWxsO1xuXG4gICAgICAgIGNvbnN0IGF2ID0gPEJhc2VBdmF0YXIgbmFtZT17Z3JvdXBOYW1lfSB3aWR0aD17MjR9IGhlaWdodD17MjR9IHVybD17aHR0cEF2YXRhclVybH0gLz47XG5cbiAgICAgICAgY29uc3QgaXNNZW51RGlzcGxheWVkID0gQm9vbGVhbih0aGlzLnN0YXRlLmNvbnRleHRNZW51UG9zaXRpb24pO1xuICAgICAgICBjb25zdCBuYW1lQ2xhc3NlcyA9IGNsYXNzTmFtZXMoJ214X1Jvb21UaWxlX25hbWUgbXhfUm9vbVRpbGVfaW52aXRlIG14X1Jvb21UaWxlX2JhZGdlU2hvd24nLCB7XG4gICAgICAgICAgICAnbXhfUm9vbVRpbGVfYmFkZ2VTaG93bic6IHRoaXMuc3RhdGUuYmFkZ2VIb3ZlciB8fCBpc01lbnVEaXNwbGF5ZWQsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFhYWDogdGhpcyBpcyBhIHdvcmthcm91bmQgZm9yIEZpcmVmb3ggZ2l2aW5nIHRoaXMgZGl2IGEgdGFic3RvcCA6KCBbdGFiSW5kZXhdXG4gICAgICAgIGNvbnN0IGxhYmVsID0gPGRpdiB0aXRsZT17dGhpcy5wcm9wcy5ncm91cC5ncm91cElkfSBjbGFzc05hbWU9e25hbWVDbGFzc2VzfSB0YWJJbmRleD17LTF9IGRpcj1cImF1dG9cIj5cbiAgICAgICAgICAgIHsgZ3JvdXBOYW1lIH1cbiAgICAgICAgPC9kaXY+O1xuXG4gICAgICAgIGNvbnN0IGJhZGdlRWxsaXBzaXMgPSB0aGlzLnN0YXRlLmJhZGdlSG92ZXIgfHwgaXNNZW51RGlzcGxheWVkO1xuICAgICAgICBjb25zdCBiYWRnZUNsYXNzZXMgPSBjbGFzc05hbWVzKCdteF9Sb29tVGlsZV9iYWRnZSBteF9Sb29tVGlsZV9oaWdobGlnaHQnLCB7XG4gICAgICAgICAgICAnbXhfUm9vbVRpbGVfYmFkZ2VCdXR0b24nOiBiYWRnZUVsbGlwc2lzLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBiYWRnZUNvbnRlbnQgPSBiYWRnZUVsbGlwc2lzID8gJ1xcdTAwQjdcXHUwMEI3XFx1MDBCNycgOiAnISc7XG5cbiAgICAgICAgbGV0IHRvb2x0aXA7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmNvbGxhcHNlZCAmJiB0aGlzLnN0YXRlLmhvdmVyKSB7XG4gICAgICAgICAgICBjb25zdCBUb29sdGlwID0gc2RrLmdldENvbXBvbmVudChcImVsZW1lbnRzLlRvb2x0aXBcIik7XG4gICAgICAgICAgICB0b29sdGlwID0gPFRvb2x0aXAgY2xhc3NOYW1lPVwibXhfUm9vbVRpbGVfdG9vbHRpcFwiIGxhYmVsPXtncm91cE5hbWV9IGRpcj1cImF1dG9cIiAvPjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNsYXNzZXMgPSBjbGFzc05hbWVzKCdteF9Sb29tVGlsZSBteF9Sb29tVGlsZV9oaWdobGlnaHQnLCB7XG4gICAgICAgICAgICAnbXhfUm9vbVRpbGVfbWVudURpc3BsYXllZCc6IGlzTWVudURpc3BsYXllZCxcbiAgICAgICAgICAgICdteF9Sb29tVGlsZV9zZWxlY3RlZCc6IHRoaXMuc3RhdGUuc2VsZWN0ZWQsXG4gICAgICAgICAgICAnbXhfR3JvdXBJbnZpdGVUaWxlJzogdHJ1ZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGNvbnRleHRNZW51O1xuICAgICAgICBpZiAoaXNNZW51RGlzcGxheWVkKSB7XG4gICAgICAgICAgICBjb25zdCBHcm91cEludml0ZVRpbGVDb250ZXh0TWVudSA9IHNkay5nZXRDb21wb25lbnQoJ2NvbnRleHRfbWVudXMuR3JvdXBJbnZpdGVUaWxlQ29udGV4dE1lbnUnKTtcbiAgICAgICAgICAgIGNvbnRleHRNZW51ID0gKFxuICAgICAgICAgICAgICAgIDxDb250ZXh0TWVudSB7Li4udG9SaWdodE9mKHRoaXMuc3RhdGUuY29udGV4dE1lbnVQb3NpdGlvbil9IG9uRmluaXNoZWQ9e3RoaXMuY2xvc2VNZW51fT5cbiAgICAgICAgICAgICAgICAgICAgPEdyb3VwSW52aXRlVGlsZUNvbnRleHRNZW51IGdyb3VwPXt0aGlzLnByb3BzLmdyb3VwfSBvbkZpbmlzaGVkPXt0aGlzLmNsb3NlTWVudX0gLz5cbiAgICAgICAgICAgICAgICA8L0NvbnRleHRNZW51PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICA8Um92aW5nVGFiSW5kZXhXcmFwcGVyPlxuICAgICAgICAgICAgICAgIHsoe29uRm9jdXMsIGlzQWN0aXZlLCByZWZ9KSA9PlxuICAgICAgICAgICAgICAgICAgICA8QWNjZXNzaWJsZUJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgb25Gb2N1cz17b25Gb2N1c31cbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYkluZGV4PXtpc0FjdGl2ZSA/IDAgOiAtMX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0UmVmPXtyZWZ9XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXN9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ2xpY2t9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbk1vdXNlRW50ZXI9e3RoaXMub25Nb3VzZUVudGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUxlYXZlPXt0aGlzLm9uTW91c2VMZWF2ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ29udGV4dE1lbnU9e3RoaXMub25Db250ZXh0TWVudX1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9Sb29tVGlsZV9hdmF0YXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGF2IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteF9Sb29tVGlsZV9uYW1lQ29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBsYWJlbCB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbnRleHRNZW51QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YmFkZ2VDbGFzc2VzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ29udGV4dE1lbnVCdXR0b25DbGlja31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e190KFwiT3B0aW9uc1wiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNFeHBhbmRlZD17aXNNZW51RGlzcGxheWVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJJbmRleD17aXNBY3RpdmUgPyAwIDogLTF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGJhZGdlQ29udGVudCB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Db250ZXh0TWVudUJ1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgeyB0b29sdGlwIH1cbiAgICAgICAgICAgICAgICAgICAgPC9BY2Nlc3NpYmxlQnV0dG9uPlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvUm92aW5nVGFiSW5kZXhXcmFwcGVyPlxuXG4gICAgICAgICAgICB7IGNvbnRleHRNZW51IH1cbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD47XG4gICAgfSxcbn0pO1xuIl19