"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _Modal = _interopRequireDefault(require("../../../Modal"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

var _GroupStore = _interopRequireDefault(require("../../../stores/GroupStore"));

var _MatrixClientContext = _interopRequireDefault(require("../../../contexts/MatrixClientContext"));

var _AutoHideScrollbar = _interopRequireDefault(require("../../structures/AutoHideScrollbar"));

/*
Copyright 2017 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var _default = (0, _createReactClass.default)({
  displayName: 'GroupRoomInfo',
  statics: {
    contextType: _MatrixClientContext.default
  },
  propTypes: {
    groupId: _propTypes.default.string,
    groupRoomId: _propTypes.default.string
  },
  getInitialState: function () {
    return {
      isUserPrivilegedInGroup: null,
      groupRoom: null,
      groupRoomPublicityLoading: false,
      groupRoomRemoveLoading: false
    };
  },
  componentDidMount: function () {
    this._initGroupStore(this.props.groupId);
  },

  // TODO: [REACT-WARNING] Replace with appropriate lifecycle event
  UNSAFE_componentWillReceiveProps(newProps) {
    if (newProps.groupId !== this.props.groupId) {
      this._unregisterGroupStore(this.props.groupId);

      this._initGroupStore(newProps.groupId);
    }
  },

  componentWillUnmount() {
    this._unregisterGroupStore(this.props.groupId);
  },

  _initGroupStore(groupId) {
    _GroupStore.default.registerListener(groupId, this.onGroupStoreUpdated);
  },

  _unregisterGroupStore(groupId) {
    _GroupStore.default.unregisterListener(this.onGroupStoreUpdated);
  },

  _updateGroupRoom() {
    this.setState({
      groupRoom: _GroupStore.default.getGroupRooms(this.props.groupId).find(r => r.roomId === this.props.groupRoomId)
    });
  },

  onGroupStoreUpdated: function () {
    this.setState({
      isUserPrivilegedInGroup: _GroupStore.default.isUserPrivileged(this.props.groupId)
    });

    this._updateGroupRoom();
  },
  _onRemove: function (e) {
    const groupId = this.props.groupId;
    const roomName = this.state.groupRoom.displayname;
    e.preventDefault();
    e.stopPropagation();
    const QuestionDialog = sdk.getComponent("dialogs.QuestionDialog");

    _Modal.default.createTrackedDialog('Confirm removal of group from room', '', QuestionDialog, {
      title: (0, _languageHandler._t)("Are you sure you want to remove '%(roomName)s' from %(groupId)s?", {
        roomName,
        groupId
      }),
      description: (0, _languageHandler._t)("Removing a room from the community will also remove it from the community page."),
      button: (0, _languageHandler._t)("Remove"),
      onFinished: proceed => {
        if (!proceed) return;
        this.setState({
          groupRoomRemoveLoading: true
        });
        const groupId = this.props.groupId;
        const roomId = this.props.groupRoomId;

        _GroupStore.default.removeRoomFromGroup(this.props.groupId, roomId).then(() => {
          _dispatcher.default.dispatch({
            action: "view_group_room_list"
          });
        }).catch(err => {
          console.error("Error whilst removing ".concat(roomId, " from ").concat(groupId), err);
          const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

          _Modal.default.createTrackedDialog('Failed to remove room from group', '', ErrorDialog, {
            title: (0, _languageHandler._t)("Failed to remove room from community"),
            description: (0, _languageHandler._t)("Failed to remove '%(roomName)s' from %(groupId)s", {
              groupId,
              roomName
            })
          });
        }).finally(() => {
          this.setState({
            groupRoomRemoveLoading: false
          });
        });
      }
    });
  },
  _onCancel: function (e) {
    _dispatcher.default.dispatch({
      action: "view_group_room_list"
    });
  },

  _changeGroupRoomPublicity(e) {
    const isPublic = e.target.value === "public";
    this.setState({
      groupRoomPublicityLoading: true
    });
    const groupId = this.props.groupId;
    const roomId = this.props.groupRoomId;
    const roomName = this.state.groupRoom.displayname;

    _GroupStore.default.updateGroupRoomVisibility(this.props.groupId, roomId, isPublic).catch(err => {
      console.error("Error whilst changing visibility of ".concat(roomId, " in ").concat(groupId, " to ").concat(isPublic), err);
      const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

      _Modal.default.createTrackedDialog('Failed to remove room from group', '', ErrorDialog, {
        title: (0, _languageHandler._t)("Something went wrong!"),
        description: (0, _languageHandler._t)("The visibility of '%(roomName)s' in %(groupId)s could not be updated.", {
          roomName,
          groupId
        })
      });
    }).finally(() => {
      this.setState({
        groupRoomPublicityLoading: false
      });
    });
  },

  render: function () {
    const AccessibleButton = sdk.getComponent('elements.AccessibleButton');
    const InlineSpinner = sdk.getComponent('elements.InlineSpinner');

    if (this.state.groupRoomRemoveLoading || !this.state.groupRoom) {
      const Spinner = sdk.getComponent("elements.Spinner");
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MemberInfo"
      }, /*#__PURE__*/_react.default.createElement(Spinner, null));
    }

    let adminTools;

    if (this.state.isUserPrivilegedInGroup) {
      adminTools = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MemberInfo_adminTools"
      }, /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)("Admin Tools")), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MemberInfo_buttons"
      }, /*#__PURE__*/_react.default.createElement(AccessibleButton, {
        className: "mx_MemberInfo_field",
        onClick: this._onRemove
      }, (0, _languageHandler._t)('Remove from community'))), /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)('Visibility in Room List'), this.state.groupRoomPublicityLoading ? /*#__PURE__*/_react.default.createElement(InlineSpinner, null) : /*#__PURE__*/_react.default.createElement("div", null)), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("label", null, /*#__PURE__*/_react.default.createElement("input", {
        type: "radio",
        value: "public",
        checked: this.state.groupRoom.isPublic,
        onChange: this._changeGroupRoomPublicity
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MemberInfo_label_text"
      }, (0, _languageHandler._t)('Visible to everyone')))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("label", null, /*#__PURE__*/_react.default.createElement("input", {
        type: "radio",
        value: "private",
        checked: !this.state.groupRoom.isPublic,
        onChange: this._changeGroupRoomPublicity
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MemberInfo_label_text"
      }, (0, _languageHandler._t)('Only visible to community members')))));
    }

    const avatarUrl = this.state.groupRoom.avatarUrl;
    let avatarElement;

    if (avatarUrl) {
      const httpUrl = this.context.mxcUrlToHttp(avatarUrl, 800, 800);
      avatarElement = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MemberInfo_avatar"
      }, /*#__PURE__*/_react.default.createElement("img", {
        src: httpUrl
      }));
    }

    const groupRoomName = this.state.groupRoom.displayname;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberInfo",
      role: "tabpanel"
    }, /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, null, /*#__PURE__*/_react.default.createElement(AccessibleButton, {
      className: "mx_MemberInfo_cancel",
      onClick: this._onCancel
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: require("../../../../res/img/cancel.svg"),
      width: "18",
      height: "18",
      className: "mx_filterFlipColor"
    })), avatarElement, /*#__PURE__*/_react.default.createElement("h2", null, groupRoomName), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberInfo_profile"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MemberInfo_profileField"
    }, this.state.groupRoom.canonicalAlias)), adminTools));
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,