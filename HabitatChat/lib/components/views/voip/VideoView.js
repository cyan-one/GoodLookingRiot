"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _classnames = _interopRequireDefault(require("classnames"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _dispatcher = _interopRequireDefault(require("../../../dispatcher/dispatcher"));

var _SettingsStore = _interopRequireDefault(require("../../../settings/SettingsStore"));

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function getFullScreenElement() {
  return document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
}

var _default = (0, _createReactClass.default)({
  displayName: 'VideoView',
  propTypes: {
    // maxHeight style attribute for the video element
    maxHeight: _propTypes.default.number,
    // a callback which is called when the user clicks on the video div
    onClick: _propTypes.default.func,
    // a callback which is called when the video element is resized due to
    // a change in video metadata
    onResize: _propTypes.default.func
  },
  // TODO: [REACT-WARNING] Replace component with real class, use constructor for refs
  UNSAFE_componentWillMount: function () {
    this._local = (0, _react.createRef)();
    this._remote = (0, _react.createRef)();
  },
  componentDidMount: function () {
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
  },
  componentWillUnmount: function () {
    _dispatcher.default.unregister(this.dispatcherRef);
  },
  getRemoteVideoElement: function () {
    return _reactDom.default.findDOMNode(this._remote.current);
  },
  getRemoteAudioElement: function () {
    // this needs to be somewhere at the top of the DOM which
    // always exists to avoid audio interruptions.
    // Might as well just use DOM.
    const remoteAudioElement = document.getElementById("remoteAudio");

    if (!remoteAudioElement) {
      console.error("Failed to find remoteAudio element - cannot play audio!" + "You need to add an <audio/> to the DOM.");
    }

    return remoteAudioElement;
  },
  getLocalVideoElement: function () {
    return _reactDom.default.findDOMNode(this._local.current);
  },
  setContainer: function (c) {
    this.container = c;
  },
  onAction: function (payload) {
    switch (payload.action) {
      case 'video_fullscreen':
        {
          if (!this.container) {
            return;
          }

          const element = this.container;

          if (payload.fullscreen) {
            const requestMethod = element.requestFullScreen || element.webkitRequestFullScreen || element.mozRequestFullScreen || element.msRequestFullscreen;
            requestMethod.call(element);
          } else if (getFullScreenElement()) {
            const exitMethod = document.exitFullscreen || document.mozCancelFullScreen || document.webkitExitFullscreen || document.msExitFullscreen;

            if (exitMethod) {
              exitMethod.call(document);
            }
          }

          break;
        }
    }
  },
  render: function () {
    const VideoFeed = sdk.getComponent('voip.VideoFeed'); // if we're fullscreen, we don't want to set a maxHeight on the video element.

    const maxVideoHeight = getFullScreenElement() ? null : this.props.maxHeight;
    const localVideoFeedClasses = (0, _classnames.default)("mx_VideoView_localVideoFeed", {
      "mx_VideoView_localVideoFeed_flipped": _SettingsStore.default.getValue('VideoView.flipVideoHorizontally')
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_VideoView",
      ref: this.setContainer,
      onClick: this.props.onClick
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_VideoView_remoteVideoFeed"
    }, /*#__PURE__*/_react.default.createElement(VideoFeed, {
      ref: this._remote,
      onResize: this.props.onResize,
      maxHeight: maxVideoHeight
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: localVideoFeedClasses
    }, /*#__PURE__*/_react.default.createElement(VideoFeed, {
      ref: this._local
    })));
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,