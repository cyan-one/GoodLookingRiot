"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Keyboard = require("../../Keyboard");

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _lodash = require("lodash");

var _AccessibleButton = _interopRequireDefault(require("../../components/views/elements/AccessibleButton"));

var _classnames = _interopRequireDefault(require("classnames"));

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2019 Michael Telatynski <7t3chguy@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var _default = (0, _createReactClass.default)({
  displayName: 'SearchBox',
  propTypes: {
    onSearch: _propTypes.default.func,
    onCleared: _propTypes.default.func,
    onKeyDown: _propTypes.default.func,
    className: _propTypes.default.string,
    placeholder: _propTypes.default.string.isRequired,
    // If true, the search box will focus and clear itself
    // on room search focus action (it would be nicer to take
    // this functionality out, but not obvious how that would work)
    enableRoomSearchFocus: _propTypes.default.bool
  },
  getDefaultProps: function () {
    return {
      enableRoomSearchFocus: false
    };
  },
  getInitialState: function () {
    return {
      searchTerm: "",
      blurred: true
    };
  },
  // TODO: [REACT-WARNING] Replace component with real class, use constructor for refs
  UNSAFE_componentWillMount: function () {
    this._search = (0, _react.createRef)();
  },
  componentDidMount: function () {
    this.dispatcherRef = _dispatcher.default.register(this.onAction);
  },
  componentWillUnmount: function () {
    _dispatcher.default.unregister(this.dispatcherRef);
  },
  onAction: function (payload) {
    if (!this.props.enableRoomSearchFocus) return;

    switch (payload.action) {
      case 'view_room':
        if (this._search.current && payload.clear_search) {
          this._clearSearch();
        }

        break;

      case 'focus_room_filter':
        if (this._search.current) {
          this._search.current.focus();
        }

        break;
    }
  },
  onChange: function () {
    if (!this._search.current) return;
    this.setState({
      searchTerm: this._search.current.value
    });
    this.onSearch();
  },
  onSearch: (0, _lodash.throttle)(function () {
    this.props.onSearch(this._search.current.value);
  }, 200, {
    trailing: true,
    leading: true
  }),
  _onKeyDown: function (ev) {
    switch (ev.key) {
      case _Keyboard.Key.ESCAPE:
        this._clearSearch("keyboard");

        break;
    }

    if (this.props.onKeyDown) this.props.onKeyDown(ev);
  },
  _onFocus: function (ev) {
    this.setState({
      blurred: false
    });
    ev.target.select();

    if (this.props.onFocus) {
      this.props.onFocus(ev);
    }
  },
  _onBlur: function (ev) {
    this.setState({
      blurred: true
    });

    if (this.props.onBlur) {
      this.props.onBlur(ev);
    }
  },
  _clearSearch: function (source) {
    this._search.current.value = "";
    this.onChange();

    if (this.props.onCleared) {
      this.props.onCleared(source);
    }
  },
  render: function () {
    // check for collapsed here and
    // not at parent so we keep
    // searchTerm in our state
    // when collapsing and expanding
    if (this.props.collapsed) {
      return null;
    }

    const clearButton = !this.state.blurred || this.state.searchTerm ? /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      key: "button",
      tabIndex: -1,
      className: "mx_SearchBox_closeButton",
      onClick: () => {
        this._clearSearch("button");
      }
    }) : undefined; // show a shorter placeholder when blurred, if requested
    // this is used for the room filter field that has
    // the explore button next to it when blurred

    const placeholder = this.state.blurred ? this.props.blurredPlaceholder || this.props.placeholder : this.props.placeholder;
    const className = this.props.className || "";
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)("mx_SearchBox", "mx_textinput", {
        "mx_SearchBox_blurred": this.state.blurred
      })
    }, /*#__PURE__*/_react.default.createElement("input", {
      key: "searchfield",
      type: "text",
      ref: this._search,
      className: "mx_textinput_icon mx_textinput_search " + className,
      value: this.state.searchTerm,
      onFocus: this._onFocus,
      onChange: this.onChange,
      onKeyDown: this._onKeyDown,
      onBlur: this._onBlur,
      placeholder: placeholder,
      autoComplete: "off"
    }), clearButton);
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,