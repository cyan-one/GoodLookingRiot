"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var sdk = _interopRequireWildcard(require("../../index"));

var _languageHandler = require("../../languageHandler");

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _AccessibleButton = _interopRequireDefault(require("../views/elements/AccessibleButton"));

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var _AutoHideScrollbar = _interopRequireDefault(require("./AutoHideScrollbar"));

/*
Copyright 2017 Vector Creations Ltd
Copyright 2019 Michael Telatynski <7t3chguy@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
var _default = (0, _createReactClass.default)({
  displayName: 'MyGroups',
  getInitialState: function () {
    return {
      groups: null,
      error: null
    };
  },
  statics: {
    contextType: _MatrixClientContext.default
  },
  componentDidMount: function () {
    this._fetch();
  },
  _onCreateGroupClick: function () {
    _dispatcher.default.dispatch({
      action: 'view_create_group'
    });
  },
  _fetch: function () {
    this.context.getJoinedGroups().then(result => {
      this.setState({
        groups: result.groups,
        error: null
      });
    }, err => {
      if (err.errcode === 'M_GUEST_ACCESS_FORBIDDEN') {
        // Indicate that the guest isn't in any groups (which should be true)
        this.setState({
          groups: [],
          error: null
        });
        return;
      }

      this.setState({
        groups: null,
        error: err
      });
    });
  },
  render: function () {
    const Loader = sdk.getComponent("elements.Spinner");
    const SimpleRoomHeader = sdk.getComponent('rooms.SimpleRoomHeader');
    const GroupTile = sdk.getComponent("groups.GroupTile");
    let content;
    let contentHeader;

    if (this.state.groups) {
      const groupNodes = [];
      this.state.groups.forEach(g => {
        groupNodes.push( /*#__PURE__*/_react.default.createElement(GroupTile, {
          key: g,
          groupId: g
        }));
      });
      contentHeader = groupNodes.length > 0 ? /*#__PURE__*/_react.default.createElement("h3", null, (0, _languageHandler._t)('Your Communities')) : /*#__PURE__*/_react.default.createElement("div", null);
      content = groupNodes.length > 0 ? /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, {
        className: "mx_MyGroups_scrollable"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MyGroups_microcopy"
      }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("Did you know: you can use communities to filter your Riot.im experience!")), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)("To set up a filter, drag a community avatar over to the filter panel on " + "the far left hand side of the screen. You can click on an avatar in the " + "filter panel at any time to see only the rooms and people associated " + "with that community."))), /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MyGroups_joinedGroups"
      }, groupNodes)) : /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MyGroups_placeholder"
      }, (0, _languageHandler._t)("You're not currently a member of any communities."));
    } else if (this.state.error) {
      content = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_MyGroups_error"
      }, (0, _languageHandler._t)('Error whilst fetching joined communities'));
    } else {
      content = /*#__PURE__*/_react.default.createElement(Loader, null);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MyGroups"
    }, /*#__PURE__*/_react.default.createElement(SimpleRoomHeader, {
      title: (0, _languageHandler._t)("Communities"),
      icon: require("../../../res/img/icons-groups.svg")
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MyGroups_header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MyGroups_headerCard"
    }, /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, {
      className: "mx_MyGroups_headerCard_button",
      onClick: this._onCreateGroupClick
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MyGroups_headerCard_content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MyGroups_headerCard_header"
    }, (0, _languageHandler._t)('Create a new community')), (0, _languageHandler._t)('Create a community to group together users and rooms! ' + 'Build a custom homepage to mark out your space in the Matrix universe.')))), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_MyGroups_content"
    }, contentHeader, content));
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,