"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _TopLeftMenu = _interopRequireDefault(require("../views/context_menus/TopLeftMenu"));

var _BaseAvatar = _interopRequireDefault(require("../views/avatars/BaseAvatar"));

var _MatrixClientPeg = require("../../MatrixClientPeg");

var Avatar = _interopRequireWildcard(require("../../Avatar"));

var _languageHandler = require("../../languageHandler");

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _ContextMenu = require("./ContextMenu");

/*
Copyright 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const AVATAR_SIZE = 28;

class TopLeftMenuButton extends _react.default.Component {
  constructor() {
    super();
    (0, _defineProperty2.default)(this, "onAction", payload => {
      // For accessibility
      if (payload.action === "toggle_top_left_menu") {
        if (this._buttonRef) this._buttonRef.click();
      }
    });
    (0, _defineProperty2.default)(this, "openMenu", e => {
      e.preventDefault();
      e.stopPropagation();
      this.setState({
        menuDisplayed: true
      });
    });
    (0, _defineProperty2.default)(this, "closeMenu", () => {
      this.setState({
        menuDisplayed: false
      });
    });
    this.state = {
      menuDisplayed: false,
      profileInfo: null
    };
  }

  async _getProfileInfo() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    const userId = cli.getUserId();
    const profileInfo = await cli.getProfileInfo(userId);
    const avatarUrl = Avatar.avatarUrlForUser({
      avatarUrl: profileInfo.avatar_url
    }, AVATAR_SIZE, AVATAR_SIZE, "crop");
    return {
      userId,
      name: profileInfo.displayname,
      avatarUrl
    };
  }

  async componentDidMount() {
    this._dispatcherRef = _dispatcher.default.register(this.onAction);

    try {
      const profileInfo = await this._getProfileInfo();
      this.setState({
        profileInfo
      });
    } catch (ex) {
      console.log("could not fetch profile");
      console.error(ex);
    }
  }

  componentWillUnmount() {
    _dispatcher.default.unregister(this._dispatcherRef);
  }

  _getDisplayName() {
    if (_MatrixClientPeg.MatrixClientPeg.get().isGuest()) {
      return (0, _languageHandler._t)("Guest");
    } else if (this.state.profileInfo) {
      return this.state.profileInfo.name;
    } else {
      return _MatrixClientPeg.MatrixClientPeg.get().getUserId();
    }
  }

  render() {
    const cli = _MatrixClientPeg.MatrixClientPeg.get().getUserId();

    const name = this._getDisplayName();

    let nameElement;
    let chevronElement;

    if (!this.props.collapsed) {
      nameElement = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_TopLeftMenuButton_name"
      }, name);
      chevronElement = /*#__PURE__*/_react.default.createElement("span", {
        className: "mx_TopLeftMenuButton_chevron"
      });
    }

    let contextMenu;

    if (this.state.menuDisplayed) {
      const elementRect = this._buttonRef.getBoundingClientRect();

      contextMenu = /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenu, {
        chevronFace: "none",
        left: elementRect.left,
        top: elementRect.top + elementRect.height,
        onFinished: this.closeMenu
      }, /*#__PURE__*/_react.default.createElement(_TopLeftMenu.default, {
        displayName: name,
        userId: cli,
        onFinished: this.closeMenu
      }));
    }

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ContextMenu.ContextMenuButton, {
      className: "mx_TopLeftMenuButton",
      onClick: this.openMenu,
      inputRef: r => this._buttonRef = r,
      label: (0, _languageHandler._t)("Your profile"),
      isExpanded: this.state.menuDisplayed
    }, /*#__PURE__*/_react.default.createElement(_BaseAvatar.default, {
      idName: _MatrixClientPeg.MatrixClientPeg.get().getUserId(),
      name: name,
      url: this.state.profileInfo && this.state.profileInfo.avatarUrl,
      width: AVATAR_SIZE,
      height: AVATAR_SIZE,
      resizeMethod: "crop"
    }), nameElement, chevronElement), contextMenu);
  }

}

exports.default = TopLeftMenuButton;
(0, _defineProperty2.default)(TopLeftMenuButton, "propTypes", {
  collapsed: _propTypes.default.bool.isRequired
});
(0, _defineProperty2.default)(TopLeftMenuButton, "displayName", 'TopLeftMenuButton');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,