"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _TagOrderStore = _interopRequireDefault(require("../../stores/TagOrderStore"));

var _GroupActions = _interopRequireDefault(require("../../actions/GroupActions"));

var sdk = _interopRequireWildcard(require("../../index"));

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var _languageHandler = require("../../languageHandler");

var _reactBeautifulDnd = require("react-beautiful-dnd");

var _classnames = _interopRequireDefault(require("classnames"));

var _MatrixClientContext = _interopRequireDefault(require("../../contexts/MatrixClientContext"));

var _AutoHideScrollbar = _interopRequireDefault(require("./AutoHideScrollbar"));

/*
Copyright 2017, 2018 New Vector Ltd.
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const TagPanel = (0, _createReactClass.default)({
  displayName: 'TagPanel',
  statics: {
    contextType: _MatrixClientContext.default
  },

  getInitialState() {
    return {
      orderedTags: [],
      selectedTags: []
    };
  },

  componentDidMount: function () {
    this.unmounted = false;
    this.context.on("Group.myMembership", this._onGroupMyMembership);
    this.context.on("sync", this._onClientSync);
    this._tagOrderStoreToken = _TagOrderStore.default.addListener(() => {
      if (this.unmounted) {
        return;
      }

      this.setState({
        orderedTags: _TagOrderStore.default.getOrderedTags() || [],
        selectedTags: _TagOrderStore.default.getSelectedTags()
      });
    }); // This could be done by anything with a matrix client

    _dispatcher.default.dispatch(_GroupActions.default.fetchJoinedGroups(this.context));
  },

  componentWillUnmount() {
    this.unmounted = true;
    this.context.removeListener("Group.myMembership", this._onGroupMyMembership);
    this.context.removeListener("sync", this._onClientSync);

    if (this._tagOrderStoreToken) {
      this._tagOrderStoreToken.remove();
    }
  },

  _onGroupMyMembership() {
    if (this.unmounted) return;

    _dispatcher.default.dispatch(_GroupActions.default.fetchJoinedGroups(this.context));
  },

  _onClientSync(syncState, prevState) {
    // Consider the client reconnected if there is no error with syncing.
    // This means the state could be RECONNECTING, SYNCING, PREPARED or CATCHUP.
    const reconnected = syncState !== "ERROR" && prevState !== syncState;

    if (reconnected) {
      // Load joined groups
      _dispatcher.default.dispatch(_GroupActions.default.fetchJoinedGroups(this.context));
    }
  },

  onMouseDown(e) {
    // only dispatch if its not a no-op
    if (this.state.selectedTags.length > 0) {
      _dispatcher.default.dispatch({
        action: 'deselect_tags'
      });
    }
  },

  onCreateGroupClick(ev) {
    ev.stopPropagation();

    _dispatcher.default.dispatch({
      action: 'view_create_group'
    });
  },

  onClearFilterClick(ev) {
    _dispatcher.default.dispatch({
      action: 'deselect_tags'
    });
  },

  render() {
    const DNDTagTile = sdk.getComponent('elements.DNDTagTile');
    const AccessibleButton = sdk.getComponent('elements.AccessibleButton');
    const ActionButton = sdk.getComponent('elements.ActionButton');
    const TintableSvg = sdk.getComponent('elements.TintableSvg');
    const tags = this.state.orderedTags.map((tag, index) => {
      return /*#__PURE__*/_react.default.createElement(DNDTagTile, {
        key: tag,
        tag: tag,
        index: index,
        selected: this.state.selectedTags.includes(tag)
      });
    });
    const itemsSelected = this.state.selectedTags.length > 0;
    let clearButton;

    if (itemsSelected) {
      clearButton = /*#__PURE__*/_react.default.createElement(AccessibleButton, {
        className: "mx_TagPanel_clearButton",
        onClick: this.onClearFilterClick
      }, /*#__PURE__*/_react.default.createElement(TintableSvg, {
        src: require("../../../res/img/icons-close.svg"),
        width: "24",
        height: "24",
        alt: (0, _languageHandler._t)("Clear filter"),
        title: (0, _languageHandler._t)("Clear filter")
      }));
    }

    const classes = (0, _classnames.default)('mx_TagPanel', {
      mx_TagPanel_items_selected: itemsSelected
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classes
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_TagPanel_clearButton_container"
    }, clearButton), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_TagPanel_divider"
    }), /*#__PURE__*/_react.default.createElement(_AutoHideScrollbar.default, {
      className: "mx_TagPanel_scroller" // XXX: Use onMouseDown as a workaround for https://github.com/atlassian/react-beautiful-dnd/issues/273
      // instead of onClick. Otherwise we experience https://github.com/vector-im/riot-web/issues/6253
      ,
      onMouseDown: this.onMouseDown
    }, /*#__PURE__*/_react.default.createElement(_reactBeautifulDnd.Droppable, {
      droppableId: "tag-panel-droppable",
      type: "draggable-TagTile"
    }, (provided, snapshot) => /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_TagPanel_tagTileContainer",
      ref: provided.innerRef
    }, tags, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(ActionButton, {
      tooltip: true,
      label: (0, _languageHandler._t)("Communities"),
      action: "toggle_my_groups",
      className: "mx_TagTile mx_TagTile_plus"
    })), provided.placeholder))));
  }

});
var _default = TagPanel;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,