"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _matrixJsSdk = require("matrix-js-sdk");

var sdk = _interopRequireWildcard(require("../../index"));

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _EventIndexPeg = _interopRequireDefault(require("../../indexing/EventIndexPeg"));

var _languageHandler = require("../../languageHandler");

/*
Copyright 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/*
 * Component which shows the filtered file using a TimelinePanel
 */
const FilePanel = (0, _createReactClass.default)({
  displayName: 'FilePanel',
  // This is used to track if a decrypted event was a live event and should be
  // added to the timeline.
  decryptingEvents: new Set(),
  propTypes: {
    roomId: _propTypes.default.string.isRequired
  },
  getInitialState: function () {
    return {
      timelineSet: null
    };
  },

  onRoomTimeline(ev, room, toStartOfTimeline, removed, data) {
    if (room.roomId !== this.props.roomId) return;
    if (toStartOfTimeline || !data || !data.liveEvent || ev.isRedacted()) return;

    if (ev.isBeingDecrypted()) {
      this.decryptingEvents.add(ev.getId());
    } else {
      this.addEncryptedLiveEvent(ev);
    }
  },

  onEventDecrypted(ev, err) {
    if (ev.getRoomId() !== this.props.roomId) return;
    const eventId = ev.getId();
    if (!this.decryptingEvents.delete(eventId)) return;
    if (err) return;
    this.addEncryptedLiveEvent(ev);
  },

  addEncryptedLiveEvent(ev, toStartOfTimeline) {
    if (!this.state.timelineSet) return;
    const timeline = this.state.timelineSet.getLiveTimeline();
    if (ev.getType() !== "m.room.message") return;

    if (["m.file", "m.image", "m.video", "m.audio"].indexOf(ev.getContent().msgtype) == -1) {
      return;
    }

    if (!this.state.timelineSet.eventIdToTimeline(ev.getId())) {
      this.state.timelineSet.addEventToTimeline(ev, timeline, false);
    }
  },

  async componentDidMount() {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    await this.updateTimelineSet(this.props.roomId);
    if (!_MatrixClientPeg.MatrixClientPeg.get().isRoomEncrypted(this.props.roomId)) return; // The timelineSets filter makes sure that encrypted events that contain
    // URLs never get added to the timeline, even if they are live events.
    // These methods are here to manually listen for such events and add
    // them despite the filter's best efforts.
    //
    // We do this only for encrypted rooms and if an event index exists,
    // this could be made more general in the future or the filter logic
    // could be fixed.

    if (_EventIndexPeg.default.get() !== null) {
      client.on('Room.timeline', this.onRoomTimeline);
      client.on('Event.decrypted', this.onEventDecrypted);
    }
  },

  componentWillUnmount() {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    if (client === null) return;
    if (!_MatrixClientPeg.MatrixClientPeg.get().isRoomEncrypted(this.props.roomId)) return;

    if (_EventIndexPeg.default.get() !== null) {
      client.removeListener('Room.timeline', this.onRoomTimeline);
      client.removeListener('Event.decrypted', this.onEventDecrypted);
    }
  },

  async fetchFileEventsServer(room) {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const filter = new _matrixJsSdk.Filter(client.credentials.userId);
    filter.setDefinition({
      "room": {
        "timeline": {
          "contains_url": true,
          "types": ["m.room.message"]
        }
      }
    });
    const filterId = await client.getOrCreateFilter("FILTER_FILES_" + client.credentials.userId, filter);
    filter.filterId = filterId;
    const timelineSet = room.getOrCreateFilteredTimelineSet(filter);
    return timelineSet;
  },

  onPaginationRequest(timelineWindow, direction, limit) {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const eventIndex = _EventIndexPeg.default.get();

    const roomId = this.props.roomId;
    const room = client.getRoom(roomId); // We override the pagination request for encrypted rooms so that we ask
    // the event index to fulfill the pagination request. Asking the server
    // to paginate won't ever work since the server can't correctly filter
    // out events containing URLs

    if (client.isRoomEncrypted(roomId) && eventIndex !== null) {
      return eventIndex.paginateTimelineWindow(room, timelineWindow, direction, limit);
    } else {
      return timelineWindow.paginate(direction, limit);
    }
  },

  async updateTimelineSet(roomId
  /*: string*/
  ) {
    const client = _MatrixClientPeg.MatrixClientPeg.get();

    const room = client.getRoom(roomId);

    const eventIndex = _EventIndexPeg.default.get();

    this.noRoom = !room;

    if (room) {
      let timelineSet;

      try {
        timelineSet = await this.fetchFileEventsServer(room); // If this room is encrypted the file panel won't be populated
        // correctly since the defined filter doesn't support encrypted
        // events and the server can't check if encrypted events contain
        // URLs.
        //
        // This is where our event index comes into place, we ask the
        // event index to populate the timelineSet for us. This call
        // will add 10 events to the live timeline of the set. More can
        // be requested using pagination.

        if (client.isRoomEncrypted(roomId) && eventIndex !== null) {
          const timeline = timelineSet.getLiveTimeline();
          await eventIndex.populateFileTimeline(timelineSet, timeline, room, 10);
        }

        this.setState({
          timelineSet: timelineSet
        });
      } catch (error) {
        console.error("Failed to get or create file panel filter", error);
      }
    } else {
      console.error("Failed to add filtered timelineSet for FilePanel as no room!");
    }
  },

  render: function () {
    if (_MatrixClientPeg.MatrixClientPeg.get().isGuest()) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_FilePanel mx_RoomView_messageListWrapper"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomView_empty"
      }, (0, _languageHandler._t)("You must <a>register</a> to use this functionality", {}, {
        'a': sub => /*#__PURE__*/_react.default.createElement("a", {
          href: "#/register",
          key: "sub"
        }, sub)
      })));
    } else if (this.noRoom) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_FilePanel mx_RoomView_messageListWrapper"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_RoomView_empty"
      }, (0, _languageHandler._t)("You must join the room to see its files")));
    } // wrap a TimelinePanel with the jump-to-event bits turned off.


    const TimelinePanel = sdk.getComponent("structures.TimelinePanel");
    const Loader = sdk.getComponent("elements.Spinner");

    if (this.state.timelineSet) {
      // console.log("rendering TimelinePanel for timelineSet " + this.state.timelineSet.room.roomId + " " +
      //             "(" + this.state.timelineSet._timelines.join(", ") + ")" + " with key " + this.props.roomId);
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_FilePanel",
        role: "tabpanel"
      }, /*#__PURE__*/_react.default.createElement(TimelinePanel, {
        key: "filepanel_" + this.props.roomId,
        manageReadReceipts: false,
        manageReadMarkers: false,
        timelineSet: this.state.timelineSet,
        showUrlPreview: false,
        onPaginationRequest: this.onPaginationRequest,
        tileShape: "file_grid",
        resizeNotifier: this.props.resizeNotifier,
        empty: (0, _languageHandler._t)('There are no visible files in this room')
      }));
    } else {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_FilePanel",
        role: "tabpanel"
      }, /*#__PURE__*/_react.default.createElement(Loader, null));
    }
  }
});
var _default = FilePanel;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,