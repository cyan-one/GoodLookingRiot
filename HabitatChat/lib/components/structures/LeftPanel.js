"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Keyboard = require("../../Keyboard");

var sdk = _interopRequireWildcard(require("../../index"));

var _dispatcher = _interopRequireDefault(require("../../dispatcher/dispatcher"));

var VectorConferenceHandler = _interopRequireWildcard(require("../../VectorConferenceHandler"));

var _SettingsStore = _interopRequireDefault(require("../../settings/SettingsStore"));

var _languageHandler = require("../../languageHandler");

var _Analytics = _interopRequireDefault(require("../../Analytics"));

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const LeftPanel = (0, _createReactClass.default)({
  displayName: 'LeftPanel',
  // NB. If you add props, don't forget to update
  // shouldComponentUpdate!
  propTypes: {
    collapsed: _propTypes.default.bool.isRequired
  },
  getInitialState: function () {
    return {
      searchFilter: '',
      breadcrumbs: false
    };
  },
  // TODO: [REACT-WARNING] Move this to constructor
  UNSAFE_componentWillMount: function () {
    this.focusedElement = null;
    this._breadcrumbsWatcherRef = _SettingsStore.default.watchSetting("breadcrumbs", null, this._onBreadcrumbsChanged);
    this._tagPanelWatcherRef = _SettingsStore.default.watchSetting("TagPanel.enableTagPanel", null, () => this.forceUpdate());
    const useBreadcrumbs = !!_SettingsStore.default.getValue("breadcrumbs");

    _Analytics.default.setBreadcrumbs(useBreadcrumbs);

    this.setState({
      breadcrumbs: useBreadcrumbs
    });
  },
  componentWillUnmount: function () {
    _SettingsStore.default.unwatchSetting(this._breadcrumbsWatcherRef);

    _SettingsStore.default.unwatchSetting(this._tagPanelWatcherRef);
  },
  shouldComponentUpdate: function (nextProps, nextState) {
    // MatrixChat will update whenever the user switches
    // rooms, but propagating this change all the way down
    // the react tree is quite slow, so we cut this off
    // here. The RoomTiles listen for the room change
    // events themselves to know when to update.
    // We just need to update if any of these things change.
    if (this.props.collapsed !== nextProps.collapsed || this.props.disabled !== nextProps.disabled) {
      return true;
    }

    if (this.state.searchFilter !== nextState.searchFilter) {
      return true;
    }

    if (this.state.searchExpanded !== nextState.searchExpanded) {
      return true;
    }

    return false;
  },

  componentDidUpdate(prevProps, prevState) {
    if (prevState.breadcrumbs !== this.state.breadcrumbs) {
      _Analytics.default.setBreadcrumbs(this.state.breadcrumbs);
    }
  },

  _onBreadcrumbsChanged: function (settingName, roomId, level, valueAtLevel, value) {
    // Features are only possible at a single level, so we can get away with using valueAtLevel.
    // The SettingsStore runs on the same tick as the update, so `value` will be wrong.
    this.setState({
      breadcrumbs: valueAtLevel
    }); // For some reason the setState doesn't trigger a render of the component, so force one.
    // Probably has to do with the change happening outside of a change detector cycle.

    this.forceUpdate();
  },
  _onFocus: function (ev) {
    this.focusedElement = ev.target;
  },
  _onBlur: function (ev) {
    this.focusedElement = null;
  },
  _onFilterKeyDown: function (ev) {
    if (!this.focusedElement) return;

    switch (ev.key) {
      // On enter of rooms filter select and activate first room if such one exists
      case _Keyboard.Key.ENTER:
        {
          const firstRoom = ev.target.closest(".mx_LeftPanel").querySelector(".mx_RoomTile");

          if (firstRoom) {
            firstRoom.click();
          }

          break;
        }
    }
  },
  _onKeyDown: function (ev) {
    if (!this.focusedElement) return;

    switch (ev.key) {
      case _Keyboard.Key.ARROW_UP:
        this._onMoveFocus(ev, true, true);

        break;

      case _Keyboard.Key.ARROW_DOWN:
        this._onMoveFocus(ev, false, true);

        break;
    }
  },
  _onMoveFocus: function (ev, up, trap) {
    let element = this.focusedElement; // unclear why this isn't needed
    // var descending = (up == this.focusDirection) ? this.focusDescending : !this.focusDescending;
    // this.focusDirection = up;

    let descending = false; // are we currently descending or ascending through the DOM tree?

    let classes;

    do {
      const child = up ? element.lastElementChild : element.firstElementChild;
      const sibling = up ? element.previousElementSibling : element.nextElementSibling;

      if (descending) {
        if (child) {
          element = child;
        } else if (sibling) {
          element = sibling;
        } else {
          descending = false;
          element = element.parentElement;
        }
      } else {
        if (sibling) {
          element = sibling;
          descending = true;
        } else {
          element = element.parentElement;
        }
      }

      if (element) {
        classes = element.classList;
      }
    } while (element && !(classes.contains("mx_RoomTile") || classes.contains("mx_RoomSubList_label") || classes.contains("mx_LeftPanel_filterRooms")));

    if (element) {
      ev.stopPropagation();
      ev.preventDefault();
      element.focus();
      this.focusedElement = element;
    } else if (trap) {
      // if navigation is via up/down arrow-keys, trap in the widget so it doesn't send to composer
      ev.stopPropagation();
      ev.preventDefault();
    }
  },
  onSearch: function (term) {
    this.setState({
      searchFilter: term
    });
  },
  onSearchCleared: function (source) {
    if (source === "keyboard") {
      _dispatcher.default.dispatch({
        action: 'focus_composer'
      });
    }

    this.setState({
      searchExpanded: false
    });
  },
  collectRoomList: function (ref) {
    this._roomList = ref;
  },
  _onSearchFocus: function () {
    this.setState({
      searchExpanded: true
    });
  },
  _onSearchBlur: function (event) {
    if (event.target.value.length === 0) {
      this.setState({
        searchExpanded: false
      });
    }
  },
  render: function () {
    const RoomList = sdk.getComponent('rooms.RoomList');
    const RoomBreadcrumbs = sdk.getComponent('rooms.RoomBreadcrumbs');
    const TagPanel = sdk.getComponent('structures.TagPanel');
    const CustomRoomTagPanel = sdk.getComponent('structures.CustomRoomTagPanel');
    const TopLeftMenuButton = sdk.getComponent('structures.TopLeftMenuButton');
    const SearchBox = sdk.getComponent('structures.SearchBox');
    const CallPreview = sdk.getComponent('voip.CallPreview');
    const AccessibleButton = sdk.getComponent('elements.AccessibleButton');

    const tagPanelEnabled = _SettingsStore.default.getValue("TagPanel.enableTagPanel");

    let tagPanelContainer;

    const isCustomTagsEnabled = _SettingsStore.default.isFeatureEnabled("feature_custom_tags");

    if (tagPanelEnabled) {
      tagPanelContainer = /*#__PURE__*/_react.default.createElement("div", {
        className: "mx_LeftPanel_tagPanelContainer"
      }, /*#__PURE__*/_react.default.createElement(TagPanel, null), isCustomTagsEnabled ? /*#__PURE__*/_react.default.createElement(CustomRoomTagPanel, null) : undefined);
    }

    const containerClasses = (0, _classnames.default)("mx_LeftPanel_container", "mx_fadable", {
      "collapsed": this.props.collapsed,
      "mx_LeftPanel_container_hasTagPanel": tagPanelEnabled,
      "mx_fadable_faded": this.props.disabled
    });
    let exploreButton;

    if (!this.props.collapsed) {
      exploreButton = /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)("mx_LeftPanel_explore", {
          "mx_LeftPanel_explore_hidden": this.state.searchExpanded
        })
      }, /*#__PURE__*/_react.default.createElement(AccessibleButton, {
        onClick: () => _dispatcher.default.dispatch({
          action: 'view_room_directory'
        })
      }, (0, _languageHandler._t)("Explore")));
    }

    const searchBox = /*#__PURE__*/_react.default.createElement(SearchBox, {
      className: "mx_LeftPanel_filterRooms",
      enableRoomSearchFocus: true,
      blurredPlaceholder: (0, _languageHandler._t)('Filter'),
      placeholder: (0, _languageHandler._t)('Filter roomsâ€¦'),
      onKeyDown: this._onFilterKeyDown,
      onSearch: this.onSearch,
      onCleared: this.onSearchCleared,
      onFocus: this._onSearchFocus,
      onBlur: this._onSearchBlur,
      collapsed: this.props.collapsed
    });

    let breadcrumbs;

    if (this.state.breadcrumbs) {
      breadcrumbs = /*#__PURE__*/_react.default.createElement(RoomBreadcrumbs, {
        collapsed: this.props.collapsed
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: containerClasses
    }, tagPanelContainer, /*#__PURE__*/_react.default.createElement("aside", {
      className: "mx_LeftPanel dark-panel"
    }, /*#__PURE__*/_react.default.createElement(TopLeftMenuButton, {
      collapsed: this.props.collapsed
    }), breadcrumbs, /*#__PURE__*/_react.default.createElement(CallPreview, {
      ConferenceHandler: VectorConferenceHandler
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_LeftPanel_exploreAndFilterRow",
      onKeyDown: this._onKeyDown,
      onFocus: this._onFocus,
      onBlur: this._onBlur
    }, exploreButton, searchBox), /*#__PURE__*/_react.default.createElement(RoomList, {
      onKeyDown: this._onKeyDown,
      onFocus: this._onFocus,
      onBlur: this._onBlur,
      ref: this.collectRoomList,
      resizeNotifier: this.props.resizeNotifier,
      collapsed: this.props.collapsed,
      searchFilter: this.state.searchFilter,
      ConferenceHandler: VectorConferenceHandler
    })));
  }
});
var _default = LeftPanel;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,