"use strict";

var _interopRequireWildcard3 = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime/helpers/interopRequireWildcard"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var sdk = _interopRequireWildcard3(require("../../../../index"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _languageHandler = require("../../../../languageHandler");

var _SettingsStore = _interopRequireWildcard3(require("../../../../settings/SettingsStore"));

var _Modal = _interopRequireDefault(require("../../../../Modal"));

var _FormattingUtils = require("../../../../utils/FormattingUtils");

var _EventIndexPeg = _interopRequireDefault(require("../../../../indexing/EventIndexPeg"));

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/*
 * Allows the user to introspect the event index state and disable it.
 */
class ManageEventIndexDialog extends _react.default.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "updateCurrentRoom", async room => {
      const eventIndex = _EventIndexPeg.default.get();

      let stats;

      try {
        stats = await eventIndex.getStats();
      } catch {
        // This call may fail if sporadically, not a huge issue as we will
        // try later again and probably succeed.
        return;
      }

      let currentRoom = null;
      if (room) currentRoom = room.name;
      const roomStats = eventIndex.crawlingRooms();
      const crawlingRoomsCount = roomStats.crawlingRooms.size;
      const roomCount = roomStats.totalRooms.size;
      this.setState({
        eventIndexSize: stats.size,
        eventCount: stats.eventCount,
        crawlingRoomsCount: crawlingRoomsCount,
        roomCount: roomCount,
        currentRoom: currentRoom
      });
    });
    (0, _defineProperty2.default)(this, "_onDisable", async () => {
      _Modal.default.createTrackedDialogAsync("Disable message search", "Disable message search", Promise.resolve().then(() => (0, _interopRequireWildcard2.default)(require("./DisableEventIndexDialog"))), null, null,
      /* priority = */
      false,
      /* static = */
      true);
    });
    (0, _defineProperty2.default)(this, "_onCrawlerSleepTimeChange", e => {
      this.setState({
        crawlerSleepTime: e.target.value
      });

      _SettingsStore.default.setValue("crawlerSleepTime", null, _SettingsStore.SettingLevel.DEVICE, e.target.value);
    });
    this.state = {
      eventIndexSize: 0,
      eventCount: 0,
      crawlingRoomsCount: 0,
      roomCount: 0,
      currentRoom: null,
      crawlerSleepTime: _SettingsStore.default.getValueAt(_SettingsStore.SettingLevel.DEVICE, 'crawlerSleepTime')
    };
  }

  componentWillUnmount()
  /*: void*/
  {
    const eventIndex = _EventIndexPeg.default.get();

    if (eventIndex !== null) {
      eventIndex.removeListener("changedCheckpoint", this.updateCurrentRoom);
    }
  }

  async componentDidMount()
  /*: void*/
  {
    let eventIndexSize = 0;
    let crawlingRoomsCount = 0;
    let roomCount = 0;
    let eventCount = 0;
    let currentRoom = null;

    const eventIndex = _EventIndexPeg.default.get();

    if (eventIndex !== null) {
      eventIndex.on("changedCheckpoint", this.updateCurrentRoom);

      try {
        const stats = await eventIndex.getStats();
        eventIndexSize = stats.size;
        eventCount = stats.eventCount;
      } catch {// This call may fail if sporadically, not a huge issue as we
        // will try later again in the updateCurrentRoom call and
        // probably succeed.
      }

      const roomStats = eventIndex.crawlingRooms();
      crawlingRoomsCount = roomStats.crawlingRooms.size;
      roomCount = roomStats.totalRooms.size;
      const room = eventIndex.currentRoom();
      if (room) currentRoom = room.name;
    }

    this.setState({
      eventIndexSize,
      eventCount,
      crawlingRoomsCount,
      roomCount,
      currentRoom
    });
  }

  render() {
    let crawlerState;

    if (this.state.currentRoom === null) {
      crawlerState = (0, _languageHandler._t)("Not currently indexing messages for any room.");
    } else {
      crawlerState = (0, _languageHandler._t)("Currently indexing: %(currentRoom)s", {
        currentRoom: this.state.currentRoom
      });
    }

    const Field = sdk.getComponent('views.elements.Field');
    const doneRooms = Math.max(0, this.state.roomCount - this.state.crawlingRoomsCount);

    const eventIndexingSettings = /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Riot is securely caching encrypted messages locally for them " + "to appear in search results:"), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_SettingsTab_subsectionText"
    }, crawlerState, /*#__PURE__*/_react.default.createElement("br", null), (0, _languageHandler._t)("Space used:"), " ", (0, _FormattingUtils.formatBytes)(this.state.eventIndexSize, 0), /*#__PURE__*/_react.default.createElement("br", null), (0, _languageHandler._t)("Indexed messages:"), " ", (0, _FormattingUtils.formatCountLong)(this.state.eventCount), /*#__PURE__*/_react.default.createElement("br", null), (0, _languageHandler._t)("Indexed rooms:"), " ", (0, _languageHandler._t)("%(doneRooms)s out of %(totalRooms)s", {
      doneRooms: (0, _FormattingUtils.formatCountLong)(doneRooms),
      totalRooms: (0, _FormattingUtils.formatCountLong)(this.state.roomCount)
    }), " ", /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement(Field, {
      label: (0, _languageHandler._t)('Message downloading sleep time(ms)'),
      type: "number",
      value: this.state.crawlerSleepTime,
      onChange: this._onCrawlerSleepTimeChange
    })));

    const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');
    const DialogButtons = sdk.getComponent('views.elements.DialogButtons');
    return /*#__PURE__*/_react.default.createElement(BaseDialog, {
      className: "mx_ManageEventIndexDialog",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("Message search")
    }, eventIndexingSettings, /*#__PURE__*/_react.default.createElement(DialogButtons, {
      primaryButton: (0, _languageHandler._t)("Done"),
      onPrimaryButtonClick: this.props.onFinished,
      primaryButtonClass: "primary",
      cancelButton: (0, _languageHandler._t)("Disable"),
      onCancel: this._onDisable,
      cancelButtonClass: "danger"
    }));
  }

}

exports.default = ManageEventIndexDialog;
(0, _defineProperty2.default)(ManageEventIndexDialog, "propTypes", {
  onFinished: _propTypes.default.func.isRequired
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,