"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _matrixJsSdk = require("matrix-js-sdk");

var MegolmExportEncryption = _interopRequireWildcard(require("../../../utils/MegolmExportEncryption"));

var sdk = _interopRequireWildcard(require("../../../index"));

var _languageHandler = require("../../../languageHandler");

/*
Copyright 2017 Vector Creations Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function readFileAsArrayBuffer(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();

    reader.onload = e => {
      resolve(e.target.result);
    };

    reader.onerror = reject;
    reader.readAsArrayBuffer(file);
  });
}

const PHASE_EDIT = 1;
const PHASE_IMPORTING = 2;

var _default = (0, _createReactClass.default)({
  displayName: 'ImportE2eKeysDialog',
  propTypes: {
    matrixClient: _propTypes.default.instanceOf(_matrixJsSdk.MatrixClient).isRequired,
    onFinished: _propTypes.default.func.isRequired
  },
  getInitialState: function () {
    return {
      enableSubmit: false,
      phase: PHASE_EDIT,
      errStr: null
    };
  },
  // TODO: [REACT-WARNING] Replace component with real class, use constructor for refs
  UNSAFE_componentWillMount: function () {
    this._unmounted = false;
    this._file = (0, _react.createRef)();
    this._passphrase = (0, _react.createRef)();
  },
  componentWillUnmount: function () {
    this._unmounted = true;
  },
  _onFormChange: function (ev) {
    const files = this._file.current.files || [];
    this.setState({
      enableSubmit: this._passphrase.current.value !== "" && files.length > 0
    });
  },
  _onFormSubmit: function (ev) {
    ev.preventDefault();

    this._startImport(this._file.current.files[0], this._passphrase.current.value);

    return false;
  },
  _startImport: function (file, passphrase) {
    this.setState({
      errStr: null,
      phase: PHASE_IMPORTING
    });
    return readFileAsArrayBuffer(file).then(arrayBuffer => {
      return MegolmExportEncryption.decryptMegolmKeyFile(arrayBuffer, passphrase);
    }).then(keys => {
      return this.props.matrixClient.importRoomKeys(JSON.parse(keys));
    }).then(() => {
      // TODO: it would probably be nice to give some feedback about what we've imported here.
      this.props.onFinished(true);
    }).catch(e => {
      console.error("Error importing e2e keys:", e);

      if (this._unmounted) {
        return;
      }

      const msg = e.friendlyText || (0, _languageHandler._t)('Unknown error');
      this.setState({
        errStr: msg,
        phase: PHASE_EDIT
      });
    });
  },
  _onCancelClick: function (ev) {
    ev.preventDefault();
    this.props.onFinished(false);
    return false;
  },
  render: function () {
    const BaseDialog = sdk.getComponent('views.dialogs.BaseDialog');
    const disableForm = this.state.phase !== PHASE_EDIT;
    return /*#__PURE__*/_react.default.createElement(BaseDialog, {
      className: "mx_importE2eKeysDialog",
      onFinished: this.props.onFinished,
      title: (0, _languageHandler._t)("Import room keys")
    }, /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this._onFormSubmit
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_content"
    }, /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)('This process allows you to import encryption keys ' + 'that you had previously exported from another Matrix ' + 'client. You will then be able to decrypt any ' + 'messages that the other client could decrypt.')), /*#__PURE__*/_react.default.createElement("p", null, (0, _languageHandler._t)('The export file will be protected with a passphrase. ' + 'You should enter the passphrase here, to decrypt the file.')), /*#__PURE__*/_react.default.createElement("div", {
      className: "error"
    }, this.state.errStr), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_E2eKeysDialog_inputTable"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_E2eKeysDialog_inputRow"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_E2eKeysDialog_inputLabel"
    }, /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: "importFile"
    }, (0, _languageHandler._t)("File to import"))), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_E2eKeysDialog_inputCell"
    }, /*#__PURE__*/_react.default.createElement("input", {
      ref: this._file,
      id: "importFile",
      type: "file",
      autoFocus: true,
      onChange: this._onFormChange,
      disabled: disableForm
    }))), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_E2eKeysDialog_inputRow"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_E2eKeysDialog_inputLabel"
    }, /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: "passphrase"
    }, (0, _languageHandler._t)("Enter passphrase"))), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_E2eKeysDialog_inputCell"
    }, /*#__PURE__*/_react.default.createElement("input", {
      ref: this._passphrase,
      id: "passphrase",
      size: "64",
      type: "password",
      onChange: this._onFormChange,
      disabled: disableForm
    }))))), /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Dialog_buttons"
    }, /*#__PURE__*/_react.default.createElement("input", {
      className: "mx_Dialog_primary",
      type: "submit",
      value: (0, _languageHandler._t)('Import'),
      disabled: !this.state.enableSubmit || disableForm
    }), /*#__PURE__*/_react.default.createElement("button", {
      onClick: this._onCancelClick,
      disabled: disableForm
    }, (0, _languageHandler._t)("Cancel")))));
  }
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,