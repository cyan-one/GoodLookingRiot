"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IntegrationManagers = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _SdkConfig = _interopRequireDefault(require("../SdkConfig"));

var sdk = _interopRequireWildcard(require("../index"));

var _Modal = _interopRequireDefault(require("../Modal"));

var _IntegrationManagerInstance = require("./IntegrationManagerInstance");

var _WidgetUtils = _interopRequireDefault(require("../utils/WidgetUtils"));

var _MatrixClientPeg = require("../MatrixClientPeg");

var _matrixJsSdk = require("matrix-js-sdk");

var _SettingsStore = _interopRequireDefault(require("../settings/SettingsStore"));

/*
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const HS_MANAGERS_REFRESH_INTERVAL = 8 * 60 * 60 * 1000; // 8 hours

const KIND_PREFERENCE = [// Ordered: first is most preferred, last is least preferred.
_IntegrationManagerInstance.KIND_ACCOUNT, _IntegrationManagerInstance.KIND_HOMESERVER, _IntegrationManagerInstance.KIND_CONFIG];

class IntegrationManagers {
  static sharedInstance()
  /*: IntegrationManagers*/
  {
    if (!IntegrationManagers._instance) {
      IntegrationManagers._instance = new IntegrationManagers();
    }

    return IntegrationManagers._instance;
  }

  constructor() {
    (0, _defineProperty2.default)(this, "_managers", []);
    (0, _defineProperty2.default)(this, "_client", void 0);
    (0, _defineProperty2.default)(this, "_wellknownRefreshTimerId", null);
    (0, _defineProperty2.default)(this, "_primaryManager", void 0);
    (0, _defineProperty2.default)(this, "_onAccountData", (ev
    /*: MatrixEvent*/
    ) =>
    /*: void*/
    {
      if (ev.getType() === 'm.widgets') {
        this._compileManagers();
      }
    });

    this._compileManagers();
  }

  startWatching()
  /*: void*/
  {
    this.stopWatching();
    this._client = _MatrixClientPeg.MatrixClientPeg.get();

    this._client.on("accountData", this._onAccountData);

    this._compileManagers();

    setInterval(() => this._setupHomeserverManagers(), HS_MANAGERS_REFRESH_INTERVAL);
  }

  stopWatching()
  /*: void*/
  {
    if (!this._client) return;

    this._client.removeListener("accountData", this._onAccountData);

    if (this._wellknownRefreshTimerId !== null) clearInterval(this._wellknownRefreshTimerId);
  }

  _compileManagers() {
    this._managers = [];

    this._setupConfiguredManager();

    this._setupHomeserverManagers();

    this._setupAccountManagers();
  }

  _setupConfiguredManager() {
    const apiUrl = _SdkConfig.default.get()['integrations_rest_url'];

    const uiUrl = _SdkConfig.default.get()['integrations_ui_url'];

    if (apiUrl && uiUrl) {
      this._managers.push(new _IntegrationManagerInstance.IntegrationManagerInstance(_IntegrationManagerInstance.KIND_CONFIG, apiUrl, uiUrl));

      this._primaryManager = null; // reset primary
    }
  }

  async _setupHomeserverManagers() {
    if (!_MatrixClientPeg.MatrixClientPeg.get()) return;

    try {
      console.log("Updating homeserver-configured integration managers...");

      const homeserverDomain = _MatrixClientPeg.MatrixClientPeg.getHomeserverName();

      const discoveryResponse = await _matrixJsSdk.AutoDiscovery.getRawClientConfig(homeserverDomain);

      if (discoveryResponse && discoveryResponse['m.integrations']) {
        let managers = discoveryResponse['m.integrations']['managers'];
        if (!Array.isArray(managers)) managers = []; // make it an array so we can wipe the HS managers

        console.log("Homeserver has ".concat(managers.length, " integration managers")); // Clear out any known managers for the homeserver
        // TODO: Log out of the scalar clients

        this._managers = this._managers.filter(m => m.kind !== _IntegrationManagerInstance.KIND_HOMESERVER); // Now add all the managers the homeserver wants us to have

        for (const hsManager of managers) {
          if (!hsManager["api_url"]) continue;

          this._managers.push(new _IntegrationManagerInstance.IntegrationManagerInstance(_IntegrationManagerInstance.KIND_HOMESERVER, hsManager["api_url"], hsManager["ui_url"]));
        }

        this._primaryManager = null; // reset primary
      } else {
        console.log("Homeserver has no integration managers");
      }
    } catch (e) {
      console.error(e); // Errors during discovery are non-fatal
    }
  }

  _setupAccountManagers() {
    if (!this._client || !this._client.getUserId()) return; // not logged in

    const widgets = _WidgetUtils.default.getIntegrationManagerWidgets();

    widgets.forEach(w => {
      const data = w.content['data'];
      if (!data) return;
      const uiUrl = w.content['url'];
      const apiUrl = data['api_url'];
      if (!apiUrl || !uiUrl) return;
      const manager = new _IntegrationManagerInstance.IntegrationManagerInstance(_IntegrationManagerInstance.KIND_ACCOUNT, apiUrl, uiUrl);
      manager.id = w['id'] || w['state_key'] || '';

      this._managers.push(manager);
    });
    this._primaryManager = null; // reset primary
  }

  hasManager()
  /*: boolean*/
  {
    return this._managers.length > 0;
  }

  getOrderedManagers()
  /*: IntegrationManagerInstance[]*/
  {
    const ordered = [];

    for (const kind of KIND_PREFERENCE) {
      const managers = this._managers.filter(m => m.kind === kind);

      if (!managers || !managers.length) continue;

      if (kind === _IntegrationManagerInstance.KIND_ACCOUNT) {
        // Order by state_keys (IDs)
        managers.sort((a, b) => a.id.localeCompare(b.id));
      }

      ordered.push(...managers);
    }

    return ordered;
  }

  getPrimaryManager()
  /*: IntegrationManagerInstance*/
  {
    if (this.hasManager()) {
      if (this._primaryManager) return this._primaryManager;
      this._primaryManager = this.getOrderedManagers()[0];
      return this._primaryManager;
    } else {
      return null;
    }
  }

  openNoManagerDialog()
  /*: void*/
  {
    const IntegrationsImpossibleDialog = sdk.getComponent("dialogs.IntegrationsImpossibleDialog");

    _Modal.default.createTrackedDialog('Integrations impossible', '', IntegrationsImpossibleDialog);
  }

  openAll(room
  /*: Room*/
  = null, screen
  /*: string*/
  = null, integrationId
  /*: string*/
  = null)
  /*: void*/
  {
    if (!_SettingsStore.default.getValue("integrationProvisioning")) {
      return this.showDisabledDialog();
    }

    if (this._managers.length === 0) {
      return this.openNoManagerDialog();
    }

    const TabbedIntegrationManagerDialog = sdk.getComponent("views.dialogs.TabbedIntegrationManagerDialog");

    _Modal.default.createTrackedDialog('Tabbed Integration Manager', '', TabbedIntegrationManagerDialog, {
      room,
      screen,
      integrationId
    }, 'mx_TabbedIntegrationManagerDialog');
  }

  showDisabledDialog()
  /*: void*/
  {
    const IntegrationsDisabledDialog = sdk.getComponent("dialogs.IntegrationsDisabledDialog");

    _Modal.default.createTrackedDialog('Integrations disabled', '', IntegrationsDisabledDialog);
  }

  async overwriteManagerOnAccount(manager
  /*: IntegrationManagerInstance*/
  ) {
    // TODO: TravisR - We should be logging out of scalar clients.
    await _WidgetUtils.default.removeIntegrationManagerWidgets(); // TODO: TravisR - We should actually be carrying over the discovery response verbatim.

    await _WidgetUtils.default.addIntegrationManagerWidget(manager.name, manager.uiUrl, manager.apiUrl);
  }
  /**
   * Attempts to discover an integration manager using only its name. This will not validate that
   * the integration manager is functional - that is the caller's responsibility.
   * @param {string} domainName The domain name to look up.
   * @returns {Promise<IntegrationManagerInstance>} Resolves to an integration manager instance,
   * or null if none was found.
   */


  async tryDiscoverManager(domainName
  /*: string*/
  )
  /*: IntegrationManagerInstance*/
  {
    console.log("Looking up integration manager via .well-known");

    if (domainName.startsWith("http:") || domainName.startsWith("https:")) {
      // trim off the scheme and just use the domain
      const url = url.parse(domainName);
      domainName = url.host;
    }

    let wkConfig;

    try {
      const result = await fetch("https://".concat(domainName, "/.well-known/matrix/integrations"));
      wkConfig = await result.json();
    } catch (e) {
      console.error(e);
      console.warn("Failed to locate integration manager");
      return null;
    }

    if (!wkConfig || !wkConfig["m.integrations_widget"]) {
      console.warn("Missing integrations widget on .well-known response");
      return null;
    }

    const widget = wkConfig["m.integrations_widget"];

    if (!widget["url"] || !widget["data"] || !widget["data"]["api_url"]) {
      console.warn("Malformed .well-known response for integrations widget");
      return null;
    } // All discovered managers are per-user managers


    const manager = new _IntegrationManagerInstance.IntegrationManagerInstance(_IntegrationManagerInstance.KIND_ACCOUNT, widget["data"]["api_url"], widget["url"]);
    console.log("Got an integration manager (untested)"); // We don't test the manager because the caller may need to do extra
    // checks or similar with it. For instance, they may need to deal with
    // terms of service or want to call something particular.

    return manager;
  }

} // For debugging


exports.IntegrationManagers = IntegrationManagers;
(0, _defineProperty2.default)(IntegrationManagers, "_instance", void 0);
global.mxIntegrationManagers = IntegrationManagers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,