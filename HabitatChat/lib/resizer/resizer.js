"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*
Copyright 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/*
classNames:
    // class on resize-handle
    handle: string
    // class on resize-handle
    reverse: string
    // class on resize-handle
    vertical: string
    // class on container
    resizing: string
*/
class Resizer {
  // TODO move vertical/horizontal to config option/container class
  // as it doesn't make sense to mix them within one container/Resizer
  constructor(container, distributorCtor, config) {
    if (!container) {
      throw new Error("Resizer requires a non-null `container` arg");
    }

    this.container = container;
    this.distributorCtor = distributorCtor;
    this.config = config;
    this.classNames = {
      handle: "resizer-handle",
      reverse: "resizer-reverse",
      vertical: "resizer-vertical",
      resizing: "resizer-resizing"
    };
    this._onMouseDown = this._onMouseDown.bind(this);
  }

  setClassNames(classNames) {
    this.classNames = classNames;
  }

  attach() {
    this.container.addEventListener("mousedown", this._onMouseDown, false);
  }

  detach() {
    this.container.removeEventListener("mousedown", this._onMouseDown, false);
  }
  /**
  Gives the distributor for a specific resize handle, as if you would have started
  to drag that handle. Can be used to manipulate the size of an item programmatically.
  @param {number} handleIndex the index of the resize handle in the container
  @return {Distributor} a new distributor for the given handle
  */


  forHandleAt(handleIndex) {
    const handles = this._getResizeHandles();

    const handle = handles[handleIndex];

    if (handle) {
      const {
        distributor
      } = this._createSizerAndDistributor(handle);

      return distributor;
    }
  }

  forHandleWithId(id) {
    const handles = this._getResizeHandles();

    const handle = handles.find(h => h.getAttribute("data-id") === id);

    if (handle) {
      const {
        distributor
      } = this._createSizerAndDistributor(handle);

      return distributor;
    }
  }

  isReverseResizeHandle(el) {
    return el && el.classList.contains(this.classNames.reverse);
  }

  isResizeHandle(el) {
    return el && el.classList.contains(this.classNames.handle);
  }

  _onMouseDown(event) {
    // use closest in case the resize handle contains
    // child dom nodes that can be the target
    const resizeHandle = event.target && event.target.closest(".".concat(this.classNames.handle));

    if (!resizeHandle || resizeHandle.parentElement !== this.container) {
      return;
    } // prevent starting a drag operation


    event.preventDefault(); // mark as currently resizing

    if (this.classNames.resizing) {
      this.container.classList.add(this.classNames.resizing);
    }

    const {
      sizer,
      distributor
    } = this._createSizerAndDistributor(resizeHandle);

    distributor.start();

    const onMouseMove = event => {
      const offset = sizer.offsetFromEvent(event);
      distributor.resizeFromContainerOffset(offset);
    };

    const body = document.body;

    const finishResize = () => {
      if (this.classNames.resizing) {
        this.container.classList.remove(this.classNames.resizing);
      }

      distributor.finish();
      body.removeEventListener("mouseup", finishResize, false);
      document.removeEventListener("mouseleave", finishResize, false);
      body.removeEventListener("mousemove", onMouseMove, false);
    };

    body.addEventListener("mouseup", finishResize, false);
    document.addEventListener("mouseleave", finishResize, false);
    body.addEventListener("mousemove", onMouseMove, false);
  }

  _createSizerAndDistributor(resizeHandle) {
    const vertical = resizeHandle.classList.contains(this.classNames.vertical);
    const reverse = this.isReverseResizeHandle(resizeHandle);
    const Distributor = this.distributorCtor;
    const sizer = Distributor.createSizer(this.container, vertical, reverse);
    const item = Distributor.createItem(resizeHandle, this, sizer);
    const distributor = new Distributor(item, this.config);
    return {
      sizer,
      distributor
    };
  }

  _getResizeHandles() {
    return Array.from(this.container.children).filter(el => {
      return this.isResizeHandle(el);
    });
  }

}

exports.default = Resizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXNpemVyL3Jlc2l6ZXIuanMiXSwibmFtZXMiOlsiUmVzaXplciIsImNvbnN0cnVjdG9yIiwiY29udGFpbmVyIiwiZGlzdHJpYnV0b3JDdG9yIiwiY29uZmlnIiwiRXJyb3IiLCJjbGFzc05hbWVzIiwiaGFuZGxlIiwicmV2ZXJzZSIsInZlcnRpY2FsIiwicmVzaXppbmciLCJfb25Nb3VzZURvd24iLCJiaW5kIiwic2V0Q2xhc3NOYW1lcyIsImF0dGFjaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkZXRhY2giLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZm9ySGFuZGxlQXQiLCJoYW5kbGVJbmRleCIsImhhbmRsZXMiLCJfZ2V0UmVzaXplSGFuZGxlcyIsImRpc3RyaWJ1dG9yIiwiX2NyZWF0ZVNpemVyQW5kRGlzdHJpYnV0b3IiLCJmb3JIYW5kbGVXaXRoSWQiLCJpZCIsImZpbmQiLCJoIiwiZ2V0QXR0cmlidXRlIiwiaXNSZXZlcnNlUmVzaXplSGFuZGxlIiwiZWwiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImlzUmVzaXplSGFuZGxlIiwiZXZlbnQiLCJyZXNpemVIYW5kbGUiLCJ0YXJnZXQiLCJjbG9zZXN0IiwicGFyZW50RWxlbWVudCIsInByZXZlbnREZWZhdWx0IiwiYWRkIiwic2l6ZXIiLCJzdGFydCIsIm9uTW91c2VNb3ZlIiwib2Zmc2V0Iiwib2Zmc2V0RnJvbUV2ZW50IiwicmVzaXplRnJvbUNvbnRhaW5lck9mZnNldCIsImJvZHkiLCJkb2N1bWVudCIsImZpbmlzaFJlc2l6ZSIsInJlbW92ZSIsImZpbmlzaCIsIkRpc3RyaWJ1dG9yIiwiY3JlYXRlU2l6ZXIiLCJpdGVtIiwiY3JlYXRlSXRlbSIsIkFycmF5IiwiZnJvbSIsImNoaWxkcmVuIiwiZmlsdGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBOzs7Ozs7Ozs7OztBQWFlLE1BQU1BLE9BQU4sQ0FBYztBQUN6QjtBQUNBO0FBQ0FD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QXREO0FBQ0FGLElBQUFBLElBQUksQ0FBQ2hDLGdCQUFMLENBQXNCLFdBQXRCLEVBQW1DNEIsV0FBbkMsRUFBZ0QsS0FBaEQ7QUFDSDs7QUFFRHBCLEVBQUFBLDBCQUEwQixDQUFDWSxZQUFELEVBQWU7QUFDckMsVUFBTTFCLFFBQVEsR0FBRzBCLFlBQVksQ0FBQ0osU0FBYixDQUF1QkMsUUFBdkIsQ0FBZ0MsS0FBSzFCLFVBQUwsQ0FBZ0JHLFFBQWhELENBQWpCO0FBQ0EsVUFBTUQsT0FBTyxHQUFHLEtBQUtxQixxQkFBTCxDQUEyQk0sWUFBM0IsQ0FBaEI7QUFDQSxVQUFNaUIsV0FBVyxHQUFHLEtBQUtqRCxlQUF6QjtBQUNBLFVBQU1zQyxLQUFLLEdBQUdXLFdBQVcsQ0FBQ0MsV0FBWixDQUF3QixLQUFLbkQsU0FBN0IsRUFBd0NPLFFBQXhDLEVBQWtERCxPQUFsRCxDQUFkO0FBQ0EsVUFBTThDLElBQUksR0FBR0YsV0FBVyxDQUFDRyxVQUFaLENBQXVCcEIsWUFBdkIsRUFBcUMsSUFBckMsRUFBMkNNLEtBQTNDLENBQWI7QUFDQSxVQUFNbkIsV0FBVyxHQUFHLElBQUk4QixXQUFKLENBQWdCRSxJQUFoQixFQUFzQixLQUFLbEQsTUFBM0IsQ0FBcEI7QUFDQSxXQUFPO0FBQUNxQyxNQUFBQSxLQUFEO0FBQVFuQixNQUFBQTtBQUFSLEtBQVA7QUFDSDs7QUFFREQsRUFBQUEsaUJBQWlCLEdBQUc7QUFDaEIsV0FBT21DLEtBQUssQ0FBQ0MsSUFBTixDQUFXLEtBQUt2RCxTQUFMLENBQWV3RCxRQUExQixFQUFvQ0MsTUFBcEMsQ0FBMkM3QixFQUFFLElBQUk7QUFDcEQsYUFBTyxLQUFLRyxjQUFMLENBQW9CSCxFQUFwQixDQUFQO0FBQ0gsS0FGTSxDQUFQO0FBR0g7O0FBbkh3QiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxOCBOZXcgVmVjdG9yIEx0ZFxuQ29weXJpZ2h0IDIwMTkgVGhlIE1hdHJpeC5vcmcgRm91bmRhdGlvbiBDLkkuQy5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG4vKlxuY2xhc3NOYW1lczpcbiAgICAvLyBjbGFzcyBvbiByZXNpemUtaGFuZGxlXG4gICAgaGFuZGxlOiBzdHJpbmdcbiAgICAvLyBjbGFzcyBvbiByZXNpemUtaGFuZGxlXG4gICAgcmV2ZXJzZTogc3RyaW5nXG4gICAgLy8gY2xhc3Mgb24gcmVzaXplLWhhbmRsZVxuICAgIHZlcnRpY2FsOiBzdHJpbmdcbiAgICAvLyBjbGFzcyBvbiBjb250YWluZXJcbiAgICByZXNpemluZzogc3RyaW5nXG4qL1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc2l6ZXIge1xuICAgIC8vIFRPRE8gbW92ZSB2ZXJ0aWNhbC9ob3Jpem9udGFsIHRvIGNvbmZpZyBvcHRpb24vY29udGFpbmVyIGNsYXNzXG4gICAgLy8gYXMgaXQgZG9lc24ndCBtYWtlIHNlbnNlIHRvIG1peCB0aGVtIHdpdGhpbiBvbmUgY29udGFpbmVyL1Jlc2l6ZXJcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIsIGRpc3RyaWJ1dG9yQ3RvciwgY29uZmlnKSB7XG4gICAgICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZXNpemVyIHJlcXVpcmVzIGEgbm9uLW51bGwgYGNvbnRhaW5lcmAgYXJnXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB0aGlzLmRpc3RyaWJ1dG9yQ3RvciA9IGRpc3RyaWJ1dG9yQ3RvcjtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMuY2xhc3NOYW1lcyA9IHtcbiAgICAgICAgICAgIGhhbmRsZTogXCJyZXNpemVyLWhhbmRsZVwiLFxuICAgICAgICAgICAgcmV2ZXJzZTogXCJyZXNpemVyLXJldmVyc2VcIixcbiAgICAgICAgICAgIHZlcnRpY2FsOiBcInJlc2l6ZXItdmVydGljYWxcIixcbiAgICAgICAgICAgIHJlc2l6aW5nOiBcInJlc2l6ZXItcmVzaXppbmdcIixcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fb25Nb3VzZURvd24gPSB0aGlzLl9vbk1vdXNlRG93bi5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIHNldENsYXNzTmFtZXMoY2xhc3NOYW1lcykge1xuICAgICAgICB0aGlzLmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuICAgIH1cblxuICAgIGF0dGFjaCgpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLl9vbk1vdXNlRG93biwgZmFsc2UpO1xuICAgIH1cblxuICAgIGRldGFjaCgpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLl9vbk1vdXNlRG93biwgZmFsc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgIEdpdmVzIHRoZSBkaXN0cmlidXRvciBmb3IgYSBzcGVjaWZpYyByZXNpemUgaGFuZGxlLCBhcyBpZiB5b3Ugd291bGQgaGF2ZSBzdGFydGVkXG4gICAgdG8gZHJhZyB0aGF0IGhhbmRsZS4gQ2FuIGJlIHVzZWQgdG8gbWFuaXB1bGF0ZSB0aGUgc2l6ZSBvZiBhbiBpdGVtIHByb2dyYW1tYXRpY2FsbHkuXG4gICAgQHBhcmFtIHtudW1iZXJ9IGhhbmRsZUluZGV4IHRoZSBpbmRleCBvZiB0aGUgcmVzaXplIGhhbmRsZSBpbiB0aGUgY29udGFpbmVyXG4gICAgQHJldHVybiB7RGlzdHJpYnV0b3J9IGEgbmV3IGRpc3RyaWJ1dG9yIGZvciB0aGUgZ2l2ZW4gaGFuZGxlXG4gICAgKi9cbiAgICBmb3JIYW5kbGVBdChoYW5kbGVJbmRleCkge1xuICAgICAgICBjb25zdCBoYW5kbGVzID0gdGhpcy5fZ2V0UmVzaXplSGFuZGxlcygpO1xuICAgICAgICBjb25zdCBoYW5kbGUgPSBoYW5kbGVzW2hhbmRsZUluZGV4XTtcbiAgICAgICAgaWYgKGhhbmRsZSkge1xuICAgICAgICAgICAgY29uc3Qge2Rpc3RyaWJ1dG9yfSA9IHRoaXMuX2NyZWF0ZVNpemVyQW5kRGlzdHJpYnV0b3IoaGFuZGxlKTtcbiAgICAgICAgICAgIHJldHVybiBkaXN0cmlidXRvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvckhhbmRsZVdpdGhJZChpZCkge1xuICAgICAgICBjb25zdCBoYW5kbGVzID0gdGhpcy5fZ2V0UmVzaXplSGFuZGxlcygpO1xuICAgICAgICBjb25zdCBoYW5kbGUgPSBoYW5kbGVzLmZpbmQoKGgpID0+IGguZ2V0QXR0cmlidXRlKFwiZGF0YS1pZFwiKSA9PT0gaWQpO1xuICAgICAgICBpZiAoaGFuZGxlKSB7XG4gICAgICAgICAgICBjb25zdCB7ZGlzdHJpYnV0b3J9ID0gdGhpcy5fY3JlYXRlU2l6ZXJBbmREaXN0cmlidXRvcihoYW5kbGUpO1xuICAgICAgICAgICAgcmV0dXJuIGRpc3RyaWJ1dG9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNSZXZlcnNlUmVzaXplSGFuZGxlKGVsKSB7XG4gICAgICAgIHJldHVybiBlbCAmJiBlbC5jbGFzc0xpc3QuY29udGFpbnModGhpcy5jbGFzc05hbWVzLnJldmVyc2UpO1xuICAgIH1cblxuICAgIGlzUmVzaXplSGFuZGxlKGVsKSB7XG4gICAgICAgIHJldHVybiBlbCAmJiBlbC5jbGFzc0xpc3QuY29udGFpbnModGhpcy5jbGFzc05hbWVzLmhhbmRsZSk7XG4gICAgfVxuXG4gICAgX29uTW91c2VEb3duKGV2ZW50KSB7XG4gICAgICAgIC8vIHVzZSBjbG9zZXN0IGluIGNhc2UgdGhlIHJlc2l6ZSBoYW5kbGUgY29udGFpbnNcbiAgICAgICAgLy8gY2hpbGQgZG9tIG5vZGVzIHRoYXQgY2FuIGJlIHRoZSB0YXJnZXRcbiAgICAgICAgY29uc3QgcmVzaXplSGFuZGxlID0gZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5jbG9zZXN0KGAuJHt0aGlzLmNsYXNzTmFtZXMuaGFuZGxlfWApO1xuICAgICAgICBpZiAoIXJlc2l6ZUhhbmRsZSB8fCByZXNpemVIYW5kbGUucGFyZW50RWxlbWVudCAhPT0gdGhpcy5jb250YWluZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBwcmV2ZW50IHN0YXJ0aW5nIGEgZHJhZyBvcGVyYXRpb25cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAvLyBtYXJrIGFzIGN1cnJlbnRseSByZXNpemluZ1xuICAgICAgICBpZiAodGhpcy5jbGFzc05hbWVzLnJlc2l6aW5nKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy5yZXNpemluZyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7c2l6ZXIsIGRpc3RyaWJ1dG9yfSA9IHRoaXMuX2NyZWF0ZVNpemVyQW5kRGlzdHJpYnV0b3IocmVzaXplSGFuZGxlKTtcbiAgICAgICAgZGlzdHJpYnV0b3Iuc3RhcnQoKTtcblxuICAgICAgICBjb25zdCBvbk1vdXNlTW92ZSA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gc2l6ZXIub2Zmc2V0RnJvbUV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIGRpc3RyaWJ1dG9yLnJlc2l6ZUZyb21Db250YWluZXJPZmZzZXQob2Zmc2V0KTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgY29uc3QgZmluaXNoUmVzaXplID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2xhc3NOYW1lcy5yZXNpemluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jbGFzc05hbWVzLnJlc2l6aW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpc3RyaWJ1dG9yLmZpbmlzaCgpO1xuICAgICAgICAgICAgYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBmaW5pc2hSZXNpemUsIGZhbHNlKTtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIGZpbmlzaFJlc2l6ZSwgZmFsc2UpO1xuICAgICAgICAgICAgYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG9uTW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgICAgIH07XG4gICAgICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgZmluaXNoUmVzaXplLCBmYWxzZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIGZpbmlzaFJlc2l6ZSwgZmFsc2UpO1xuICAgICAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgb25Nb3VzZU1vdmUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlU2l6ZXJBbmREaXN0cmlidXRvcihyZXNpemVIYW5kbGUpIHtcbiAgICAgICAgY29uc3QgdmVydGljYWwgPSByZXNpemVIYW5kbGUuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuY2xhc3NOYW1lcy52ZXJ0aWNhbCk7XG4gICAgICAgIGNvbnN0IHJldmVyc2UgPSB0aGlzLmlzUmV2ZXJzZVJlc2l6ZUhhbmRsZShyZXNpemVIYW5kbGUpO1xuICAgICAgICBjb25zdCBEaXN0cmlidXRvciA9IHRoaXMuZGlzdHJpYnV0b3JDdG9yO1xuICAgICAgICBjb25zdCBzaXplciA9IERpc3RyaWJ1dG9yLmNyZWF0ZVNpemVyKHRoaXMuY29udGFpbmVyLCB2ZXJ0aWNhbCwgcmV2ZXJzZSk7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBEaXN0cmlidXRvci5jcmVhdGVJdGVtKHJlc2l6ZUhhbmRsZSwgdGhpcywgc2l6ZXIpO1xuICAgICAgICBjb25zdCBkaXN0cmlidXRvciA9IG5ldyBEaXN0cmlidXRvcihpdGVtLCB0aGlzLmNvbmZpZyk7XG4gICAgICAgIHJldHVybiB7c2l6ZXIsIGRpc3RyaWJ1dG9yfTtcbiAgICB9XG5cbiAgICBfZ2V0UmVzaXplSGFuZGxlcygpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5jb250YWluZXIuY2hpbGRyZW4pLmZpbHRlcihlbCA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc1Jlc2l6ZUhhbmRsZShlbCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==