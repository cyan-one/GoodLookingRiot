"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AudioNotificationsEnabledController = exports.NotificationBodyEnabledController = exports.NotificationsEnabledController = void 0;

var _SettingController = _interopRequireDefault(require("./SettingController"));

var _MatrixClientPeg = require("../../MatrixClientPeg");

var _pushprocessor = require("matrix-js-sdk/src/pushprocessor");

/*
Copyright 2017 Travis Ralston

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// XXX: This feels wrong.
function isMasterRuleEnabled() {
  // Return the value of the master push rule as a default
  const processor = new _pushprocessor.PushProcessor(_MatrixClientPeg.MatrixClientPeg.get());
  const masterRule = processor.getPushRuleById(".m.rule.master");

  if (!masterRule) {
    console.warn("No master push rule! Notifications are disabled for this user.");
    return false;
  } // Why enabled == false means "enabled" is beyond me.


  return !masterRule.enabled;
}

function getNotifier() {
  let Notifier = require('../../Notifier'); // avoids cyclical references


  if (Notifier.default) Notifier = Notifier.default; // correct for webpack require() weirdness

  return Notifier;
}

class NotificationsEnabledController extends _SettingController.default {
  getValueOverride(level, roomId, calculatedValue, calculatedAtLevel) {
    if (!getNotifier().isPossible()) return false;

    if (calculatedValue === null || calculatedAtLevel === "default") {
      return isMasterRuleEnabled();
    }

    return calculatedValue;
  }

  onChange(level, roomId, newValue) {
    if (getNotifier().supportsDesktopNotifications()) {
      getNotifier().setEnabled(newValue);
    }
  }

}

exports.NotificationsEnabledController = NotificationsEnabledController;

class NotificationBodyEnabledController extends _SettingController.default {
  getValueOverride(level, roomId, calculatedValue) {
    if (!getNotifier().isPossible()) return false;

    if (calculatedValue === null) {
      return isMasterRuleEnabled();
    }

    return calculatedValue;
  }

}

exports.NotificationBodyEnabledController = NotificationBodyEnabledController;

class AudioNotificationsEnabledController extends _SettingController.default {
  getValueOverride(level, roomId, calculatedValue) {
    if (!getNotifier().isPossible()) return false; // Note: Audio notifications are *not* enabled by default.

    return calculatedValue;
  }

}

exports.AudioNotificationsEnabledController = AudioNotificationsEnabledController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXR0aW5ncy9jb250cm9sbGVycy9Ob3RpZmljYXRpb25Db250cm9sbGVycy5qcyJdLCJuYW1lcyI6WyJpc01hc3RlclJ1bGVFbmFibGVkIiwicHJvY2Vzc29yIiwiUHVzaFByb2Nlc3NvciIsIk1hdHJpeENsaWVudFBlZyIsImdldCIsIm1hc3RlclJ1bGUiLCJnZXRQdXNoUnVsZUJ5SWQiLCJjb25zb2xlIiwid2FybiIsImVuYWJsZWQiLCJnZXROb3RpZmllciIsIk5vdGlmaWVyIiwicmVxdWlyZSIsImRlZmF1bHQiLCJOb3RpZmljYXRpb25zRW5hYmxlZENvbnRyb2xsZXIiLCJTZXR0aW5nQ29udHJvbGxlciIsImdldFZhbHVlT3ZlcnJpZGUiLCJsZXZlbCIsInJvb21JZCIsImNhbGN1bGF0ZWRWYWx1ZSIsImNhbGN1bGF0ZWRBdExldmVsIiwiaXNQb3NzaWJsZSIsIm9uQ2hhbmdlIiwibmV3VmFsdWUiLCJzdXBwb3J0c0Rlc2t0b3BOb3RpZmljYXRpb25zIiwic2V0RW5hYmxlZCIsIk5vdGlmaWNhdGlvbkJvZHlFbmFibGVkQ29udHJvbGxlciIsIkF1ZGlvTm90aWZpY2F0aW9uc0VuYWJsZWRDb250cm9sbGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFnQkE7O0FBQ0E7O0FBR0E7O0FBcEJBOzs7Ozs7Ozs7Ozs7Ozs7QUFtQkE7QUFHQSxTQUFTQSxtQkFBVCxHQUErQjtBQUMzQjtBQUNBLFFBQU1DLFNBQVMsR0FBRyxJQUFJQyw0QkFBSixDQUFrQkMsaUNBQWdCQyxHQUFoQixFQUFsQixDQUFsQjtBQUNBLFFBQU1DLFVBQVUsR0FBR0osU0FBUyxDQUFDSyxlQUFWLENBQTBCLGdCQUExQixDQUFuQjs7QUFFQSxNQUFJLENBQUNELFVBQUwsRUFBaUI7QUFDYkUsSUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEsZ0VBQWI7QUFDQSxXQUFPLEtBQVA7QUFDSCxHQVIwQixDQVUzQjs7O0FBQ0EsU0FBTyxDQUFDSCxVQUFVLENBQUNJLE9BQW5CO0FBQ0g7O0FBRUQsU0FBU0MsV0FBVCxHQUF1QjtBQUNuQixNQUFJQyxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxnQkFBRCxDQUF0QixDQURtQixDQUN1Qjs7O0FBQzFDLE1BQUlELFFBQVEsQ0FBQ0UsT0FBYixFQUFzQkYsUUFBUSxHQUFHQSxRQUFRLENBQUNFLE9BQXBCLENBRkgsQ0FFZ0M7O0FBQ25ELFNBQU9GLFFBQVA7QUFDSDs7QUFFTSxNQUFNRyw4QkFBTixTQUE2Q0MsMEJBQTdDLENBQStEO0FBQ2xFQyxFQUFBQSxnQkFBZ0IsQ0FBQ0MsS0FBRCxFQUFRQyxNQUFSLEVBQWdCQyxlQUFoQixFQUFpQ0MsaUJBQWpDLEVBQW9EO0FBQ2hFLFFBQUksQ0FBQ1YsV0FBVyxHQUFHVyxVQUFkLEVBQUwsRUFBaUMsT0FBTyxLQUFQOztBQUVqQyxRQUFJRixlQUFlLEtBQUssSUFBcEIsSUFBNEJDLGlCQUFpQixLQUFLLFNBQXRELEVBQWlFO0FBQzdELGFBQU9wQixtQkFBbUIsRUFBMUI7QUFDSDs7QUFFRCxXQUFPbUIsZUFBUDtBQUNIOztBQUVERyxFQUFBQSxRQUFRLENBQUNMLEtBQUQsRUFBUUMsTUFBUixFQUFnQkssUUFBaEIsRUFBMEI7QUFDOUIsUUFBSWIsV0FBVyxHQUFHYyw0QkFBZCxFQUFKLEVBQWtEO0FBQzlDZCxNQUFBQSxXQUFXLEdBQUdlLFVBQWQsQ0FBeUJGLFFBQXpCO0FBQ0g7QUFDSjs7QUFmaUU7Ozs7QUFrQi9ELE1BQU1HLGlDQUFOLFNBQWdEWCwwQkFBaEQsQ0FBa0U7QUFDckVDLEVBQUFBLGdCQUFnQixDQUFDQyxLQUFELEVBQVFDLE1BQVIsRUFBZ0JDLGVBQWhCLEVBQWlDO0FBQzdDLFFBQUksQ0FBQ1QsV0FBVyxHQUFHVyxVQUFkLEVBQUwsRUFBaUMsT0FBTyxLQUFQOztBQUVqQyxRQUFJRixlQUFlLEtBQUssSUFBeEIsRUFBOEI7QUFDMUIsYUFBT25CLG1CQUFtQixFQUExQjtBQUNIOztBQUVELFdBQU9tQixlQUFQO0FBQ0g7O0FBVG9FOzs7O0FBWWxFLE1BQU1RLG1DQUFOLFNBQWtEWiwwQkFBbEQsQ0FBb0U7QUFDdkVDLEVBQUFBLGdCQUFnQixDQUFDQyxLQUFELEVBQVFDLE1BQVIsRUFBZ0JDLGVBQWhCLEVBQWlDO0FBQzdDLFFBQUksQ0FBQ1QsV0FBVyxHQUFHVyxVQUFkLEVBQUwsRUFBaUMsT0FBTyxLQUFQLENBRFksQ0FHN0M7O0FBQ0EsV0FBT0YsZUFBUDtBQUNIOztBQU5zRSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxNyBUcmF2aXMgUmFsc3RvblxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBTZXR0aW5nQ29udHJvbGxlciBmcm9tIFwiLi9TZXR0aW5nQ29udHJvbGxlclwiO1xuaW1wb3J0IHtNYXRyaXhDbGllbnRQZWd9IGZyb20gJy4uLy4uL01hdHJpeENsaWVudFBlZyc7XG5cbi8vIFhYWDogVGhpcyBmZWVscyB3cm9uZy5cbmltcG9ydCB7UHVzaFByb2Nlc3Nvcn0gZnJvbSBcIm1hdHJpeC1qcy1zZGsvc3JjL3B1c2hwcm9jZXNzb3JcIjtcblxuZnVuY3Rpb24gaXNNYXN0ZXJSdWxlRW5hYmxlZCgpIHtcbiAgICAvLyBSZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBtYXN0ZXIgcHVzaCBydWxlIGFzIGEgZGVmYXVsdFxuICAgIGNvbnN0IHByb2Nlc3NvciA9IG5ldyBQdXNoUHJvY2Vzc29yKE1hdHJpeENsaWVudFBlZy5nZXQoKSk7XG4gICAgY29uc3QgbWFzdGVyUnVsZSA9IHByb2Nlc3Nvci5nZXRQdXNoUnVsZUJ5SWQoXCIubS5ydWxlLm1hc3RlclwiKTtcblxuICAgIGlmICghbWFzdGVyUnVsZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJObyBtYXN0ZXIgcHVzaCBydWxlISBOb3RpZmljYXRpb25zIGFyZSBkaXNhYmxlZCBmb3IgdGhpcyB1c2VyLlwiKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFdoeSBlbmFibGVkID09IGZhbHNlIG1lYW5zIFwiZW5hYmxlZFwiIGlzIGJleW9uZCBtZS5cbiAgICByZXR1cm4gIW1hc3RlclJ1bGUuZW5hYmxlZDtcbn1cblxuZnVuY3Rpb24gZ2V0Tm90aWZpZXIoKSB7XG4gICAgbGV0IE5vdGlmaWVyID0gcmVxdWlyZSgnLi4vLi4vTm90aWZpZXInKTsgLy8gYXZvaWRzIGN5Y2xpY2FsIHJlZmVyZW5jZXNcbiAgICBpZiAoTm90aWZpZXIuZGVmYXVsdCkgTm90aWZpZXIgPSBOb3RpZmllci5kZWZhdWx0OyAvLyBjb3JyZWN0IGZvciB3ZWJwYWNrIHJlcXVpcmUoKSB3ZWlyZG5lc3NcbiAgICByZXR1cm4gTm90aWZpZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25zRW5hYmxlZENvbnRyb2xsZXIgZXh0ZW5kcyBTZXR0aW5nQ29udHJvbGxlciB7XG4gICAgZ2V0VmFsdWVPdmVycmlkZShsZXZlbCwgcm9vbUlkLCBjYWxjdWxhdGVkVmFsdWUsIGNhbGN1bGF0ZWRBdExldmVsKSB7XG4gICAgICAgIGlmICghZ2V0Tm90aWZpZXIoKS5pc1Bvc3NpYmxlKCkpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBpZiAoY2FsY3VsYXRlZFZhbHVlID09PSBudWxsIHx8IGNhbGN1bGF0ZWRBdExldmVsID09PSBcImRlZmF1bHRcIikge1xuICAgICAgICAgICAgcmV0dXJuIGlzTWFzdGVyUnVsZUVuYWJsZWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjYWxjdWxhdGVkVmFsdWU7XG4gICAgfVxuXG4gICAgb25DaGFuZ2UobGV2ZWwsIHJvb21JZCwgbmV3VmFsdWUpIHtcbiAgICAgICAgaWYgKGdldE5vdGlmaWVyKCkuc3VwcG9ydHNEZXNrdG9wTm90aWZpY2F0aW9ucygpKSB7XG4gICAgICAgICAgICBnZXROb3RpZmllcigpLnNldEVuYWJsZWQobmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTm90aWZpY2F0aW9uQm9keUVuYWJsZWRDb250cm9sbGVyIGV4dGVuZHMgU2V0dGluZ0NvbnRyb2xsZXIge1xuICAgIGdldFZhbHVlT3ZlcnJpZGUobGV2ZWwsIHJvb21JZCwgY2FsY3VsYXRlZFZhbHVlKSB7XG4gICAgICAgIGlmICghZ2V0Tm90aWZpZXIoKS5pc1Bvc3NpYmxlKCkpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBpZiAoY2FsY3VsYXRlZFZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNNYXN0ZXJSdWxlRW5hYmxlZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNhbGN1bGF0ZWRWYWx1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBdWRpb05vdGlmaWNhdGlvbnNFbmFibGVkQ29udHJvbGxlciBleHRlbmRzIFNldHRpbmdDb250cm9sbGVyIHtcbiAgICBnZXRWYWx1ZU92ZXJyaWRlKGxldmVsLCByb29tSWQsIGNhbGN1bGF0ZWRWYWx1ZSkge1xuICAgICAgICBpZiAoIWdldE5vdGlmaWVyKCkuaXNQb3NzaWJsZSgpKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgLy8gTm90ZTogQXVkaW8gbm90aWZpY2F0aW9ucyBhcmUgKm5vdCogZW5hYmxlZCBieSBkZWZhdWx0LlxuICAgICAgICByZXR1cm4gY2FsY3VsYXRlZFZhbHVlO1xuICAgIH1cbn1cbiJdfQ==