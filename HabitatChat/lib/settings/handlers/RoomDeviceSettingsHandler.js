"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _SettingsHandler = _interopRequireDefault(require("./SettingsHandler"));

var _SettingsStore = require("../SettingsStore");

/*
Copyright 2017 Travis Ralston
Copyright 2019 New Vector Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * Gets and sets settings at the "room-device" level for the current device in a particular
 * room.
 */
class RoomDeviceSettingsHandler extends _SettingsHandler.default {
  constructor(watchManager) {
    super();
    this._watchers = watchManager;
  }

  getValue(settingName, roomId) {
    // Special case blacklist setting to use legacy values
    if (settingName === "blacklistUnverifiedDevices") {
      const value = this._read("mx_local_settings");

      if (value && value['blacklistUnverifiedDevicesPerRoom']) {
        return value['blacklistUnverifiedDevicesPerRoom'][roomId];
      }
    }

    const value = this._read(this._getKey(settingName, roomId));

    if (value) return value.value;
    return null;
  }

  setValue(settingName, roomId, newValue) {
    // Special case blacklist setting for legacy structure
    if (settingName === "blacklistUnverifiedDevices") {
      let value = this._read("mx_local_settings");

      if (!value) value = {};
      if (!value["blacklistUnverifiedDevicesPerRoom"]) value["blacklistUnverifiedDevicesPerRoom"] = {};
      value["blacklistUnverifiedDevicesPerRoom"][roomId] = newValue;
      localStorage.setItem("mx_local_settings", JSON.stringify(value));

      this._watchers.notifyUpdate(settingName, roomId, _SettingsStore.SettingLevel.ROOM_DEVICE, newValue);

      return Promise.resolve();
    }

    if (newValue === null) {
      localStorage.removeItem(this._getKey(settingName, roomId));
    } else {
      newValue = JSON.stringify({
        value: newValue
      });
      localStorage.setItem(this._getKey(settingName, roomId), newValue);
    }

    this._watchers.notifyUpdate(settingName, roomId, _SettingsStore.SettingLevel.ROOM_DEVICE, newValue);

    return Promise.resolve();
  }

  canSetValue(settingName, roomId) {
    return true; // It's their device, so they should be able to
  }

  isSupported() {
    return localStorage !== undefined && localStorage !== null;
  }

  _read(key) {
    const rawValue = localStorage.getItem(key);
    if (!rawValue) return null;
    return JSON.parse(rawValue);
  }

  _getKey(settingName, roomId) {
    return "mx_setting_" + settingName + "_" + roomId;
  }

}

exports.default = RoomDeviceSettingsHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXR0aW5ncy9oYW5kbGVycy9Sb29tRGV2aWNlU2V0dGluZ3NIYW5kbGVyLmpzIl0sIm5hbWVzIjpbIlJvb21EZXZpY2VTZXR0aW5nc0hhbmRsZXIiLCJTZXR0aW5nc0hhbmRsZXIiLCJjb25zdHJ1Y3RvciIsIndhdGNoTWFuYWdlciIsIl93YXRjaGVycyIsImdldFZhbHVlIiwic2V0dGluZ05hbWUiLCJyb29tSWQiLCJ2YWx1ZSIsIl9yZWFkIiwiX2dldEtleSIsInNldFZhbHVlIiwibmV3VmFsdWUiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsIm5vdGlmeVVwZGF0ZSIsIlNldHRpbmdMZXZlbCIsIlJPT01fREVWSUNFIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZW1vdmVJdGVtIiwiY2FuU2V0VmFsdWUiLCJpc1N1cHBvcnRlZCIsInVuZGVmaW5lZCIsImtleSIsInJhd1ZhbHVlIiwiZ2V0SXRlbSIsInBhcnNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFpQkE7O0FBQ0E7O0FBbEJBOzs7Ozs7Ozs7Ozs7Ozs7OztBQW9CQTs7OztBQUllLE1BQU1BLHlCQUFOLFNBQXdDQyx3QkFBeEMsQ0FBd0Q7QUFDbkVDLEVBQUFBLFdBQVcsQ0FBQ0MsWUFBRCxFQUFlO0FBQ3RCO0FBRUEsU0FBS0MsU0FBTCxHQUFpQkQsWUFBakI7QUFDSDs7QUFFREUsRUFBQUEsUUFBUSxDQUFDQyxXQUFELEVBQWNDLE1BQWQsRUFBc0I7QUFDMUI7QUFDQSxRQUFJRCxXQUFXLEtBQUssNEJBQXBCLEVBQWtEO0FBQzlDLFlBQU1FLEtBQUssR0FBRyxLQUFLQyxLQUFMLENBQVcsbUJBQVgsQ0FBZDs7QUFDQSxVQUFJRCxLQUFLLElBQUlBLEtBQUssQ0FBQyxtQ0FBRCxDQUFsQixFQUF5RDtBQUNyRCxlQUFPQSxLQUFLLENBQUMsbUNBQUQsQ0FBTCxDQUEyQ0QsTUFBM0MsQ0FBUDtBQUNIO0FBQ0o7O0FBRUQsVUFBTUMsS0FBSyxHQUFHLEtBQUtDLEtBQUwsQ0FBVyxLQUFLQyxPQUFMLENBQWFKLFdBQWIsRUFBMEJDLE1BQTFCLENBQVgsQ0FBZDs7QUFDQSxRQUFJQyxLQUFKLEVBQVcsT0FBT0EsS0FBSyxDQUFDQSxLQUFiO0FBQ1gsV0FBTyxJQUFQO0FBQ0g7O0FBRURHLEVBQUFBLFFBQVEsQ0FBQ0wsV0FBRCxFQUFjQyxNQUFkLEVBQXNCSyxRQUF0QixFQUFnQztBQUNwQztBQUNBLFFBQUlOLFdBQVcsS0FBSyw0QkFBcEIsRUFBa0Q7QUFDOUMsVUFBSUUsS0FBSyxHQUFHLEtBQUtDLEtBQUwsQ0FBVyxtQkFBWCxDQUFaOztBQUNBLFVBQUksQ0FBQ0QsS0FBTCxFQUFZQSxLQUFLLEdBQUcsRUFBUjtBQUNaLFVBQUksQ0FBQ0EsS0FBSyxDQUFDLG1DQUFELENBQVYsRUFBaURBLEtBQUssQ0FBQyxtQ0FBRCxDQUFMLEdBQTZDLEVBQTdDO0FBQ2pEQSxNQUFBQSxLQUFLLENBQUMsbUNBQUQsQ0FBTCxDQUEyQ0QsTUFBM0MsSUFBcURLLFFBQXJEO0FBQ0FDLE1BQUFBLFlBQVksQ0FBQ0MsT0FBYixDQUFxQixtQkFBckIsRUFBMENDLElBQUksQ0FBQ0MsU0FBTCxDQUFlUixLQUFmLENBQTFDOztBQUNBLFdBQUtKLFNBQUwsQ0FBZWEsWUFBZixDQUE0QlgsV0FBNUIsRUFBeUNDLE1BQXpDLEVBQWlEVyw0QkFBYUMsV0FBOUQsRUFBMkVQLFFBQTNFOztBQUNBLGFBQU9RLE9BQU8sQ0FBQ0MsT0FBUixFQUFQO0FBQ0g7O0FBRUQsUUFBSVQsUUFBUSxLQUFLLElBQWpCLEVBQXVCO0FBQ25CQyxNQUFBQSxZQUFZLENBQUNTLFVBQWIsQ0FBd0IsS0FBS1osT0FBTCxDQUFhSixXQUFiLEVBQTBCQyxNQUExQixDQUF4QjtBQUNILEtBRkQsTUFFTztBQUNISyxNQUFBQSxRQUFRLEdBQUdHLElBQUksQ0FBQ0MsU0FBTCxDQUFlO0FBQUNSLFFBQUFBLEtBQUssRUFBRUk7QUFBUixPQUFmLENBQVg7QUFDQUMsTUFBQUEsWUFBWSxDQUFDQyxPQUFiLENBQXFCLEtBQUtKLE9BQUwsQ0FBYUosV0FBYixFQUEwQkMsTUFBMUIsQ0FBckIsRUFBd0RLLFFBQXhEO0FBQ0g7O0FBRUQsU0FBS1IsU0FBTCxDQUFlYSxZQUFmLENBQTRCWCxXQUE1QixFQUF5Q0MsTUFBekMsRUFBaURXLDRCQUFhQyxXQUE5RCxFQUEyRVAsUUFBM0U7O0FBQ0EsV0FBT1EsT0FBTyxDQUFDQyxPQUFSLEVBQVA7QUFDSDs7QUFFREUsRUFBQUEsV0FBVyxDQUFDakIsV0FBRCxFQUFjQyxNQUFkLEVBQXNCO0FBQzdCLFdBQU8sSUFBUCxDQUQ2QixDQUNoQjtBQUNoQjs7QUFFRGlCLEVBQUFBLFdBQVcsR0FBRztBQUNWLFdBQU9YLFlBQVksS0FBS1ksU0FBakIsSUFBOEJaLFlBQVksS0FBSyxJQUF0RDtBQUNIOztBQUVESixFQUFBQSxLQUFLLENBQUNpQixHQUFELEVBQU07QUFDUCxVQUFNQyxRQUFRLEdBQUdkLFlBQVksQ0FBQ2UsT0FBYixDQUFxQkYsR0FBckIsQ0FBakI7QUFDQSxRQUFJLENBQUNDLFFBQUwsRUFBZSxPQUFPLElBQVA7QUFDZixXQUFPWixJQUFJLENBQUNjLEtBQUwsQ0FBV0YsUUFBWCxDQUFQO0FBQ0g7O0FBRURqQixFQUFBQSxPQUFPLENBQUNKLFdBQUQsRUFBY0MsTUFBZCxFQUFzQjtBQUN6QixXQUFPLGdCQUFnQkQsV0FBaEIsR0FBOEIsR0FBOUIsR0FBb0NDLE1BQTNDO0FBQ0g7O0FBNURrRSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxNyBUcmF2aXMgUmFsc3RvblxuQ29weXJpZ2h0IDIwMTkgTmV3IFZlY3RvciBMdGQuXG5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5Zb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG5kaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5XSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbmxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IFNldHRpbmdzSGFuZGxlciBmcm9tIFwiLi9TZXR0aW5nc0hhbmRsZXJcIjtcbmltcG9ydCB7U2V0dGluZ0xldmVsfSBmcm9tIFwiLi4vU2V0dGluZ3NTdG9yZVwiO1xuXG4vKipcbiAqIEdldHMgYW5kIHNldHMgc2V0dGluZ3MgYXQgdGhlIFwicm9vbS1kZXZpY2VcIiBsZXZlbCBmb3IgdGhlIGN1cnJlbnQgZGV2aWNlIGluIGEgcGFydGljdWxhclxuICogcm9vbS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm9vbURldmljZVNldHRpbmdzSGFuZGxlciBleHRlbmRzIFNldHRpbmdzSGFuZGxlciB7XG4gICAgY29uc3RydWN0b3Iod2F0Y2hNYW5hZ2VyKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5fd2F0Y2hlcnMgPSB3YXRjaE1hbmFnZXI7XG4gICAgfVxuXG4gICAgZ2V0VmFsdWUoc2V0dGluZ05hbWUsIHJvb21JZCkge1xuICAgICAgICAvLyBTcGVjaWFsIGNhc2UgYmxhY2tsaXN0IHNldHRpbmcgdG8gdXNlIGxlZ2FjeSB2YWx1ZXNcbiAgICAgICAgaWYgKHNldHRpbmdOYW1lID09PSBcImJsYWNrbGlzdFVudmVyaWZpZWREZXZpY2VzXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fcmVhZChcIm14X2xvY2FsX3NldHRpbmdzXCIpO1xuICAgICAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlWydibGFja2xpc3RVbnZlcmlmaWVkRGV2aWNlc1BlclJvb20nXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZVsnYmxhY2tsaXN0VW52ZXJpZmllZERldmljZXNQZXJSb29tJ11bcm9vbUlkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fcmVhZCh0aGlzLl9nZXRLZXkoc2V0dGluZ05hbWUsIHJvb21JZCkpO1xuICAgICAgICBpZiAodmFsdWUpIHJldHVybiB2YWx1ZS52YWx1ZTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgc2V0VmFsdWUoc2V0dGluZ05hbWUsIHJvb21JZCwgbmV3VmFsdWUpIHtcbiAgICAgICAgLy8gU3BlY2lhbCBjYXNlIGJsYWNrbGlzdCBzZXR0aW5nIGZvciBsZWdhY3kgc3RydWN0dXJlXG4gICAgICAgIGlmIChzZXR0aW5nTmFtZSA9PT0gXCJibGFja2xpc3RVbnZlcmlmaWVkRGV2aWNlc1wiKSB7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLl9yZWFkKFwibXhfbG9jYWxfc2V0dGluZ3NcIik7XG4gICAgICAgICAgICBpZiAoIXZhbHVlKSB2YWx1ZSA9IHt9O1xuICAgICAgICAgICAgaWYgKCF2YWx1ZVtcImJsYWNrbGlzdFVudmVyaWZpZWREZXZpY2VzUGVyUm9vbVwiXSkgdmFsdWVbXCJibGFja2xpc3RVbnZlcmlmaWVkRGV2aWNlc1BlclJvb21cIl0gPSB7fTtcbiAgICAgICAgICAgIHZhbHVlW1wiYmxhY2tsaXN0VW52ZXJpZmllZERldmljZXNQZXJSb29tXCJdW3Jvb21JZF0gPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwibXhfbG9jYWxfc2V0dGluZ3NcIiwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgICAgICAgICAgIHRoaXMuX3dhdGNoZXJzLm5vdGlmeVVwZGF0ZShzZXR0aW5nTmFtZSwgcm9vbUlkLCBTZXR0aW5nTGV2ZWwuUk9PTV9ERVZJQ0UsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5fZ2V0S2V5KHNldHRpbmdOYW1lLCByb29tSWQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gSlNPTi5zdHJpbmdpZnkoe3ZhbHVlOiBuZXdWYWx1ZX0pO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5fZ2V0S2V5KHNldHRpbmdOYW1lLCByb29tSWQpLCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl93YXRjaGVycy5ub3RpZnlVcGRhdGUoc2V0dGluZ05hbWUsIHJvb21JZCwgU2V0dGluZ0xldmVsLlJPT01fREVWSUNFLCBuZXdWYWx1ZSk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBjYW5TZXRWYWx1ZShzZXR0aW5nTmFtZSwgcm9vbUlkKSB7XG4gICAgICAgIHJldHVybiB0cnVlOyAvLyBJdCdzIHRoZWlyIGRldmljZSwgc28gdGhleSBzaG91bGQgYmUgYWJsZSB0b1xuICAgIH1cblxuICAgIGlzU3VwcG9ydGVkKCkge1xuICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlICE9PSB1bmRlZmluZWQgJiYgbG9jYWxTdG9yYWdlICE9PSBudWxsO1xuICAgIH1cblxuICAgIF9yZWFkKGtleSkge1xuICAgICAgICBjb25zdCByYXdWYWx1ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICAgIGlmICghcmF3VmFsdWUpIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShyYXdWYWx1ZSk7XG4gICAgfVxuXG4gICAgX2dldEtleShzZXR0aW5nTmFtZSwgcm9vbUlkKSB7XG4gICAgICAgIHJldHVybiBcIm14X3NldHRpbmdfXCIgKyBzZXR0aW5nTmFtZSArIFwiX1wiICsgcm9vbUlkO1xuICAgIH1cbn1cbiJdfQ==