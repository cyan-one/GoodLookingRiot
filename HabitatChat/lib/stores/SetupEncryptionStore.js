"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SetupEncryptionStore = exports.PHASE_FINISHED = exports.PHASE_CONFIRM_SKIP = exports.PHASE_DONE = exports.PHASE_BUSY = exports.PHASE_INTRO = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _events = _interopRequireDefault(require("events"));

var _MatrixClientPeg = require("../MatrixClientPeg");

var _CrossSigningManager = require("../CrossSigningManager");

var _VerificationRequest = require("matrix-js-sdk/src/crypto/verification/request/VerificationRequest");

/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const PHASE_INTRO = 0;
exports.PHASE_INTRO = PHASE_INTRO;
const PHASE_BUSY = 1;
exports.PHASE_BUSY = PHASE_BUSY;
const PHASE_DONE = 2; //final done stage, but still showing UX

exports.PHASE_DONE = PHASE_DONE;
const PHASE_CONFIRM_SKIP = 3;
exports.PHASE_CONFIRM_SKIP = PHASE_CONFIRM_SKIP;
const PHASE_FINISHED = 4; //UX can be closed

exports.PHASE_FINISHED = PHASE_FINISHED;

class SetupEncryptionStore extends _events.default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "_onUserTrustStatusChanged", async userId => {
      if (userId !== _MatrixClientPeg.MatrixClientPeg.get().getUserId()) return;
      const crossSigningReady = await _MatrixClientPeg.MatrixClientPeg.get().isCrossSigningReady();

      if (crossSigningReady) {
        this.phase = PHASE_DONE;
        this.emit("update");
      }
    });
    (0, _defineProperty2.default)(this, "onVerificationRequest", async request => {
      if (request.otherUserId !== _MatrixClientPeg.MatrixClientPeg.get().getUserId()) return;

      if (this.verificationRequest) {
        this.verificationRequest.off("change", this.onVerificationRequestChange);
      }

      this.verificationRequest = request;
      await request.accept();
      request.on("change", this.onVerificationRequestChange);
      this.emit("update");
    });
    (0, _defineProperty2.default)(this, "onVerificationRequestChange", async () => {
      if (this.verificationRequest.cancelled) {
        this.verificationRequest.off("change", this.onVerificationRequestChange);
        this.verificationRequest = null;
        this.emit("update");
      } else if (this.verificationRequest.phase === _VerificationRequest.PHASE_DONE) {
        this.verificationRequest.off("change", this.onVerificationRequestChange);
        this.verificationRequest = null; // At this point, the verification has finished, we just need to wait for
        // cross signing to be ready to use, so wait for the user trust status to
        // change (or change to DONE if it's already ready).

        const crossSigningReady = await _MatrixClientPeg.MatrixClientPeg.get().isCrossSigningReady();
        this.phase = crossSigningReady ? PHASE_DONE : PHASE_BUSY;
        this.emit("update");
      }
    });
  }

  static sharedInstance() {
    if (!global.mx_SetupEncryptionStore) global.mx_SetupEncryptionStore = new SetupEncryptionStore();
    return global.mx_SetupEncryptionStore;
  }

  start() {
    if (this._started) {
      return;
    }

    this._started = true;
    this.phase = PHASE_INTRO;
    this.verificationRequest = null;
    this.backupInfo = null;

    _MatrixClientPeg.MatrixClientPeg.get().on("crypto.verification.request", this.onVerificationRequest);

    _MatrixClientPeg.MatrixClientPeg.get().on('userTrustStatusChanged', this._onUserTrustStatusChanged);
  }

  stop() {
    if (!this._started) {
      return;
    }

    this._started = false;

    if (this.verificationRequest) {
      this.verificationRequest.off("change", this.onVerificationRequestChange);
    }

    if (_MatrixClientPeg.MatrixClientPeg.get()) {
      _MatrixClientPeg.MatrixClientPeg.get().removeListener("crypto.verification.request", this.onVerificationRequest);

      _MatrixClientPeg.MatrixClientPeg.get().removeListener('userTrustStatusChanged', this._onUserTrustStatusChanged);
    }
  }

  async usePassPhrase() {
    this.phase = PHASE_BUSY;
    this.emit("update");

    const cli = _MatrixClientPeg.MatrixClientPeg.get();

    try {
      const backupInfo = await cli.getKeyBackupVersion();
      this.backupInfo = backupInfo;
      this.emit("update"); // The control flow is fairly twisted here...
      // For the purposes of completing security, we only wait on getting
      // as far as the trust check and then show a green shield.
      // We also begin the key backup restore as well, which we're
      // awaiting inside `accessSecretStorage` only so that it keeps your
      // passphase cached for that work. This dialog itself will only wait
      // on the first trust check, and the key backup restore will happen
      // in the background.

      await new Promise((resolve, reject) => {
        try {
          (0, _CrossSigningManager.accessSecretStorage)(async () => {
            await cli.checkOwnCrossSigningTrust();
            resolve();

            if (backupInfo) {
              // A complete restore can take many minutes for large
              // accounts / slow servers, so we allow the dialog
              // to advance before this.
              await cli.restoreKeyBackupWithSecretStorage(backupInfo);
            }
          }).catch(reject);
        } catch (e) {
          console.error(e);
          reject(e);
        }
      });

      if (cli.getCrossSigningId()) {
        this.phase = PHASE_DONE;
        this.emit("update");
      }
    } catch (e) {
      if (!(e instanceof _CrossSigningManager.AccessCancelledError)) {
        console.log(e);
      } // this will throw if the user hits cancel, so ignore


      this.phase = PHASE_INTRO;
      this.emit("update");
    }
  }

  skip() {
    this.phase = PHASE_CONFIRM_SKIP;
    this.emit("update");
  }

  skipConfirm() {
    this.phase = PHASE_FINISHED;
    this.emit("update");
  }

  returnAfterSkip() {
    this.phase = PHASE_INTRO;
    this.emit("update");
  }

  done() {
    this.phase = PHASE_FINISHED;
    this.emit("update"); // async - ask other clients for keys, if necessary

    _MatrixClientPeg.MatrixClientPeg.get()._crypto.cancelAndResendAllOutgoingKeyRequests();
  }

}

exports.SetupEncryptionStore = SetupEncryptionStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,