"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _events = _interopRequireDefault(require("events"));

var _MatrixClientPeg = require("../MatrixClientPeg");

/*
Copyright 2018 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * Stores information about the widgets active in the app right now:
 *  * What widget is set to remain always-on-screen, if any
 *    Only one widget may be 'always on screen' at any one time.
 *  * Negotiated capabilities for active apps
 */
class ActiveWidgetStore extends _events.default {
  constructor() {
    super();
    this._persistentWidgetId = null; // A list of negotiated capabilities for each widget, by ID
    // {
    //     widgetId: [caps...],
    // }

    this._capsByWidgetId = {}; // A WidgetMessaging instance for each widget ID

    this._widgetMessagingByWidgetId = {}; // What room ID each widget is associated with (if it's a room widget)

    this._roomIdByWidgetId = {};
    this.onRoomStateEvents = this.onRoomStateEvents.bind(this);
    this.dispatcherRef = null;
  }

  start() {
    _MatrixClientPeg.MatrixClientPeg.get().on('RoomState.events', this.onRoomStateEvents);
  }

  stop() {
    if (_MatrixClientPeg.MatrixClientPeg.get()) {
      _MatrixClientPeg.MatrixClientPeg.get().removeListener('RoomState.events', this.onRoomStateEvents);
    }

    this._capsByWidgetId = {};
    this._widgetMessagingByWidgetId = {};
    this._roomIdByWidgetId = {};
  }

  onRoomStateEvents(ev, state) {
    // XXX: This listens for state events in order to remove the active widget.
    // Everything else relies on views listening for events and calling setters
    // on this class which is terrible. This store should just listen for events
    // and keep itself up to date.
    // TODO: Enable support for m.widget event type (https://github.com/vector-im/riot-web/issues/13111)
    if (ev.getType() !== 'im.vector.modular.widgets') return;

    if (ev.getStateKey() === this._persistentWidgetId) {
      this.destroyPersistentWidget(this._persistentWidgetId);
    }
  }

  destroyPersistentWidget(id) {
    if (id !== this._persistentWidgetId) return;
    const toDeleteId = this._persistentWidgetId;
    this.setWidgetPersistence(toDeleteId, false);
    this.delWidgetMessaging(toDeleteId);
    this.delWidgetCapabilities(toDeleteId);
    this.delRoomId(toDeleteId);
  }

  setWidgetPersistence(widgetId, val) {
    if (this._persistentWidgetId === widgetId && !val) {
      this._persistentWidgetId = null;
    } else if (this._persistentWidgetId !== widgetId && val) {
      this._persistentWidgetId = widgetId;
    }

    this.emit('update');
  }

  getWidgetPersistence(widgetId) {
    return this._persistentWidgetId === widgetId;
  }

  getPersistentWidgetId() {
    return this._persistentWidgetId;
  }

  setWidgetCapabilities(widgetId, caps) {
    this._capsByWidgetId[widgetId] = caps;
    this.emit('update');
  }

  widgetHasCapability(widgetId, cap) {
    return this._capsByWidgetId[widgetId] && this._capsByWidgetId[widgetId].includes(cap);
  }

  delWidgetCapabilities(widgetId) {
    delete this._capsByWidgetId[widgetId];
    this.emit('update');
  }

  setWidgetMessaging(widgetId, wm) {
    // Stop any existing widget messaging first
    this.delWidgetMessaging(widgetId);
    this._widgetMessagingByWidgetId[widgetId] = wm;
    this.emit('update');
  }

  getWidgetMessaging(widgetId) {
    return this._widgetMessagingByWidgetId[widgetId];
  }

  delWidgetMessaging(widgetId) {
    if (this._widgetMessagingByWidgetId[widgetId]) {
      try {
        this._widgetMessagingByWidgetId[widgetId].stop();
      } catch (e) {
        console.error('Failed to stop listening for widgetMessaging events', e.message);
      }

      delete this._widgetMessagingByWidgetId[widgetId];
      this.emit('update');
    }
  }

  getRoomId(widgetId) {
    return this._roomIdByWidgetId[widgetId];
  }

  setRoomId(widgetId, roomId) {
    this._roomIdByWidgetId[widgetId] = roomId;
    this.emit('update');
  }

  delRoomId(widgetId) {
    delete this._roomIdByWidgetId[widgetId];
    this.emit('update');
  }

}

if (global.singletonActiveWidgetStore === undefined) {
  global.singletonActiveWidgetStore = new ActiveWidgetStore();
}

var _default = global.singletonActiveWidgetStore;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdG9yZXMvQWN0aXZlV2lkZ2V0U3RvcmUuanMiXSwibmFtZXMiOlsiQWN0aXZlV2lkZ2V0U3RvcmUiLCJFdmVudEVtaXR0ZXIiLCJjb25zdHJ1Y3RvciIsIl9wZXJzaXN0ZW50V2lkZ2V0SWQiLCJfY2Fwc0J5V2lkZ2V0SWQiLCJfd2lkZ2V0TWVzc2FnaW5nQnlXaWRnZXRJZCIsIl9yb29tSWRCeVdpZGdldElkIiwib25Sb29tU3RhdGVFdmVudHMiLCJiaW5kIiwiZGlzcGF0Y2hlclJlZiIsInN0YXJ0IiwiTWF0cml4Q2xpZW50UGVnIiwiZ2V0Iiwib24iLCJzdG9wIiwicmVtb3ZlTGlzdGVuZXIiLCJldiIsInN0YXRlIiwiZ2V0VHlwZSIsImdldFN0YXRlS2V5IiwiZGVzdHJveVBlcnNpc3RlbnRXaWRnZXQiLCJpZCIsInRvRGVsZXRlSWQiLCJzZXRXaWRnZXRQZXJzaXN0ZW5jZSIsImRlbFdpZGdldE1lc3NhZ2luZyIsImRlbFdpZGdldENhcGFiaWxpdGllcyIsImRlbFJvb21JZCIsIndpZGdldElkIiwidmFsIiwiZW1pdCIsImdldFdpZGdldFBlcnNpc3RlbmNlIiwiZ2V0UGVyc2lzdGVudFdpZGdldElkIiwic2V0V2lkZ2V0Q2FwYWJpbGl0aWVzIiwiY2FwcyIsIndpZGdldEhhc0NhcGFiaWxpdHkiLCJjYXAiLCJpbmNsdWRlcyIsInNldFdpZGdldE1lc3NhZ2luZyIsIndtIiwiZ2V0V2lkZ2V0TWVzc2FnaW5nIiwiZSIsImNvbnNvbGUiLCJlcnJvciIsIm1lc3NhZ2UiLCJnZXRSb29tSWQiLCJzZXRSb29tSWQiLCJyb29tSWQiLCJnbG9iYWwiLCJzaW5nbGV0b25BY3RpdmVXaWRnZXRTdG9yZSIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBZ0JBOztBQUVBOztBQWxCQTs7Ozs7Ozs7Ozs7Ozs7OztBQW9CQTs7Ozs7O0FBTUEsTUFBTUEsaUJBQU4sU0FBZ0NDLGVBQWhDLENBQTZDO0FBQ3pDQyxFQUFBQSxXQUFX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QUF2QixDQUFQO0FBQ0EsU0FBS0UsSUFBTCxDQUFVLFFBQVY7QUFDSDs7QUE1SHdDOztBQStIN0MsSUFBSWtCLE1BQU0sQ0FBQ0MsMEJBQVAsS0FBc0NDLFNBQTFDLEVBQXFEO0FBQ2pERixFQUFBQSxNQUFNLENBQUNDLDBCQUFQLEdBQW9DLElBQUloRCxpQkFBSixFQUFwQztBQUNIOztlQUNjK0MsTUFBTSxDQUFDQywwQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxOCBOZXcgVmVjdG9yIEx0ZFxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRzJztcblxuaW1wb3J0IHtNYXRyaXhDbGllbnRQZWd9IGZyb20gJy4uL01hdHJpeENsaWVudFBlZyc7XG5cbi8qKlxuICogU3RvcmVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSB3aWRnZXRzIGFjdGl2ZSBpbiB0aGUgYXBwIHJpZ2h0IG5vdzpcbiAqICAqIFdoYXQgd2lkZ2V0IGlzIHNldCB0byByZW1haW4gYWx3YXlzLW9uLXNjcmVlbiwgaWYgYW55XG4gKiAgICBPbmx5IG9uZSB3aWRnZXQgbWF5IGJlICdhbHdheXMgb24gc2NyZWVuJyBhdCBhbnkgb25lIHRpbWUuXG4gKiAgKiBOZWdvdGlhdGVkIGNhcGFiaWxpdGllcyBmb3IgYWN0aXZlIGFwcHNcbiAqL1xuY2xhc3MgQWN0aXZlV2lkZ2V0U3RvcmUgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9wZXJzaXN0ZW50V2lkZ2V0SWQgPSBudWxsO1xuXG4gICAgICAgIC8vIEEgbGlzdCBvZiBuZWdvdGlhdGVkIGNhcGFiaWxpdGllcyBmb3IgZWFjaCB3aWRnZXQsIGJ5IElEXG4gICAgICAgIC8vIHtcbiAgICAgICAgLy8gICAgIHdpZGdldElkOiBbY2Fwcy4uLl0sXG4gICAgICAgIC8vIH1cbiAgICAgICAgdGhpcy5fY2Fwc0J5V2lkZ2V0SWQgPSB7fTtcblxuICAgICAgICAvLyBBIFdpZGdldE1lc3NhZ2luZyBpbnN0YW5jZSBmb3IgZWFjaCB3aWRnZXQgSURcbiAgICAgICAgdGhpcy5fd2lkZ2V0TWVzc2FnaW5nQnlXaWRnZXRJZCA9IHt9O1xuXG4gICAgICAgIC8vIFdoYXQgcm9vbSBJRCBlYWNoIHdpZGdldCBpcyBhc3NvY2lhdGVkIHdpdGggKGlmIGl0J3MgYSByb29tIHdpZGdldClcbiAgICAgICAgdGhpcy5fcm9vbUlkQnlXaWRnZXRJZCA9IHt9O1xuXG4gICAgICAgIHRoaXMub25Sb29tU3RhdGVFdmVudHMgPSB0aGlzLm9uUm9vbVN0YXRlRXZlbnRzLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyUmVmID0gbnVsbDtcbiAgICB9XG5cbiAgICBzdGFydCgpIHtcbiAgICAgICAgTWF0cml4Q2xpZW50UGVnLmdldCgpLm9uKCdSb29tU3RhdGUuZXZlbnRzJywgdGhpcy5vblJvb21TdGF0ZUV2ZW50cyk7XG4gICAgfVxuXG4gICAgc3RvcCgpIHtcbiAgICAgICAgaWYgKE1hdHJpeENsaWVudFBlZy5nZXQoKSkge1xuICAgICAgICAgICAgTWF0cml4Q2xpZW50UGVnLmdldCgpLnJlbW92ZUxpc3RlbmVyKCdSb29tU3RhdGUuZXZlbnRzJywgdGhpcy5vblJvb21TdGF0ZUV2ZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2Fwc0J5V2lkZ2V0SWQgPSB7fTtcbiAgICAgICAgdGhpcy5fd2lkZ2V0TWVzc2FnaW5nQnlXaWRnZXRJZCA9IHt9O1xuICAgICAgICB0aGlzLl9yb29tSWRCeVdpZGdldElkID0ge307XG4gICAgfVxuXG4gICAgb25Sb29tU3RhdGVFdmVudHMoZXYsIHN0YXRlKSB7XG4gICAgICAgIC8vIFhYWDogVGhpcyBsaXN0ZW5zIGZvciBzdGF0ZSBldmVudHMgaW4gb3JkZXIgdG8gcmVtb3ZlIHRoZSBhY3RpdmUgd2lkZ2V0LlxuICAgICAgICAvLyBFdmVyeXRoaW5nIGVsc2UgcmVsaWVzIG9uIHZpZXdzIGxpc3RlbmluZyBmb3IgZXZlbnRzIGFuZCBjYWxsaW5nIHNldHRlcnNcbiAgICAgICAgLy8gb24gdGhpcyBjbGFzcyB3aGljaCBpcyB0ZXJyaWJsZS4gVGhpcyBzdG9yZSBzaG91bGQganVzdCBsaXN0ZW4gZm9yIGV2ZW50c1xuICAgICAgICAvLyBhbmQga2VlcCBpdHNlbGYgdXAgdG8gZGF0ZS5cbiAgICAgICAgLy8gVE9ETzogRW5hYmxlIHN1cHBvcnQgZm9yIG0ud2lkZ2V0IGV2ZW50IHR5cGUgKGh0dHBzOi8vZ2l0aHViLmNvbS92ZWN0b3ItaW0vcmlvdC13ZWIvaXNzdWVzLzEzMTExKVxuICAgICAgICBpZiAoZXYuZ2V0VHlwZSgpICE9PSAnaW0udmVjdG9yLm1vZHVsYXIud2lkZ2V0cycpIHJldHVybjtcblxuICAgICAgICBpZiAoZXYuZ2V0U3RhdGVLZXkoKSA9PT0gdGhpcy5fcGVyc2lzdGVudFdpZGdldElkKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3lQZXJzaXN0ZW50V2lkZ2V0KHRoaXMuX3BlcnNpc3RlbnRXaWRnZXRJZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95UGVyc2lzdGVudFdpZGdldChpZCkge1xuICAgICAgICBpZiAoaWQgIT09IHRoaXMuX3BlcnNpc3RlbnRXaWRnZXRJZCkgcmV0dXJuO1xuICAgICAgICBjb25zdCB0b0RlbGV0ZUlkID0gdGhpcy5fcGVyc2lzdGVudFdpZGdldElkO1xuXG4gICAgICAgIHRoaXMuc2V0V2lkZ2V0UGVyc2lzdGVuY2UodG9EZWxldGVJZCwgZmFsc2UpO1xuICAgICAgICB0aGlzLmRlbFdpZGdldE1lc3NhZ2luZyh0b0RlbGV0ZUlkKTtcbiAgICAgICAgdGhpcy5kZWxXaWRnZXRDYXBhYmlsaXRpZXModG9EZWxldGVJZCk7XG4gICAgICAgIHRoaXMuZGVsUm9vbUlkKHRvRGVsZXRlSWQpO1xuICAgIH1cblxuICAgIHNldFdpZGdldFBlcnNpc3RlbmNlKHdpZGdldElkLCB2YWwpIHtcbiAgICAgICAgaWYgKHRoaXMuX3BlcnNpc3RlbnRXaWRnZXRJZCA9PT0gd2lkZ2V0SWQgJiYgIXZhbCkge1xuICAgICAgICAgICAgdGhpcy5fcGVyc2lzdGVudFdpZGdldElkID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9wZXJzaXN0ZW50V2lkZ2V0SWQgIT09IHdpZGdldElkICYmIHZhbCkge1xuICAgICAgICAgICAgdGhpcy5fcGVyc2lzdGVudFdpZGdldElkID0gd2lkZ2V0SWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbWl0KCd1cGRhdGUnKTtcbiAgICB9XG5cbiAgICBnZXRXaWRnZXRQZXJzaXN0ZW5jZSh3aWRnZXRJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGVyc2lzdGVudFdpZGdldElkID09PSB3aWRnZXRJZDtcbiAgICB9XG5cbiAgICBnZXRQZXJzaXN0ZW50V2lkZ2V0SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wZXJzaXN0ZW50V2lkZ2V0SWQ7XG4gICAgfVxuXG4gICAgc2V0V2lkZ2V0Q2FwYWJpbGl0aWVzKHdpZGdldElkLCBjYXBzKSB7XG4gICAgICAgIHRoaXMuX2NhcHNCeVdpZGdldElkW3dpZGdldElkXSA9IGNhcHM7XG4gICAgICAgIHRoaXMuZW1pdCgndXBkYXRlJyk7XG4gICAgfVxuXG4gICAgd2lkZ2V0SGFzQ2FwYWJpbGl0eSh3aWRnZXRJZCwgY2FwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYXBzQnlXaWRnZXRJZFt3aWRnZXRJZF0gJiYgdGhpcy5fY2Fwc0J5V2lkZ2V0SWRbd2lkZ2V0SWRdLmluY2x1ZGVzKGNhcCk7XG4gICAgfVxuXG4gICAgZGVsV2lkZ2V0Q2FwYWJpbGl0aWVzKHdpZGdldElkKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9jYXBzQnlXaWRnZXRJZFt3aWRnZXRJZF07XG4gICAgICAgIHRoaXMuZW1pdCgndXBkYXRlJyk7XG4gICAgfVxuXG4gICAgc2V0V2lkZ2V0TWVzc2FnaW5nKHdpZGdldElkLCB3bSkge1xuICAgICAgICAvLyBTdG9wIGFueSBleGlzdGluZyB3aWRnZXQgbWVzc2FnaW5nIGZpcnN0XG4gICAgICAgIHRoaXMuZGVsV2lkZ2V0TWVzc2FnaW5nKHdpZGdldElkKTtcbiAgICAgICAgdGhpcy5fd2lkZ2V0TWVzc2FnaW5nQnlXaWRnZXRJZFt3aWRnZXRJZF0gPSB3bTtcbiAgICAgICAgdGhpcy5lbWl0KCd1cGRhdGUnKTtcbiAgICB9XG5cbiAgICBnZXRXaWRnZXRNZXNzYWdpbmcod2lkZ2V0SWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpZGdldE1lc3NhZ2luZ0J5V2lkZ2V0SWRbd2lkZ2V0SWRdO1xuICAgIH1cblxuICAgIGRlbFdpZGdldE1lc3NhZ2luZyh3aWRnZXRJZCkge1xuICAgICAgICBpZiAodGhpcy5fd2lkZ2V0TWVzc2FnaW5nQnlXaWRnZXRJZFt3aWRnZXRJZF0pIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2lkZ2V0TWVzc2FnaW5nQnlXaWRnZXRJZFt3aWRnZXRJZF0uc3RvcCgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzdG9wIGxpc3RlbmluZyBmb3Igd2lkZ2V0TWVzc2FnaW5nIGV2ZW50cycsIGUubWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fd2lkZ2V0TWVzc2FnaW5nQnlXaWRnZXRJZFt3aWRnZXRJZF07XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3VwZGF0ZScpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0Um9vbUlkKHdpZGdldElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yb29tSWRCeVdpZGdldElkW3dpZGdldElkXTtcbiAgICB9XG5cbiAgICBzZXRSb29tSWQod2lkZ2V0SWQsIHJvb21JZCkge1xuICAgICAgICB0aGlzLl9yb29tSWRCeVdpZGdldElkW3dpZGdldElkXSA9IHJvb21JZDtcbiAgICAgICAgdGhpcy5lbWl0KCd1cGRhdGUnKTtcbiAgICB9XG5cbiAgICBkZWxSb29tSWQod2lkZ2V0SWQpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX3Jvb21JZEJ5V2lkZ2V0SWRbd2lkZ2V0SWRdO1xuICAgICAgICB0aGlzLmVtaXQoJ3VwZGF0ZScpO1xuICAgIH1cbn1cblxuaWYgKGdsb2JhbC5zaW5nbGV0b25BY3RpdmVXaWRnZXRTdG9yZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZ2xvYmFsLnNpbmdsZXRvbkFjdGl2ZVdpZGdldFN0b3JlID0gbmV3IEFjdGl2ZVdpZGdldFN0b3JlKCk7XG59XG5leHBvcnQgZGVmYXVsdCBnbG9iYWwuc2luZ2xldG9uQWN0aXZlV2lkZ2V0U3RvcmU7XG4iXX0=