"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.groupMemberFromApiObject = groupMemberFromApiObject;
exports.groupRoomFromApiObject = groupRoomFromApiObject;
exports.GroupRoomType = exports.GroupMemberType = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _languageHandler = require("./languageHandler.js");

/*
Copyright 2017 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const GroupMemberType = _propTypes.default.shape({
  userId: _propTypes.default.string.isRequired,
  displayname: _propTypes.default.string,
  avatarUrl: _propTypes.default.string
});

exports.GroupMemberType = GroupMemberType;

const GroupRoomType = _propTypes.default.shape({
  displayname: _propTypes.default.string,
  name: _propTypes.default.string,
  roomId: _propTypes.default.string.isRequired,
  canonicalAlias: _propTypes.default.string,
  avatarUrl: _propTypes.default.string
});

exports.GroupRoomType = GroupRoomType;

function groupMemberFromApiObject(apiObject) {
  return {
    userId: apiObject.user_id,
    displayname: apiObject.displayname,
    avatarUrl: apiObject.avatar_url,
    isPrivileged: apiObject.is_privileged
  };
}

function groupRoomFromApiObject(apiObject) {
  return {
    displayname: apiObject.name || apiObject.canonical_alias || (0, _languageHandler._t)("Unnamed Room"),
    name: apiObject.name,
    roomId: apiObject.room_id,
    canonicalAlias: apiObject.canonical_alias,
    avatarUrl: apiObject.avatar_url,
    topic: apiObject.topic,
    numJoinedMembers: apiObject.num_joined_members,
    worldReadable: apiObject.world_readable,
    guestCanJoin: apiObject.guest_can_join,
    isPublic: apiObject.is_public !== false
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ncm91cHMuanMiXSwibmFtZXMiOlsiR3JvdXBNZW1iZXJUeXBlIiwiUHJvcFR5cGVzIiwic2hhcGUiLCJ1c2VySWQiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwiZGlzcGxheW5hbWUiLCJhdmF0YXJVcmwiLCJHcm91cFJvb21UeXBlIiwibmFtZSIsInJvb21JZCIsImNhbm9uaWNhbEFsaWFzIiwiZ3JvdXBNZW1iZXJGcm9tQXBpT2JqZWN0IiwiYXBpT2JqZWN0IiwidXNlcl9pZCIsImF2YXRhcl91cmwiLCJpc1ByaXZpbGVnZWQiLCJpc19wcml2aWxlZ2VkIiwiZ3JvdXBSb29tRnJvbUFwaU9iamVjdCIsImNhbm9uaWNhbF9hbGlhcyIsInJvb21faWQiLCJ0b3BpYyIsIm51bUpvaW5lZE1lbWJlcnMiLCJudW1fam9pbmVkX21lbWJlcnMiLCJ3b3JsZFJlYWRhYmxlIiwid29ybGRfcmVhZGFibGUiLCJndWVzdENhbkpvaW4iLCJndWVzdF9jYW5fam9pbiIsImlzUHVibGljIiwiaXNfcHVibGljIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWdCQTs7QUFDQTs7QUFqQkE7Ozs7Ozs7Ozs7Ozs7OztBQW1CTyxNQUFNQSxlQUFlLEdBQUdDLG1CQUFVQyxLQUFWLENBQWdCO0FBQzNDQyxFQUFBQSxNQUFNLEVBQUVGLG1CQUFVRyxNQUFWLENBQWlCQyxVQURrQjtBQUUzQ0MsRUFBQUEsV0FBVyxFQUFFTCxtQkFBVUcsTUFGb0I7QUFHM0NHLEVBQUFBLFNBQVMsRUFBRU4sbUJBQVVHO0FBSHNCLENBQWhCLENBQXhCOzs7O0FBTUEsTUFBTUksYUFBYSxHQUFHUCxtQkFBVUMsS0FBVixDQUFnQjtBQUN6Q0ksRUFBQUEsV0FBVyxFQUFFTCxtQkFBVUcsTUFEa0I7QUFFekNLLEVBQUFBLElBQUksRUFBRVIsbUJBQVVHLE1BRnlCO0FBR3pDTSxFQUFBQSxNQUFNLEVBQUVULG1CQUFVRyxNQUFWLENBQWlCQyxVQUhnQjtBQUl6Q00sRUFBQUEsY0FBYyxFQUFFVixtQkFBVUcsTUFKZTtBQUt6Q0csRUFBQUEsU0FBUyxFQUFFTixtQkFBVUc7QUFMb0IsQ0FBaEIsQ0FBdEI7Ozs7QUFRQSxTQUFTUSx3QkFBVCxDQUFrQ0MsU0FBbEMsRUFBNkM7QUFDaEQsU0FBTztBQUNIVixJQUFBQSxNQUFNLEVBQUVVLFNBQVMsQ0FBQ0MsT0FEZjtBQUVIUixJQUFBQSxXQUFXLEVBQUVPLFNBQVMsQ0FBQ1AsV0FGcEI7QUFHSEMsSUFBQUEsU0FBUyxFQUFFTSxTQUFTLENBQUNFLFVBSGxCO0FBSUhDLElBQUFBLFlBQVksRUFBRUgsU0FBUyxDQUFDSTtBQUpyQixHQUFQO0FBTUg7O0FBRU0sU0FBU0Msc0JBQVQsQ0FBZ0NMLFNBQWhDLEVBQTJDO0FBQzlDLFNBQU87QUFDSFAsSUFBQUEsV0FBVyxFQUFFTyxTQUFTLENBQUNKLElBQVYsSUFBa0JJLFNBQVMsQ0FBQ00sZUFBNUIsSUFBK0MseUJBQUcsY0FBSCxDQUR6RDtBQUVIVixJQUFBQSxJQUFJLEVBQUVJLFNBQVMsQ0FBQ0osSUFGYjtBQUdIQyxJQUFBQSxNQUFNLEVBQUVHLFNBQVMsQ0FBQ08sT0FIZjtBQUlIVCxJQUFBQSxjQUFjLEVBQUVFLFNBQVMsQ0FBQ00sZUFKdkI7QUFLSFosSUFBQUEsU0FBUyxFQUFFTSxTQUFTLENBQUNFLFVBTGxCO0FBTUhNLElBQUFBLEtBQUssRUFBRVIsU0FBUyxDQUFDUSxLQU5kO0FBT0hDLElBQUFBLGdCQUFnQixFQUFFVCxTQUFTLENBQUNVLGtCQVB6QjtBQVFIQyxJQUFBQSxhQUFhLEVBQUVYLFNBQVMsQ0FBQ1ksY0FSdEI7QUFTSEMsSUFBQUEsWUFBWSxFQUFFYixTQUFTLENBQUNjLGNBVHJCO0FBVUhDLElBQUFBLFFBQVEsRUFBRWYsU0FBUyxDQUFDZ0IsU0FBVixLQUF3QjtBQVYvQixHQUFQO0FBWUgiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTcgTmV3IFZlY3RvciBMdGRcblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgX3QgfSBmcm9tICcuL2xhbmd1YWdlSGFuZGxlci5qcyc7XG5cbmV4cG9ydCBjb25zdCBHcm91cE1lbWJlclR5cGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHVzZXJJZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGRpc3BsYXluYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGF2YXRhclVybDogUHJvcFR5cGVzLnN0cmluZyxcbn0pO1xuXG5leHBvcnQgY29uc3QgR3JvdXBSb29tVHlwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZGlzcGxheW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICByb29tSWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBjYW5vbmljYWxBbGlhczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhdmF0YXJVcmw6IFByb3BUeXBlcy5zdHJpbmcsXG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwTWVtYmVyRnJvbUFwaU9iamVjdChhcGlPYmplY3QpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB1c2VySWQ6IGFwaU9iamVjdC51c2VyX2lkLFxuICAgICAgICBkaXNwbGF5bmFtZTogYXBpT2JqZWN0LmRpc3BsYXluYW1lLFxuICAgICAgICBhdmF0YXJVcmw6IGFwaU9iamVjdC5hdmF0YXJfdXJsLFxuICAgICAgICBpc1ByaXZpbGVnZWQ6IGFwaU9iamVjdC5pc19wcml2aWxlZ2VkLFxuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBncm91cFJvb21Gcm9tQXBpT2JqZWN0KGFwaU9iamVjdCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGRpc3BsYXluYW1lOiBhcGlPYmplY3QubmFtZSB8fCBhcGlPYmplY3QuY2Fub25pY2FsX2FsaWFzIHx8IF90KFwiVW5uYW1lZCBSb29tXCIpLFxuICAgICAgICBuYW1lOiBhcGlPYmplY3QubmFtZSxcbiAgICAgICAgcm9vbUlkOiBhcGlPYmplY3Qucm9vbV9pZCxcbiAgICAgICAgY2Fub25pY2FsQWxpYXM6IGFwaU9iamVjdC5jYW5vbmljYWxfYWxpYXMsXG4gICAgICAgIGF2YXRhclVybDogYXBpT2JqZWN0LmF2YXRhcl91cmwsXG4gICAgICAgIHRvcGljOiBhcGlPYmplY3QudG9waWMsXG4gICAgICAgIG51bUpvaW5lZE1lbWJlcnM6IGFwaU9iamVjdC5udW1fam9pbmVkX21lbWJlcnMsXG4gICAgICAgIHdvcmxkUmVhZGFibGU6IGFwaU9iamVjdC53b3JsZF9yZWFkYWJsZSxcbiAgICAgICAgZ3Vlc3RDYW5Kb2luOiBhcGlPYmplY3QuZ3Vlc3RfY2FuX2pvaW4sXG4gICAgICAgIGlzUHVibGljOiBhcGlPYmplY3QuaXNfcHVibGljICE9PSBmYWxzZSxcbiAgICB9O1xufVxuIl19