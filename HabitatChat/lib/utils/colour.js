"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hueToRGB = hueToRGB;
exports.textToHtmlRainbow = textToHtmlRainbow;

/*
Copyright 2019 Michael Telatynski <7t3chguy@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function hueToRGB(h, s, l) {
  const c = s * (1 - Math.abs(2 * l - 1));
  const x = c * (1 - Math.abs(h / 60 % 2 - 1));
  const m = l - c / 2;
  let r = 0;
  let g = 0;
  let b = 0;

  if (0 <= h && h < 60) {
    r = c;
    g = x;
    b = 0;
  } else if (60 <= h && h < 120) {
    r = x;
    g = c;
    b = 0;
  } else if (120 <= h && h < 180) {
    r = 0;
    g = c;
    b = x;
  } else if (180 <= h && h < 240) {
    r = 0;
    g = x;
    b = c;
  } else if (240 <= h && h < 300) {
    r = x;
    g = 0;
    b = c;
  } else if (300 <= h && h < 360) {
    r = c;
    g = 0;
    b = x;
  }

  return [Math.round((r + m) * 255), Math.round((g + m) * 255), Math.round((b + m) * 255)];
}

function textToHtmlRainbow(str) {
  const frequency = 360 / str.length;
  return Array.from(str).map((c, i) => {
    const [r, g, b] = hueToRGB(i * frequency, 1.0, 0.5);
    return '<font color="#' + r.toString(16).padStart(2, "0") + g.toString(16).padStart(2, "0") + b.toString(16).padStart(2, "0") + '">' + c + '</font>';
  }).join("");
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9jb2xvdXIuanMiXSwibmFtZXMiOlsiaHVlVG9SR0IiLCJoIiwicyIsImwiLCJjIiwiTWF0aCIsImFicyIsIngiLCJtIiwiciIsImciLCJiIiwicm91bmQiLCJ0ZXh0VG9IdG1sUmFpbmJvdyIsInN0ciIsImZyZXF1ZW5jeSIsImxlbmd0aCIsIkFycmF5IiwiZnJvbSIsIm1hcCIsImkiLCJ0b1N0cmluZyIsInBhZFN0YXJ0Iiwiam9pbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JPLFNBQVNBLFFBQVQsQ0FBa0JDLENBQWxCLEVBQXFCQyxDQUFyQixFQUF3QkMsQ0FBeEIsRUFBMkI7QUFDOUIsUUFBTUMsQ0FBQyxHQUFHRixDQUFDLElBQUksSUFBSUcsSUFBSSxDQUFDQyxHQUFMLENBQVMsSUFBSUgsQ0FBSixHQUFRLENBQWpCLENBQVIsQ0FBWDtBQUNBLFFBQU1JLENBQUMsR0FBR0gsQ0FBQyxJQUFJLElBQUlDLElBQUksQ0FBQ0MsR0FBTCxDQUFVTCxDQUFDLEdBQUcsRUFBTCxHQUFXLENBQVgsR0FBZSxDQUF4QixDQUFSLENBQVg7QUFDQSxRQUFNTyxDQUFDLEdBQUdMLENBQUMsR0FBR0MsQ0FBQyxHQUFHLENBQWxCO0FBRUEsTUFBSUssQ0FBQyxHQUFHLENBQVI7QUFDQSxNQUFJQyxDQUFDLEdBQUcsQ0FBUjtBQUNBLE1BQUlDLENBQUMsR0FBRyxDQUFSOztBQUVBLE1BQUksS0FBS1YsQ0FBTCxJQUFVQSxDQUFDLEdBQUcsRUFBbEIsRUFBc0I7QUFDbEJRLElBQUFBLENBQUMsR0FBR0wsQ0FBSjtBQUNBTSxJQUFBQSxDQUFDLEdBQUdILENBQUo7QUFDQUksSUFBQUEsQ0FBQyxHQUFHLENBQUo7QUFDSCxHQUpELE1BSU8sSUFBSSxNQUFNVixDQUFOLElBQVdBLENBQUMsR0FBRyxHQUFuQixFQUF3QjtBQUMzQlEsSUFBQUEsQ0FBQyxHQUFHRixDQUFKO0FBQ0FHLElBQUFBLENBQUMsR0FBR04sQ0FBSjtBQUNBTyxJQUFBQSxDQUFDLEdBQUcsQ0FBSjtBQUNILEdBSk0sTUFJQSxJQUFJLE9BQU9WLENBQVAsSUFBWUEsQ0FBQyxHQUFHLEdBQXBCLEVBQXlCO0FBQzVCUSxJQUFBQSxDQUFDLEdBQUcsQ0FBSjtBQUNBQyxJQUFBQSxDQUFDLEdBQUdOLENBQUo7QUFDQU8sSUFBQUEsQ0FBQyxHQUFHSixDQUFKO0FBQ0gsR0FKTSxNQUlBLElBQUksT0FBT04sQ0FBUCxJQUFZQSxDQUFDLEdBQUcsR0FBcEIsRUFBeUI7QUFDNUJRLElBQUFBLENBQUMsR0FBRyxDQUFKO0FBQ0FDLElBQUFBLENBQUMsR0FBR0gsQ0FBSjtBQUNBSSxJQUFBQSxDQUFDLEdBQUdQLENBQUo7QUFDSCxHQUpNLE1BSUEsSUFBSSxPQUFPSCxDQUFQLElBQVlBLENBQUMsR0FBRyxHQUFwQixFQUF5QjtBQUM1QlEsSUFBQUEsQ0FBQyxHQUFHRixDQUFKO0FBQ0FHLElBQUFBLENBQUMsR0FBRyxDQUFKO0FBQ0FDLElBQUFBLENBQUMsR0FBR1AsQ0FBSjtBQUNILEdBSk0sTUFJQSxJQUFJLE9BQU9ILENBQVAsSUFBWUEsQ0FBQyxHQUFHLEdBQXBCLEVBQXlCO0FBQzVCUSxJQUFBQSxDQUFDLEdBQUdMLENBQUo7QUFDQU0sSUFBQUEsQ0FBQyxHQUFHLENBQUo7QUFDQUMsSUFBQUEsQ0FBQyxHQUFHSixDQUFKO0FBQ0g7O0FBRUQsU0FBTyxDQUFDRixJQUFJLENBQUNPLEtBQUwsQ0FBVyxDQUFDSCxDQUFDLEdBQUdELENBQUwsSUFBVSxHQUFyQixDQUFELEVBQTRCSCxJQUFJLENBQUNPLEtBQUwsQ0FBVyxDQUFDRixDQUFDLEdBQUdGLENBQUwsSUFBVSxHQUFyQixDQUE1QixFQUF1REgsSUFBSSxDQUFDTyxLQUFMLENBQVcsQ0FBQ0QsQ0FBQyxHQUFHSCxDQUFMLElBQVUsR0FBckIsQ0FBdkQsQ0FBUDtBQUNIOztBQUdNLFNBQVNLLGlCQUFULENBQTJCQyxHQUEzQixFQUFnQztBQUNuQyxRQUFNQyxTQUFTLEdBQUcsTUFBTUQsR0FBRyxDQUFDRSxNQUE1QjtBQUVBLFNBQU9DLEtBQUssQ0FBQ0MsSUFBTixDQUFXSixHQUFYLEVBQWdCSyxHQUFoQixDQUFvQixDQUFDZixDQUFELEVBQUlnQixDQUFKLEtBQVU7QUFDakMsVUFBTSxDQUFDWCxDQUFELEVBQUlDLENBQUosRUFBT0MsQ0FBUCxJQUFZWCxRQUFRLENBQUNvQixDQUFDLEdBQUdMLFNBQUwsRUFBZ0IsR0FBaEIsRUFBcUIsR0FBckIsQ0FBMUI7QUFDQSxXQUFPLG1CQUNITixDQUFDLENBQUNZLFFBQUYsQ0FBVyxFQUFYLEVBQWVDLFFBQWYsQ0FBd0IsQ0FBeEIsRUFBMkIsR0FBM0IsQ0FERyxHQUVIWixDQUFDLENBQUNXLFFBQUYsQ0FBVyxFQUFYLEVBQWVDLFFBQWYsQ0FBd0IsQ0FBeEIsRUFBMkIsR0FBM0IsQ0FGRyxHQUdIWCxDQUFDLENBQUNVLFFBQUYsQ0FBVyxFQUFYLEVBQWVDLFFBQWYsQ0FBd0IsQ0FBeEIsRUFBMkIsR0FBM0IsQ0FIRyxHQUlILElBSkcsR0FJSWxCLENBSkosR0FJUSxTQUpmO0FBS0gsR0FQTSxFQU9KbUIsSUFQSSxDQU9DLEVBUEQsQ0FBUDtBQVFIIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE5IE1pY2hhZWwgVGVsYXR5bnNraSA8N3QzY2hndXlAZ21haWwuY29tPlxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmV4cG9ydCBmdW5jdGlvbiBodWVUb1JHQihoLCBzLCBsKSB7XG4gICAgY29uc3QgYyA9IHMgKiAoMSAtIE1hdGguYWJzKDIgKiBsIC0gMSkpO1xuICAgIGNvbnN0IHggPSBjICogKDEgLSBNYXRoLmFicygoaCAvIDYwKSAlIDIgLSAxKSk7XG4gICAgY29uc3QgbSA9IGwgLSBjIC8gMjtcblxuICAgIGxldCByID0gMDtcbiAgICBsZXQgZyA9IDA7XG4gICAgbGV0IGIgPSAwO1xuXG4gICAgaWYgKDAgPD0gaCAmJiBoIDwgNjApIHtcbiAgICAgICAgciA9IGM7XG4gICAgICAgIGcgPSB4O1xuICAgICAgICBiID0gMDtcbiAgICB9IGVsc2UgaWYgKDYwIDw9IGggJiYgaCA8IDEyMCkge1xuICAgICAgICByID0geDtcbiAgICAgICAgZyA9IGM7XG4gICAgICAgIGIgPSAwO1xuICAgIH0gZWxzZSBpZiAoMTIwIDw9IGggJiYgaCA8IDE4MCkge1xuICAgICAgICByID0gMDtcbiAgICAgICAgZyA9IGM7XG4gICAgICAgIGIgPSB4O1xuICAgIH0gZWxzZSBpZiAoMTgwIDw9IGggJiYgaCA8IDI0MCkge1xuICAgICAgICByID0gMDtcbiAgICAgICAgZyA9IHg7XG4gICAgICAgIGIgPSBjO1xuICAgIH0gZWxzZSBpZiAoMjQwIDw9IGggJiYgaCA8IDMwMCkge1xuICAgICAgICByID0geDtcbiAgICAgICAgZyA9IDA7XG4gICAgICAgIGIgPSBjO1xuICAgIH0gZWxzZSBpZiAoMzAwIDw9IGggJiYgaCA8IDM2MCkge1xuICAgICAgICByID0gYztcbiAgICAgICAgZyA9IDA7XG4gICAgICAgIGIgPSB4O1xuICAgIH1cblxuICAgIHJldHVybiBbTWF0aC5yb3VuZCgociArIG0pICogMjU1KSwgTWF0aC5yb3VuZCgoZyArIG0pICogMjU1KSwgTWF0aC5yb3VuZCgoYiArIG0pICogMjU1KV07XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHRleHRUb0h0bWxSYWluYm93KHN0cikge1xuICAgIGNvbnN0IGZyZXF1ZW5jeSA9IDM2MCAvIHN0ci5sZW5ndGg7XG5cbiAgICByZXR1cm4gQXJyYXkuZnJvbShzdHIpLm1hcCgoYywgaSkgPT4ge1xuICAgICAgICBjb25zdCBbciwgZywgYl0gPSBodWVUb1JHQihpICogZnJlcXVlbmN5LCAxLjAsIDAuNSk7XG4gICAgICAgIHJldHVybiAnPGZvbnQgY29sb3I9XCIjJyArXG4gICAgICAgICAgICByLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIikgK1xuICAgICAgICAgICAgZy50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpICtcbiAgICAgICAgICAgIGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSArXG4gICAgICAgICAgICAnXCI+JyArIGMgKyAnPC9mb250Pic7XG4gICAgfSkuam9pbihcIlwiKTtcbn1cbiJdfQ==