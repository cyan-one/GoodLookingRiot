"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.showGroupInviteDialog = showGroupInviteDialog;
exports.showGroupAddRoomDialog = showGroupAddRoomDialog;

var _react = _interopRequireDefault(require("react"));

var _Modal = _interopRequireDefault(require("./Modal"));

var sdk = _interopRequireWildcard(require("./"));

var _MultiInviter = _interopRequireDefault(require("./utils/MultiInviter"));

var _languageHandler = require("./languageHandler");

var _MatrixClientPeg = require("./MatrixClientPeg");

var _GroupStore = _interopRequireDefault(require("./stores/GroupStore"));

var _promise = require("./utils/promise");

/*
Copyright 2017 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
function showGroupInviteDialog(groupId) {
  return new Promise((resolve, reject) => {
    const description = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Who would you like to add to this community?")), /*#__PURE__*/_react.default.createElement("div", {
      className: "warning"
    }, (0, _languageHandler._t)("Warning: any person you add to a community will be publicly " + "visible to anyone who knows the community ID")));

    const AddressPickerDialog = sdk.getComponent("dialogs.AddressPickerDialog");

    _Modal.default.createTrackedDialog('Group Invite', '', AddressPickerDialog, {
      title: (0, _languageHandler._t)("Invite new community members"),
      description: description,
      placeholder: (0, _languageHandler._t)("Name or Matrix ID"),
      button: (0, _languageHandler._t)("Invite to Community"),
      validAddressTypes: ['mx-user-id'],
      onFinished: (success, addrs) => {
        if (!success) return;

        _onGroupInviteFinished(groupId, addrs).then(resolve, reject);
      }
    },
    /*className=*/
    null,
    /*isPriority=*/
    false,
    /*isStatic=*/
    true);
  });
}

function showGroupAddRoomDialog(groupId) {
  return new Promise((resolve, reject) => {
    let addRoomsPublicly = false;

    const onCheckboxClicked = e => {
      addRoomsPublicly = e.target.checked;
    };

    const description = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Which rooms would you like to add to this community?")));

    const checkboxContainer = /*#__PURE__*/_react.default.createElement("label", {
      className: "mx_GroupAddressPicker_checkboxContainer"
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "checkbox",
      onChange: onCheckboxClicked
    }), /*#__PURE__*/_react.default.createElement("div", null, (0, _languageHandler._t)("Show these rooms to non-members on the community page and room list?")));

    const AddressPickerDialog = sdk.getComponent("dialogs.AddressPickerDialog");

    _Modal.default.createTrackedDialog('Add Rooms to Group', '', AddressPickerDialog, {
      title: (0, _languageHandler._t)("Add rooms to the community"),
      description: description,
      extraNode: checkboxContainer,
      placeholder: (0, _languageHandler._t)("Room name or alias"),
      button: (0, _languageHandler._t)("Add to community"),
      pickerType: 'room',
      validAddressTypes: ['mx-room-id'],
      onFinished: (success, addrs) => {
        if (!success) return;

        _onGroupAddRoomFinished(groupId, addrs, addRoomsPublicly).then(resolve, reject);
      }
    },
    /*className=*/
    null,
    /*isPriority=*/
    false,
    /*isStatic=*/
    true);
  });
}

function _onGroupInviteFinished(groupId, addrs) {
  const multiInviter = new _MultiInviter.default(groupId);
  const addrTexts = addrs.map(addr => addr.address);
  return multiInviter.invite(addrTexts).then(completionStates => {
    // Show user any errors
    const errorList = [];

    for (const addr of Object.keys(completionStates)) {
      if (addrs[addr] === "error") {
        errorList.push(addr);
      }
    }

    if (errorList.length > 0) {
      const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

      _Modal.default.createTrackedDialog('Failed to invite the following users to the group', '', ErrorDialog, {
        title: (0, _languageHandler._t)("Failed to invite the following users to %(groupId)s:", {
          groupId: groupId
        }),
        description: errorList.join(", ")
      });
    }
  }).catch(err => {
    const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

    _Modal.default.createTrackedDialog('Failed to invite users to group', '', ErrorDialog, {
      title: (0, _languageHandler._t)("Failed to invite users to community"),
      description: (0, _languageHandler._t)("Failed to invite users to %(groupId)s", {
        groupId: groupId
      })
    });
  });
}

function _onGroupAddRoomFinished(groupId, addrs, addRoomsPublicly) {
  const matrixClient = _MatrixClientPeg.MatrixClientPeg.get();

  const errorList = [];
  return (0, _promise.allSettled)(addrs.map(addr => {
    return _GroupStore.default.addRoomToGroup(groupId, addr.address, addRoomsPublicly).catch(() => {
      errorList.push(addr.address);
    }).then(() => {
      const roomId = addr.address;
      const room = matrixClient.getRoom(roomId); // Can the user change related groups?

      if (!room || !room.currentState.mayClientSendStateEvent("m.room.related_groups", matrixClient)) {
        return;
      } // Get the related groups


      const relatedGroupsEvent = room.currentState.getStateEvents('m.room.related_groups', '');
      const groups = relatedGroupsEvent ? relatedGroupsEvent.getContent().groups || [] : []; // Add this group as related

      if (!groups.includes(groupId)) {
        groups.push(groupId);
        return _MatrixClientPeg.MatrixClientPeg.get().sendStateEvent(roomId, 'm.room.related_groups', {
          groups
        }, '');
      }
    });
  })).then(() => {
    if (errorList.length === 0) {
      return;
    }

    const ErrorDialog = sdk.getComponent("dialogs.ErrorDialog");

    _Modal.default.createTrackedDialog('Failed to add the following room to the group', '', ErrorDialog, {
      title: (0, _languageHandler._t)("Failed to add the following rooms to %(groupId)s:", {
        groupId
      }),
      description: errorList.join(", ")
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,