"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.verifyDevice = verifyDevice;
exports.legacyVerifyUser = legacyVerifyUser;
exports.verifyUser = verifyUser;
exports.pendingVerificationRequestForUser = pendingVerificationRequestForUser;

var _MatrixClientPeg = require("./MatrixClientPeg");

var _dispatcher = _interopRequireDefault(require("./dispatcher/dispatcher"));

var _Modal = _interopRequireDefault(require("./Modal"));

var sdk = _interopRequireWildcard(require("./index"));

var _languageHandler = require("./languageHandler");

var _RightPanelStorePhases = require("./stores/RightPanelStorePhases");

var _createRoom = require("./createRoom");

var _CrossSigningManager = require("./CrossSigningManager");

var _SettingsStore = _interopRequireDefault(require("./settings/SettingsStore"));

var _crypto = require("matrix-js-sdk/src/crypto");

/*
Copyright 2019, 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
async function enable4SIfNeeded() {
  const cli = _MatrixClientPeg.MatrixClientPeg.get();

  if (!cli.isCryptoEnabled() || !_SettingsStore.default.getValue("feature_cross_signing")) {
    return false;
  }

  const usk = cli.getCrossSigningId("user_signing");

  if (!usk) {
    await (0, _CrossSigningManager.accessSecretStorage)();
    return false;
  }

  return true;
}

function UntrustedDeviceDialog(props) {
  const {
    device,
    user,
    onFinished
  } = props;
  const BaseDialog = sdk.getComponent("dialogs.BaseDialog");
  const AccessibleButton = sdk.getComponent("elements.AccessibleButton");
  let askToVerifyText;
  let newSessionText;

  if (_MatrixClientPeg.MatrixClientPeg.get().getUserId() === user.userId) {
    newSessionText = (0, _languageHandler._t)("You signed in to a new session without verifying it:");
    askToVerifyText = (0, _languageHandler._t)("Verify your other session using one of the options below.");
  } else {
    newSessionText = (0, _languageHandler._t)("%(name)s (%(userId)s) signed in to a new session without verifying it:", {
      name: user.displayName,
      userId: user.userId
    });
    askToVerifyText = (0, _languageHandler._t)("Ask this user to verify their session, or manually verify it below.");
  }

  return /*#__PURE__*/React.createElement(BaseDialog, {
    onFinished: onFinished,
    headerImage: require("../res/img/e2e/warning.svg"),
    title: (0, _languageHandler._t)("Not Trusted")
  }, /*#__PURE__*/React.createElement("div", {
    className: "mx_Dialog_content",
    id: "mx_Dialog_content"
  }, /*#__PURE__*/React.createElement("p", null, newSessionText), /*#__PURE__*/React.createElement("p", null, device.getDisplayName(), " (", device.deviceId, ")"), /*#__PURE__*/React.createElement("p", null, askToVerifyText)), /*#__PURE__*/React.createElement("div", {
    className: "mx_Dialog_buttons"
  }, /*#__PURE__*/React.createElement(AccessibleButton, {
    element: "button",
    kind: "secondary",
    onClick: () => onFinished("legacy")
  }, (0, _languageHandler._t)("Manually Verify by Text")), /*#__PURE__*/React.createElement(AccessibleButton, {
    element: "button",
    kind: "secondary",
    onClick: () => onFinished("sas")
  }, (0, _languageHandler._t)("Interactively verify by Emoji")), /*#__PURE__*/React.createElement(AccessibleButton, {
    kind: "primary",
    onClick: () => onFinished()
  }, (0, _languageHandler._t)("Done"))));
}

async function verifyDevice(user, device) {
  const cli = _MatrixClientPeg.MatrixClientPeg.get(); // if cross-signing is not explicitly disabled, check if it should be enabled first.


  if (cli.getCryptoTrustCrossSignedDevices()) {
    if (!(await enable4SIfNeeded())) {
      return;
    }
  }

  _Modal.default.createTrackedDialog("Verification warning", "unverified session", UntrustedDeviceDialog, {
    user,
    device,
    onFinished: async action => {
      if (action === "sas") {
        const verificationRequestPromise = cli.legacyDeviceVerification(user.userId, device.deviceId, _crypto.verificationMethods.SAS);

        _dispatcher.default.dispatch({
          action: "set_right_panel_phase",
          phase: _RightPanelStorePhases.RIGHT_PANEL_PHASES.EncryptionPanel,
          refireParams: {
            member: user,
            verificationRequestPromise
          }
        });
      } else if (action === "legacy") {
        const ManualDeviceKeyVerificationDialog = sdk.getComponent("dialogs.ManualDeviceKeyVerificationDialog");

        _Modal.default.createTrackedDialog("Legacy verify session", "legacy verify session", ManualDeviceKeyVerificationDialog, {
          userId: user.userId,
          device
        });
      }
    }
  });
}

async function legacyVerifyUser(user) {
  const cli = _MatrixClientPeg.MatrixClientPeg.get(); // if cross-signing is not explicitly disabled, check if it should be enabled first.


  if (cli.getCryptoTrustCrossSignedDevices()) {
    if (!(await enable4SIfNeeded())) {
      return;
    }
  }

  const verificationRequestPromise = cli.requestVerification(user.userId);

  _dispatcher.default.dispatch({
    action: "set_right_panel_phase",
    phase: _RightPanelStorePhases.RIGHT_PANEL_PHASES.EncryptionPanel,
    refireParams: {
      member: user,
      verificationRequestPromise
    }
  });
}

async function verifyUser(user) {
  if (!(await enable4SIfNeeded())) {
    return;
  }

  const existingRequest = pendingVerificationRequestForUser(user);

  _dispatcher.default.dispatch({
    action: "set_right_panel_phase",
    phase: _RightPanelStorePhases.RIGHT_PANEL_PHASES.EncryptionPanel,
    refireParams: {
      member: user,
      verificationRequest: existingRequest
    }
  });
}

function pendingVerificationRequestForUser(user) {
  const cli = _MatrixClientPeg.MatrixClientPeg.get();

  const dmRoom = (0, _createRoom.findDMForUser)(cli, user.userId);

  if (dmRoom) {
    return cli.findVerificationRequestDMInProgress(dmRoom.roomId);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,