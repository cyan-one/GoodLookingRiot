"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _languageHandler = require("../languageHandler");

var _AutocompleteProvider = _interopRequireDefault(require("./AutocompleteProvider"));

var _MatrixClientPeg = require("../MatrixClientPeg");

var _QueryMatcher = _interopRequireDefault(require("./QueryMatcher"));

var _Components = require("./Components");

var sdk = _interopRequireWildcard(require("../index"));

var _sortBy2 = _interopRequireDefault(require("lodash/sortBy"));

var _Permalinks = require("../utils/permalinks/Permalinks");

/*
Copyright 2016 Aviral Dasgupta
Copyright 2017 Vector Creations Ltd
Copyright 2017, 2018 New Vector Ltd
Copyright 2018 Michael Telatynski <7t3chguy@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const ROOM_REGEX = /\B#\S*/g;

function score(query
/*: string*/
, space
/*: string*/
) {
  const index = space.indexOf(query);

  if (index === -1) {
    return Infinity;
  } else {
    return index;
  }
}

function matcherObject(room
/*: Room*/
, displayedAlias
/*: string*/
, matchName = "") {
  return {
    room,
    matchName,
    displayedAlias
  };
}

class RoomProvider extends _AutocompleteProvider.default {
  constructor() {
    super(ROOM_REGEX);
    (0, _defineProperty2.default)(this, "matcher", void 0);
    this.matcher = new _QueryMatcher.default([], {
      keys: ['displayedAlias', 'matchName']
    });
  }

  async getCompletions(query
  /*: string*/
  , selection
  /*: ISelectionRange*/
  , force = false)
  /*: Promise<ICompletion[]>*/
  {
    const RoomAvatar = sdk.getComponent('views.avatars.RoomAvatar');

    const client = _MatrixClientPeg.MatrixClientPeg.get();

    let completions = [];
    const {
      command,
      range
    } = this.getCurrentCommand(query, selection, force);

    if (command) {
      // the only reason we need to do this is because Fuse only matches on properties
      let matcherObjects = client.getVisibleRooms().reduce((aliases, room) => {
        if (room.getCanonicalAlias()) {
          aliases = aliases.concat(matcherObject(room, room.getCanonicalAlias(), room.name));
        }

        if (room.getAltAliases().length) {
          const altAliases = room.getAltAliases().map(alias => matcherObject(room, alias));
          aliases = aliases.concat(altAliases);
        }

        return aliases;
      }, []); // Filter out any matches where the user will have also autocompleted new rooms

      matcherObjects = matcherObjects.filter(r => {
        const tombstone = r.room.currentState.getStateEvents("m.room.tombstone", "");

        if (tombstone && tombstone.getContent() && tombstone.getContent()['replacement_room']) {
          const hasReplacementRoom = matcherObjects.some(r2 => r2.room.roomId === tombstone.getContent()['replacement_room']);
          return !hasReplacementRoom;
        }

        return true;
      });
      this.matcher.setObjects(matcherObjects);
      const matchedString = command[0];
      completions = this.matcher.match(matchedString);
      completions = (0, _sortBy2.default)(completions, [c => score(matchedString, c.displayedAlias), c => c.displayedAlias.length]);
      completions = completions.map(room => {
        return {
          completion: room.displayedAlias,
          completionId: room.room.roomId,
          type: "room",
          suffix: ' ',
          href: (0, _Permalinks.makeRoomPermalink)(room.displayedAlias),
          component: /*#__PURE__*/_react.default.createElement(_Components.PillCompletion, {
            initialComponent: /*#__PURE__*/_react.default.createElement(RoomAvatar, {
              width: 24,
              height: 24,
              room: room.room
            }),
            title: room.room.name,
            description: room.displayedAlias
          }),
          range
        };
      }).filter(completion => !!completion.completion && completion.completion.length > 0).slice(0, 4);
    }

    return completions;
  }

  getName() {
    return 'ðŸ’¬ ' + (0, _languageHandler._t)('Rooms');
  }

  renderCompletions(completions
  /*: React.ReactNode[]*/
  )
  /*: React.ReactNode*/
  {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mx_Autocomplete_Completion_container_pill mx_Autocomplete_Completion_container_truncate",
      role: "listbox",
      "aria-label": (0, _languageHandler._t)("Room Autocomplete")
    }, completions);
  }

}

exports.default = RoomProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,